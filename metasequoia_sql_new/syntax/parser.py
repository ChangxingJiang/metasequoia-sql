"""
SYSTEM_END_OF_INPUT(0): 终结符
SYSTEM_ABORT(1): 终结符
KEYWORD_USED_AS_IDENT(2): 终结符
KEYWORD_USED_AS_KEYWORD(3): 终结符
CONDITIONLESS_JOIN(4): 终结符
STRAIGHT_JOIN(5): 终结符
NEG(6): 终结符
SUBQUERY_AS_EXPR(7): 终结符
EMPTY_FROM_CLAUSE(8): 终结符
OPERATOR_PLUS(9): 终结符
OPERATOR_CARET(10): 终结符
OPERATOR_TILDE(11): 终结符
OPERATOR_PERCENT(12): 终结符
OPERATOR_SUB(13): 终结符
OPERATOR_LT(14): 终结符
OPERATOR_GT(15): 终结符
OPERATOR_EQ(16): 终结符
OPERATOR_STAR(17): 终结符
OPERATOR_SLASH(18): 终结符
OPERATOR_BANG(19): 终结符
OPERATOR_AMP(20): 终结符
OPERATOR_BAR(21): 终结符
OPERATOR_COLON(22): 终结符
OPERATOR_LPAREN(23): 终结符
OPERATOR_RPAREN(24): 终结符
OPERATOR_COMMA(25): 终结符
OPERATOR_LBRACE(26): 终结符
OPERATOR_RBRACE(27): 终结符
OPERATOR_DOT(28): 终结符
OPERATOR_AT(29): 终结符
OPERATOR_SEMICOLON(30): 终结符
OPERATOR_DOLLAR(31): 终结符
OPERATOR_AMP_AMP(32): 终结符
OPERATOR_LT_EQ_GT(33): 终结符
OPERATOR_GT_EQ(34): 终结符
OPERATOR_LT_EQ(35): 终结符
OPERATOR_BANG_EQ(36): 终结符
OPERATOR_BAR_BAR(37): 终结符
OPERATOR_LT_LT(38): 终结符
OPERATOR_GT_GT(39): 终结符
OPERATOR_SUB_GT(40): 终结符
OPERATOR_SUB_GT_GT(41): 终结符
OPERATOR_COLON_EQ(42): 终结符
LITERAL_BIN_NUM(43): 终结符
LITERAL_HEX_NUM(44): 终结符
LITERAL_DECIMAL_NUM(45): 终结符
LITERAL_FLOAT_NUM(46): 终结符
LITERAL_INT_NUM(47): 终结符
LITERAL_NCHAR_STRING(48): 终结符
LITERAL_TEXT_STRING(49): 终结符
LITERAL_UNDERSCORE_CHARSET(50): 终结符
IDENT(51): 终结符
IDENT_QUOTED(52): 终结符
LEX_HOSTNAME(53): 终结符
PARAM_MARKER(54): 终结符
KEYWORD_ACCESSIBLE(55): 终结符
KEYWORD_ACCOUNT(56): 终结符
KEYWORD_ACTION(57): 终结符
KEYWORD_ACTIVE(58): 终结符
KEYWORD_ADD(59): 终结符
KEYWORD_ADDDATE(60): 终结符
KEYWORD_ADMIN(61): 终结符
KEYWORD_AFTER(62): 终结符
KEYWORD_AGAINST(63): 终结符
KEYWORD_AGGREGATE(64): 终结符
KEYWORD_ALGORITHM(65): 终结符
KEYWORD_ALL(66): 终结符
KEYWORD_ALTER(67): 终结符
KEYWORD_ALWAYS(68): 终结符
KEYWORD_ANALYZE(69): 终结符
KEYWORD_AND(70): 终结符
KEYWORD_ANY(71): 终结符
KEYWORD_ARRAY(72): 终结符
KEYWORD_AS(73): 终结符
KEYWORD_ASC(74): 终结符
KEYWORD_ASCII(75): 终结符
KEYWORD_ASENSITIVE(76): 终结符
KEYWORD_AT(77): 终结符
KEYWORD_ATTRIBUTE(78): 终结符
KEYWORD_AUTHENTICATION(79): 终结符
KEYWORD_AUTO_INC(80): 终结符
KEYWORD_AUTOEXTEND_SIZE(81): 终结符
KEYWORD_AUTO_INCREMENT(82): 终结符
KEYWORD_AVG(83): 终结符
KEYWORD_AVG_ROW_LENGTH(84): 终结符
KEYWORD_BACKUP(85): 终结符
KEYWORD_BEFORE(86): 终结符
KEYWORD_BEGIN(87): 终结符
KEYWORD_BERNOULLI(88): 终结符
KEYWORD_BETWEEN(89): 终结符
KEYWORD_BIGINT(90): 终结符
KEYWORD_BINARY(91): 终结符
KEYWORD_BINLOG(92): 终结符
KEYWORD_BIT(93): 终结符
KEYWORD_BLOB(94): 终结符
KEYWORD_BLOCK(95): 终结符
KEYWORD_BOOL(96): 终结符
KEYWORD_BOOLEAN(97): 终结符
KEYWORD_BOTH(98): 终结符
KEYWORD_BTREE(99): 终结符
KEYWORD_BUCKETS(100): 终结符
KEYWORD_BULK(101): 终结符
KEYWORD_BY(102): 终结符
KEYWORD_BYTE(103): 终结符
KEYWORD_CACHE(104): 终结符
KEYWORD_CALL(105): 终结符
KEYWORD_CASCADE(106): 终结符
KEYWORD_CASCADED(107): 终结符
KEYWORD_CASE(108): 终结符
KEYWORD_CATALOG_NAME(109): 终结符
KEYWORD_CHAIN(110): 终结符
KEYWORD_CHALLENGE_RESPONSE(111): 终结符
KEYWORD_CHANGE(112): 终结符
KEYWORD_CHANGED(113): 终结符
KEYWORD_CHANNEL(114): 终结符
KEYWORD_CHAR(115): 终结符
KEYWORD_CHARACTER(116): 终结符
KEYWORD_CHARSET(117): 终结符
KEYWORD_CHECK(118): 终结符
KEYWORD_CHECKSUM(119): 终结符
KEYWORD_CIPHER(120): 终结符
KEYWORD_CLASS_ORIGIN(121): 终结符
KEYWORD_CLIENT(122): 终结符
KEYWORD_CLONE(123): 终结符
KEYWORD_CLOSE(124): 终结符
KEYWORD_COALESCE(125): 终结符
KEYWORD_CODE(126): 终结符
KEYWORD_COLLATE(127): 终结符
KEYWORD_COLLATION(128): 终结符
KEYWORD_COLUMN(129): 终结符
KEYWORD_COLUMNS(130): 终结符
KEYWORD_COLUMN_FORMAT(131): 终结符
KEYWORD_COLUMN_NAME(132): 终结符
KEYWORD_COMMENT(133): 终结符
KEYWORD_COMMIT(134): 终结符
KEYWORD_COMMITTED(135): 终结符
KEYWORD_COMPACT(136): 终结符
KEYWORD_COMPLETION(137): 终结符
KEYWORD_COMPONENT(138): 终结符
KEYWORD_COMPRESSED(139): 终结符
KEYWORD_COMPRESSION(140): 终结符
KEYWORD_CONCURRENT(141): 终结符
KEYWORD_CONDITION(142): 终结符
KEYWORD_CONNECTION(143): 终结符
KEYWORD_CONSISTENT(144): 终结符
KEYWORD_CONSTRAINT(145): 终结符
KEYWORD_CONSTRAINT_CATALOG(146): 终结符
KEYWORD_CONSTRAINT_NAME(147): 终结符
KEYWORD_CONSTRAINT_SCHEMA(148): 终结符
KEYWORD_CONTAINS(149): 终结符
KEYWORD_CONTEXT(150): 终结符
KEYWORD_CONTINUE(151): 终结符
KEYWORD_CONVERT(152): 终结符
KEYWORD_CPU(153): 终结符
KEYWORD_CREATE(154): 终结符
KEYWORD_CROSS(155): 终结符
KEYWORD_CUBE(156): 终结符
KEYWORD_CUME_DIST(157): 终结符
KEYWORD_CURRENT(158): 终结符
KEYWORD_CURRENT_DATE(159): 终结符
KEYWORD_CURRENT_TIME(160): 终结符
KEYWORD_CURRENT_TIMESTAMP(161): 终结符
KEYWORD_CURRENT_USER(162): 终结符
KEYWORD_CURSOR(163): 终结符
KEYWORD_CURSOR_NAME(164): 终结符
KEYWORD_DATA(165): 终结符
KEYWORD_DATABASE(166): 终结符
KEYWORD_DATABASES(167): 终结符
KEYWORD_DATAFILE(168): 终结符
KEYWORD_DATE(169): 终结符
KEYWORD_DATETIME(170): 终结符
KEYWORD_DAY(171): 终结符
KEYWORD_DAY_HOUR(172): 终结符
KEYWORD_DAY_MICROSECOND(173): 终结符
KEYWORD_DAY_MINUTE(174): 终结符
KEYWORD_DAY_SECOND(175): 终结符
KEYWORD_DEALLOCATE(176): 终结符
KEYWORD_DEC(177): 终结符
KEYWORD_DECIMAL(178): 终结符
KEYWORD_DECLARE(179): 终结符
KEYWORD_DEFAULT(180): 终结符
KEYWORD_DEFAULT_AUTH(181): 终结符
KEYWORD_DEFINER(182): 终结符
KEYWORD_DEFINITION(183): 终结符
KEYWORD_DELAYED(184): 终结符
KEYWORD_DELAY_KEY_WRITE(185): 终结符
KEYWORD_DELETE(186): 终结符
KEYWORD_DENSE_RANK(187): 终结符
KEYWORD_DESC(188): 终结符
KEYWORD_DESCRIBE(189): 终结符
KEYWORD_DESCRIPTION(190): 终结符
KEYWORD_DETERMINISTIC(191): 终结符
KEYWORD_DIAGNOSTICS(192): 终结符
KEYWORD_DIRECTORY(193): 终结符
KEYWORD_DISABLE(194): 终结符
KEYWORD_DISCARD(195): 终结符
KEYWORD_DISK(196): 终结符
KEYWORD_DISTINCT(197): 终结符
KEYWORD_DISTINCTROW(198): 终结符
KEYWORD_DIV(199): 终结符
KEYWORD_DO(200): 终结符
KEYWORD_DOUBLE(201): 终结符
KEYWORD_DROP(202): 终结符
KEYWORD_DUAL(203): 终结符
KEYWORD_DUMPFILE(204): 终结符
KEYWORD_DUPLICATE(205): 终结符
KEYWORD_DYNAMIC(206): 终结符
KEYWORD_EACH(207): 终结符
KEYWORD_ELSE(208): 终结符
KEYWORD_ELSEIF(209): 终结符
KEYWORD_EMPTY(210): 终结符
KEYWORD_ENABLE(211): 终结符
KEYWORD_ENCLOSED(212): 终结符
KEYWORD_ENCRYPTION(213): 终结符
KEYWORD_END(214): 终结符
KEYWORD_ENDS(215): 终结符
KEYWORD_ENFORCED(216): 终结符
KEYWORD_ENGINE(217): 终结符
KEYWORD_ENGINES(218): 终结符
KEYWORD_ENGINE_ATTRIBUTE(219): 终结符
KEYWORD_ENUM(220): 终结符
KEYWORD_ERROR(221): 终结符
KEYWORD_ERRORS(222): 终结符
KEYWORD_ESCAPE(223): 终结符
KEYWORD_ESCAPED(224): 终结符
KEYWORD_EVENT(225): 终结符
KEYWORD_EVENTS(226): 终结符
KEYWORD_EVERY(227): 终结符
KEYWORD_EXCEPT(228): 终结符
KEYWORD_EXCHANGE(229): 终结符
KEYWORD_EXCLUDE(230): 终结符
KEYWORD_EXECUTE(231): 终结符
KEYWORD_EXISTS(232): 终结符
KEYWORD_EXIT(233): 终结符
KEYWORD_EXPANSION(234): 终结符
KEYWORD_EXPIRE(235): 终结符
KEYWORD_EXPLAIN(236): 终结符
KEYWORD_EXPORT(237): 终结符
KEYWORD_EXTENDED(238): 终结符
KEYWORD_EXTENT_SIZE(239): 终结符
KEYWORD_FACTOR(240): 终结符
KEYWORD_FAILED_LOGIN_ATTEMPTS(241): 终结符
KEYWORD_FALSE(242): 终结符
KEYWORD_FAST(243): 终结符
KEYWORD_FAULTS(244): 终结符
KEYWORD_FETCH(245): 终结符
KEYWORD_FIELDS(246): 终结符
KEYWORD_FILE(247): 终结符
KEYWORD_FILE_BLOCK_SIZE(248): 终结符
KEYWORD_FILTER(249): 终结符
KEYWORD_FINISH(250): 终结符
KEYWORD_FIRST(251): 终结符
KEYWORD_FIRST_VALUE(252): 终结符
KEYWORD_FIXED(253): 终结符
KEYWORD_FLOAT(254): 终结符
KEYWORD_FLOAT4(255): 终结符
KEYWORD_FLOAT8(256): 终结符
KEYWORD_FLUSH(257): 终结符
KEYWORD_FOLLOWING(258): 终结符
KEYWORD_FOLLOWS(259): 终结符
KEYWORD_FOR(260): 终结符
KEYWORD_FORCE(261): 终结符
KEYWORD_FOREIGN(262): 终结符
KEYWORD_FORMAT(263): 终结符
KEYWORD_FOUND(264): 终结符
KEYWORD_FROM(265): 终结符
KEYWORD_FULL(266): 终结符
KEYWORD_FULLTEXT(267): 终结符
KEYWORD_FUNCTION(268): 终结符
KEYWORD_GENERAL(269): 终结符
KEYWORD_GENERATE(270): 终结符
KEYWORD_GENERATED(271): 终结符
KEYWORD_GEOMCOLLECTION(272): 终结符
KEYWORD_GEOMETRY(273): 终结符
KEYWORD_GEOMETRYCOLLECTION(274): 终结符
KEYWORD_GET(275): 终结符
KEYWORD_GET_MASTER_PUBLIC_KEY(276): 终结符
KEYWORD_GET_FORMAT(277): 终结符
KEYWORD_GET_SOURCE_PUBLIC_KEY(278): 终结符
KEYWORD_GLOBAL(279): 终结符
KEYWORD_GRANT(280): 终结符
KEYWORD_GRANTS(281): 终结符
KEYWORD_GROUP(282): 终结符
KEYWORD_GROUPING(283): 终结符
KEYWORD_GROUPS(284): 终结符
KEYWORD_GROUP_REPLICATION(285): 终结符
KEYWORD_GTIDS(286): 终结符
KEYWORD_GTID_ONLY(287): 终结符
KEYWORD_HANDLER(288): 终结符
KEYWORD_HASH(289): 终结符
KEYWORD_HAVING(290): 终结符
KEYWORD_HELP(291): 终结符
KEYWORD_HIGH_PRIORITY(292): 终结符
KEYWORD_HISTOGRAM(293): 终结符
KEYWORD_HISTORY(294): 终结符
KEYWORD_HOST(295): 终结符
KEYWORD_HOSTS(296): 终结符
KEYWORD_HOUR(297): 终结符
KEYWORD_HOUR_MICROSECOND(298): 终结符
KEYWORD_HOUR_MINUTE(299): 终结符
KEYWORD_HOUR_SECOND(300): 终结符
KEYWORD_IDENTIFIED(301): 终结符
KEYWORD_IF(302): 终结符
KEYWORD_IGNORE(303): 终结符
KEYWORD_IGNORE_SERVER_IDS(304): 终结符
KEYWORD_IMPORT(305): 终结符
KEYWORD_IN(306): 终结符
KEYWORD_INACTIVE(307): 终结符
KEYWORD_INDEX(308): 终结符
KEYWORD_INDEXES(309): 终结符
KEYWORD_INFILE(310): 终结符
KEYWORD_INITIAL(311): 终结符
KEYWORD_INITIAL_SIZE(312): 终结符
KEYWORD_INITIATE(313): 终结符
KEYWORD_INNER(314): 终结符
KEYWORD_INOUT(315): 终结符
KEYWORD_INSENSITIVE(316): 终结符
KEYWORD_INSERT(317): 终结符
KEYWORD_INSERT_METHOD(318): 终结符
KEYWORD_INSTALL(319): 终结符
KEYWORD_INSTANCE(320): 终结符
KEYWORD_INT(321): 终结符
KEYWORD_INT1(322): 终结符
KEYWORD_INT2(323): 终结符
KEYWORD_INT3(324): 终结符
KEYWORD_INT4(325): 终结符
KEYWORD_INT8(326): 终结符
KEYWORD_INTEGER(327): 终结符
KEYWORD_INTERSECT(328): 终结符
KEYWORD_INTERVAL(329): 终结符
KEYWORD_INTO(330): 终结符
KEYWORD_INVISIBLE(331): 终结符
KEYWORD_INVOKER(332): 终结符
KEYWORD_IO(333): 终结符
KEYWORD_IO_AFTER_GTIDS(334): 终结符
KEYWORD_IO_BEFORE_GTIDS(335): 终结符
KEYWORD_IO_THREAD(336): 终结符
KEYWORD_IPC(337): 终结符
KEYWORD_IS(338): 终结符
KEYWORD_ISOLATION(339): 终结符
KEYWORD_ISSUER(340): 终结符
KEYWORD_ITERATE(341): 终结符
KEYWORD_JOIN(342): 终结符
KEYWORD_JSON(343): 终结符
KEYWORD_JSON_TABLE(344): 终结符
KEYWORD_JSON_VALUE(345): 终结符
KEYWORD_KEY(346): 终结符
KEYWORD_KEYRING(347): 终结符
KEYWORD_KEYS(348): 终结符
KEYWORD_KEY_BLOCK_SIZE(349): 终结符
KEYWORD_KILL(350): 终结符
KEYWORD_LAG(351): 终结符
KEYWORD_LANGUAGE(352): 终结符
KEYWORD_LAST(353): 终结符
KEYWORD_LAST_VALUE(354): 终结符
KEYWORD_LATERAL(355): 终结符
KEYWORD_LEAD(356): 终结符
KEYWORD_LEADING(357): 终结符
KEYWORD_LEAVE(358): 终结符
KEYWORD_LEAVES(359): 终结符
KEYWORD_LEFT(360): 终结符
KEYWORD_LESS(361): 终结符
KEYWORD_LEVEL(362): 终结符
KEYWORD_LIKE(363): 终结符
KEYWORD_LIMIT(364): 终结符
KEYWORD_LINEAR(365): 终结符
KEYWORD_LINES(366): 终结符
KEYWORD_LINESTRING(367): 终结符
KEYWORD_LIST(368): 终结符
KEYWORD_LOAD(369): 终结符
KEYWORD_LOCAL(370): 终结符
KEYWORD_LOCALTIME(371): 终结符
KEYWORD_LOCALTIMESTAMP(372): 终结符
KEYWORD_LOCK(373): 终结符
KEYWORD_LOCKED(374): 终结符
KEYWORD_LOCKS(375): 终结符
KEYWORD_LOG(376): 终结符
KEYWORD_LOGFILE(377): 终结符
KEYWORD_LOGS(378): 终结符
KEYWORD_LONG(379): 终结符
KEYWORD_LONGBLOB(380): 终结符
KEYWORD_LONGTEXT(381): 终结符
KEYWORD_LOOP(382): 终结符
KEYWORD_LOW_PRIORITY(383): 终结符
KEYWORD_MANUAL(384): 终结符
KEYWORD_MASTER(385): 终结符
KEYWORD_MASTER_AUTO_POSITION(386): 终结符
KEYWORD_MASTER_BIND(387): 终结符
KEYWORD_MASTER_COMPRESSION_ALGORITHM(388): 终结符
KEYWORD_MASTER_CONNECT_RETRY(389): 终结符
KEYWORD_MASTER_DELAY(390): 终结符
KEYWORD_MASTER_HEARTBEAT_PERIOD(391): 终结符
KEYWORD_MASTER_HOST(392): 终结符
KEYWORD_MASTER_LOG_FILE(393): 终结符
KEYWORD_MASTER_LOG_POS(394): 终结符
KEYWORD_MASTER_PASSWORD(395): 终结符
KEYWORD_MASTER_PORT(396): 终结符
KEYWORD_MASTER_PUBLIC_KEY_PATH(397): 终结符
KEYWORD_MASTER_RETRY_COUNT(398): 终结符
KEYWORD_MASTER_SSL(399): 终结符
KEYWORD_MASTER_SSL_CA(400): 终结符
KEYWORD_MASTER_SSL_CAPATH(401): 终结符
KEYWORD_MASTER_SSL_CERT(402): 终结符
KEYWORD_MASTER_SSL_CIPHER(403): 终结符
KEYWORD_MASTER_SSL_CRL(404): 终结符
KEYWORD_MASTER_SSL_CRLPATH(405): 终结符
KEYWORD_MASTER_SSL_KEY(406): 终结符
KEYWORD_MASTER_SSL_VERIFY_SERVER_CERT(407): 终结符
KEYWORD_MASTER_TLS_CIPHERSUITES(408): 终结符
KEYWORD_MASTER_TLS_VERSION(409): 终结符
KEYWORD_MASTER_USER(410): 终结符
KEYWORD_MASTER_ZSTD_COMPRESSION_LEVEL(411): 终结符
KEYWORD_MATCH(412): 终结符
KEYWORD_MAX_VALUE(413): 终结符
KEYWORD_MAX_CONNECTIONS_PER_HOUR(414): 终结符
KEYWORD_MAX_QUERIES_PER_HOUR(415): 终结符
KEYWORD_MAX_ROWS(416): 终结符
KEYWORD_MAX_SIZE(417): 终结符
KEYWORD_MAX_UPDATES_PER_HOUR(418): 终结符
KEYWORD_MAX_USER_CONNECTIONS(419): 终结符
KEYWORD_MEDIUM(420): 终结符
KEYWORD_MEDIUMBLOB(421): 终结符
KEYWORD_MEDIUMINT(422): 终结符
KEYWORD_MEDIUMTEXT(423): 终结符
KEYWORD_MEMBER(424): 终结符
KEYWORD_MEMORY(425): 终结符
KEYWORD_MERGE(426): 终结符
KEYWORD_MESSAGE_TEXT(427): 终结符
KEYWORD_MICROSECOND(428): 终结符
KEYWORD_MIDDLEINT(429): 终结符
KEYWORD_MIGRATE(430): 终结符
KEYWORD_MINUTE(431): 终结符
KEYWORD_MINUTE_MICROSECOND(432): 终结符
KEYWORD_MINUTE_SECOND(433): 终结符
KEYWORD_MIN_ROWS(434): 终结符
KEYWORD_MOD(435): 终结符
KEYWORD_MODE(436): 终结符
KEYWORD_MODIFIES(437): 终结符
KEYWORD_MODIFY(438): 终结符
KEYWORD_MONTH(439): 终结符
KEYWORD_MULTILINESTRING(440): 终结符
KEYWORD_MULTIPOINT(441): 终结符
KEYWORD_MULTIPOLYGON(442): 终结符
KEYWORD_MUTEX(443): 终结符
KEYWORD_MYSQL_ERRNO(444): 终结符
KEYWORD_NAME(445): 终结符
KEYWORD_NAMES(446): 终结符
KEYWORD_NATIONAL(447): 终结符
KEYWORD_NATURAL(448): 终结符
KEYWORD_NCHAR(449): 终结符
KEYWORD_NDB(450): 终结符
KEYWORD_NDBCLUSTER(451): 终结符
KEYWORD_NESTED(452): 终结符
KEYWORD_NETWORK_NAMESPACE(453): 终结符
KEYWORD_NEVER(454): 终结符
KEYWORD_NEW(455): 终结符
KEYWORD_NEXT(456): 终结符
KEYWORD_NO(457): 终结符
KEYWORD_NODEGROUP(458): 终结符
KEYWORD_NONE(459): 终结符
KEYWORD_NOT(460): 终结符
KEYWORD_NOT2(461): 终结符
KEYWORD_NOWAIT(462): 终结符
KEYWORD_NO_WAIT(463): 终结符
KEYWORD_NO_WRITE_TO_BINLOG(464): 终结符
KEYWORD_NTH_VALUE(465): 终结符
KEYWORD_NTILE(466): 终结符
KEYWORD_NULL(467): 终结符
KEYWORD_NULLS(468): 终结符
KEYWORD_NUMBER(469): 终结符
KEYWORD_NUMERIC(470): 终结符
KEYWORD_NVARCHAR(471): 终结符
KEYWORD_OF(472): 终结符
KEYWORD_OFF(473): 终结符
KEYWORD_OFFSET(474): 终结符
KEYWORD_OJ(475): 终结符
KEYWORD_OLD(476): 终结符
KEYWORD_ON(477): 终结符
KEYWORD_ONE(478): 终结符
KEYWORD_ONLY(479): 终结符
KEYWORD_OPEN(480): 终结符
KEYWORD_OPTIMIZE(481): 终结符
KEYWORD_OPTIMIZER_COSTS(482): 终结符
KEYWORD_OPTION(483): 终结符
KEYWORD_OPTIONAL(484): 终结符
KEYWORD_OPTIONALLY(485): 终结符
KEYWORD_OPTIONS(486): 终结符
KEYWORD_OR(487): 终结符
KEYWORD_OR2(488): 终结符
KEYWORD_ORDER(489): 终结符
KEYWORD_ORDINALITY(490): 终结符
KEYWORD_ORGANIZATION(491): 终结符
KEYWORD_OTHERS(492): 终结符
KEYWORD_OUT(493): 终结符
KEYWORD_OUTER(494): 终结符
KEYWORD_OUTFILE(495): 终结符
KEYWORD_OVER(496): 终结符
KEYWORD_OWNER(497): 终结符
KEYWORD_PACK_KEYS(498): 终结符
KEYWORD_PAGE(499): 终结符
KEYWORD_PARALLEL(500): 终结符
KEYWORD_PARSER(501): 终结符
KEYWORD_PARSE_TREE(502): 终结符
KEYWORD_PARTIAL(503): 终结符
KEYWORD_PARTITION(504): 终结符
KEYWORD_PARTITIONING(505): 终结符
KEYWORD_PARTITIONS(506): 终结符
KEYWORD_PASSWORD(507): 终结符
KEYWORD_PASSWORD_LOCK_TIME(508): 终结符
KEYWORD_PATH(509): 终结符
KEYWORD_PERCENT_RANK(510): 终结符
KEYWORD_PERSIST(511): 终结符
KEYWORD_PERSIST_ONLY(512): 终结符
KEYWORD_PHASE(513): 终结符
KEYWORD_PLUGIN(514): 终结符
KEYWORD_PLUGINS(515): 终结符
KEYWORD_PLUGIN_DIR(516): 终结符
KEYWORD_POINT(517): 终结符
KEYWORD_POLYGON(518): 终结符
KEYWORD_PORT(519): 终结符
KEYWORD_PRECEDES(520): 终结符
KEYWORD_PRECEDING(521): 终结符
KEYWORD_PRECISION(522): 终结符
KEYWORD_PREPARE(523): 终结符
KEYWORD_PRESERVE(524): 终结符
KEYWORD_PREV(525): 终结符
KEYWORD_PRIMARY(526): 终结符
KEYWORD_PRIVILEGES(527): 终结符
KEYWORD_PRIVILEGE_CHECKS_USER(528): 终结符
KEYWORD_PROCEDURE(529): 终结符
KEYWORD_PROCESS(530): 终结符
KEYWORD_PROCESSLIST(531): 终结符
KEYWORD_PROFILE(532): 终结符
KEYWORD_PROFILES(533): 终结符
KEYWORD_PROXY(534): 终结符
KEYWORD_PURGE(535): 终结符
KEYWORD_QUALIFY(536): 终结符
KEYWORD_QUARTER(537): 终结符
KEYWORD_QUERY(538): 终结符
KEYWORD_QUICK(539): 终结符
KEYWORD_RANDOM(540): 终结符
KEYWORD_RANGE(541): 终结符
KEYWORD_RANK(542): 终结符
KEYWORD_READ(543): 终结符
KEYWORD_READS(544): 终结符
KEYWORD_READ_ONLY(545): 终结符
KEYWORD_READ_WRITE(546): 终结符
KEYWORD_REAL(547): 终结符
KEYWORD_REBUILD(548): 终结符
KEYWORD_RECOVER(549): 终结符
KEYWORD_RECURSIVE(550): 终结符
KEYWORD_REDO_BUFFER_SIZE(551): 终结符
KEYWORD_REDUNDANT(552): 终结符
KEYWORD_REFERENCE(553): 终结符
KEYWORD_REFERENCES(554): 终结符
KEYWORD_REGEXP(555): 终结符
KEYWORD_REGISTRATION(556): 终结符
KEYWORD_RELAY(557): 终结符
KEYWORD_RELAYLOG(558): 终结符
KEYWORD_RELAY_LOG_FILE(559): 终结符
KEYWORD_RELAY_LOG_POS(560): 终结符
KEYWORD_RELAY_THREAD(561): 终结符
KEYWORD_RELEASE(562): 终结符
KEYWORD_RELOAD(563): 终结符
KEYWORD_REMOVE(564): 终结符
KEYWORD_RENAME(565): 终结符
KEYWORD_REORGANIZE(566): 终结符
KEYWORD_REPAIR(567): 终结符
KEYWORD_REPEAT(568): 终结符
KEYWORD_REPEATABLE(569): 终结符
KEYWORD_REPLACE(570): 终结符
KEYWORD_REPLICA(571): 终结符
KEYWORD_REPLICAS(572): 终结符
KEYWORD_REPLICATE_DO_DB(573): 终结符
KEYWORD_REPLICATE_DO_TABLE(574): 终结符
KEYWORD_REPLICATE_IGNORE_DB(575): 终结符
KEYWORD_REPLICATE_IGNORE_TABLE(576): 终结符
KEYWORD_REPLICATE_REWRITE_DB(577): 终结符
KEYWORD_REPLICATE_WILD_DO_TABLE(578): 终结符
KEYWORD_REPLICATE_WILD_IGNORE_TABLE(579): 终结符
KEYWORD_REPLICATION(580): 终结符
KEYWORD_REQUIRE(581): 终结符
KEYWORD_REQUIRE_ROW_FORMAT(582): 终结符
KEYWORD_RESET(583): 终结符
KEYWORD_RESIGNAL(584): 终结符
KEYWORD_RESOURCE(585): 终结符
KEYWORD_RESPECT(586): 终结符
KEYWORD_RESTART(587): 终结符
KEYWORD_RESTORE(588): 终结符
KEYWORD_RESTRICT(589): 终结符
KEYWORD_RESUME(590): 终结符
KEYWORD_RETAIN(591): 终结符
KEYWORD_RETURN(592): 终结符
KEYWORD_RETURNED_SQLSTATE(593): 终结符
KEYWORD_RETURNING(594): 终结符
KEYWORD_RETURNS(595): 终结符
KEYWORD_REUSE(596): 终结符
KEYWORD_REVERSE(597): 终结符
KEYWORD_REVOKE(598): 终结符
KEYWORD_RIGHT(599): 终结符
KEYWORD_RLIKE(600): 终结符
KEYWORD_ROLE(601): 终结符
KEYWORD_ROLLBACK(602): 终结符
KEYWORD_ROLLUP(603): 终结符
KEYWORD_ROTATE(604): 终结符
KEYWORD_ROUTINE(605): 终结符
KEYWORD_ROW(606): 终结符
KEYWORD_ROWS(607): 终结符
KEYWORD_ROW_COUNT(608): 终结符
KEYWORD_ROW_FORMAT(609): 终结符
KEYWORD_ROW_NUMBER(610): 终结符
KEYWORD_RTREE(611): 终结符
KEYWORD_S3(612): 终结符
KEYWORD_SAVEPOINT(613): 终结符
KEYWORD_SCHEDULE(614): 终结符
KEYWORD_SCHEMA(615): 终结符
KEYWORD_SCHEMAS(616): 终结符
KEYWORD_SCHEMA_NAME(617): 终结符
KEYWORD_SECOND(618): 终结符
KEYWORD_SECONDARY(619): 终结符
KEYWORD_SECONDARY_ENGINE(620): 终结符
KEYWORD_SECONDARY_ENGINE_ATTRIBUTE(621): 终结符
KEYWORD_SECONDARY_LOAD(622): 终结符
KEYWORD_SECONDARY_UNLOAD(623): 终结符
KEYWORD_SECOND_MICROSECOND(624): 终结符
KEYWORD_SECURITY(625): 终结符
KEYWORD_SELECT(626): 终结符
KEYWORD_SENSITIVE(627): 终结符
KEYWORD_SEPARATOR(628): 终结符
KEYWORD_SERIAL(629): 终结符
KEYWORD_SERIALIZABLE(630): 终结符
KEYWORD_SERVER(631): 终结符
KEYWORD_SESSION(632): 终结符
KEYWORD_SET(633): 终结符
KEYWORD_SHARE(634): 终结符
KEYWORD_SHOW(635): 终结符
KEYWORD_SHUTDOWN(636): 终结符
KEYWORD_SIGNAL(637): 终结符
KEYWORD_SIGNED(638): 终结符
KEYWORD_SIMPLE(639): 终结符
KEYWORD_SKIP(640): 终结符
KEYWORD_SLAVE(641): 终结符
KEYWORD_SLOW(642): 终结符
KEYWORD_SMALLINT(643): 终结符
KEYWORD_SNAPSHOT(644): 终结符
KEYWORD_SOCKET(645): 终结符
KEYWORD_SOME(646): 终结符
KEYWORD_SONAME(647): 终结符
KEYWORD_SOUNDS(648): 终结符
KEYWORD_SOURCE(649): 终结符
KEYWORD_SOURCE_AUTO_POSITION(650): 终结符
KEYWORD_SOURCE_BIND(651): 终结符
KEYWORD_SOURCE_COMPRESSION_ALGORITHM(652): 终结符
KEYWORD_SOURCE_CONNECT_RETRY(653): 终结符
KEYWORD_SOURCE_DELAY(654): 终结符
KEYWORD_SOURCE_HEARTBEAT_PERIOD(655): 终结符
KEYWORD_SOURCE_HOST(656): 终结符
KEYWORD_SOURCE_LOG_FILE(657): 终结符
KEYWORD_SOURCE_LOG_POS(658): 终结符
KEYWORD_SOURCE_PASSWORD(659): 终结符
KEYWORD_SOURCE_PORT(660): 终结符
KEYWORD_SOURCE_PUBLIC_KEY_PATH(661): 终结符
KEYWORD_SOURCE_RETRY_COUNT(662): 终结符
KEYWORD_SOURCE_SSL(663): 终结符
KEYWORD_SOURCE_SSL_CA(664): 终结符
KEYWORD_SOURCE_SSL_CAPATH(665): 终结符
KEYWORD_SOURCE_SSL_CERT(666): 终结符
KEYWORD_SOURCE_SSL_CIPHER(667): 终结符
KEYWORD_SOURCE_SSL_CRL(668): 终结符
KEYWORD_SOURCE_SSL_CRLPATH(669): 终结符
KEYWORD_SOURCE_SSL_KEY(670): 终结符
KEYWORD_SOURCE_SSL_VERIFY_SERVER_CERT(671): 终结符
KEYWORD_SOURCE_TLS_CIPHERSUITES(672): 终结符
KEYWORD_SOURCE_TLS_VERSION(673): 终结符
KEYWORD_SOURCE_USER(674): 终结符
KEYWORD_SOURCE_ZSTD_COMPRESSION_LEVEL(675): 终结符
KEYWORD_SPATIAL(676): 终结符
KEYWORD_SPECIFIC(677): 终结符
KEYWORD_SQL(678): 终结符
KEYWORD_SQLEXCEPTION(679): 终结符
KEYWORD_SQLSTATE(680): 终结符
KEYWORD_SQLWARNING(681): 终结符
KEYWORD_SQL_AFTER_GTIDS(682): 终结符
KEYWORD_SQL_AFTER_MTS_GAPS(683): 终结符
KEYWORD_SQL_BEFORE_GTIDS(684): 终结符
KEYWORD_SQL_BIG_RESULT(685): 终结符
KEYWORD_SQL_BUFFER_RESULT(686): 终结符
KEYWORD_SQL_CALC_FOUND_ROWS(687): 终结符
KEYWORD_SQL_NO_CACHE(688): 终结符
KEYWORD_SQL_SMALL_RESULT(689): 终结符
KEYWORD_SQL_THREAD(690): 终结符
KEYWORD_SQL_TSI_DAY(691): 终结符
KEYWORD_SQL_TSI_HOUR(692): 终结符
KEYWORD_SQL_TSI_MINUTE(693): 终结符
KEYWORD_SQL_TSI_MONTH(694): 终结符
KEYWORD_SQL_TSI_QUARTER(695): 终结符
KEYWORD_SQL_TSI_SECOND(696): 终结符
KEYWORD_SQL_TSI_WEEK(697): 终结符
KEYWORD_SQL_TSI_YEAR(698): 终结符
KEYWORD_SRID(699): 终结符
KEYWORD_SSL(700): 终结符
KEYWORD_ST_COLLECT(701): 终结符
KEYWORD_STACKED(702): 终结符
KEYWORD_START(703): 终结符
KEYWORD_STARTING(704): 终结符
KEYWORD_STARTS(705): 终结符
KEYWORD_STATS_AUTO_RECALC(706): 终结符
KEYWORD_STATS_PERSISTENT(707): 终结符
KEYWORD_STATS_SAMPLE_PAGES(708): 终结符
KEYWORD_STATUS(709): 终结符
KEYWORD_STOP(710): 终结符
KEYWORD_STORAGE(711): 终结符
KEYWORD_STORED(712): 终结符
KEYWORD_STRAIGHT_JOIN(713): 终结符
KEYWORD_STREAM(714): 终结符
KEYWORD_STRING(715): 终结符
KEYWORD_SUBCLASS_ORIGIN(716): 终结符
KEYWORD_SUBJECT(717): 终结符
KEYWORD_SUBPARTITION(718): 终结符
KEYWORD_SUBPARTITIONS(719): 终结符
KEYWORD_SUBDATE(720): 终结符
KEYWORD_SUPER(721): 终结符
KEYWORD_SUSPEND(722): 终结符
KEYWORD_SWAPS(723): 终结符
KEYWORD_SWITCHES(724): 终结符
KEYWORD_SYSTEM(725): 终结符
KEYWORD_TABLE(726): 终结符
KEYWORD_TABLES(727): 终结符
KEYWORD_TABLESAMPLE(728): 终结符
KEYWORD_TABLESPACE(729): 终结符
KEYWORD_TABLE_CHECKSUM(730): 终结符
KEYWORD_TABLE_NAME(731): 终结符
KEYWORD_TEMPORARY(732): 终结符
KEYWORD_TEMPTABLE(733): 终结符
KEYWORD_TERMINATED(734): 终结符
KEYWORD_TEXT(735): 终结符
KEYWORD_THAN(736): 终结符
KEYWORD_THEN(737): 终结符
KEYWORD_THREAD_PRIORITY(738): 终结符
KEYWORD_TIES(739): 终结符
KEYWORD_TIME(740): 终结符
KEYWORD_TIMESTAMP(741): 终结符
KEYWORD_TIMESTAMP_ADD(742): 终结符
KEYWORD_TIMESTAMP_DIFF(743): 终结符
KEYWORD_TINYBLOB(744): 终结符
KEYWORD_TINYINT(745): 终结符
KEYWORD_TINYTEXT(746): 终结符
KEYWORD_TLS(747): 终结符
KEYWORD_TO(748): 终结符
KEYWORD_TRAILING(749): 终结符
KEYWORD_TRANSACTION(750): 终结符
KEYWORD_TRIGGER(751): 终结符
KEYWORD_TRIGGERS(752): 终结符
KEYWORD_TRUE(753): 终结符
KEYWORD_TRUNCATE(754): 终结符
KEYWORD_TYPE(755): 终结符
KEYWORD_TYPES(756): 终结符
KEYWORD_UNBOUNDED(757): 终结符
KEYWORD_UNCOMMITTED(758): 终结符
KEYWORD_UNDEFINED(759): 终结符
KEYWORD_UNDO(760): 终结符
KEYWORD_UNDOFILE(761): 终结符
KEYWORD_UNDO_BUFFER_SIZE(762): 终结符
KEYWORD_UNICODE(763): 终结符
KEYWORD_UNINSTALL(764): 终结符
KEYWORD_UNION(765): 终结符
KEYWORD_UNIQUE(766): 终结符
KEYWORD_UNKNOWN(767): 终结符
KEYWORD_UNLOCK(768): 终结符
KEYWORD_UNREGISTER(769): 终结符
KEYWORD_UNSIGNED(770): 终结符
KEYWORD_UNTIL(771): 终结符
KEYWORD_UPDATE(772): 终结符
KEYWORD_UPGRADE(773): 终结符
KEYWORD_URL(774): 终结符
KEYWORD_USAGE(775): 终结符
KEYWORD_USE(776): 终结符
KEYWORD_USER(777): 终结符
KEYWORD_USER_RESOURCES(778): 终结符
KEYWORD_USE_FRM(779): 终结符
KEYWORD_USING(780): 终结符
KEYWORD_UTC_DATE(781): 终结符
KEYWORD_UTC_TIME(782): 终结符
KEYWORD_UTC_TIMESTAMP(783): 终结符
KEYWORD_VALIDATION(784): 终结符
KEYWORD_VALUE(785): 终结符
KEYWORD_VALUES(786): 终结符
KEYWORD_VARBINARY(787): 终结符
KEYWORD_VARCHAR(788): 终结符
KEYWORD_VARCHARACTER(789): 终结符
KEYWORD_VARIABLES(790): 终结符
KEYWORD_VARYING(791): 终结符
KEYWORD_VCPU(792): 终结符
KEYWORD_VIEW(793): 终结符
KEYWORD_VIRTUAL(794): 终结符
KEYWORD_VISIBLE(795): 终结符
KEYWORD_WAIT(796): 终结符
KEYWORD_WARNINGS(797): 终结符
KEYWORD_WEEK(798): 终结符
KEYWORD_WEIGHT_STRING(799): 终结符
KEYWORD_WHEN(800): 终结符
KEYWORD_WHERE(801): 终结符
KEYWORD_WHILE(802): 终结符
KEYWORD_WINDOW(803): 终结符
KEYWORD_WITH(804): 终结符
KEYWORD_WITHOUT(805): 终结符
KEYWORD_WORK(806): 终结符
KEYWORD_WRAPPER(807): 终结符
KEYWORD_WRITE(808): 终结符
KEYWORD_X509(809): 终结符
KEYWORD_XA(810): 终结符
KEYWORD_XID(811): 终结符
KEYWORD_XML(812): 终结符
KEYWORD_XOR(813): 终结符
KEYWORD_YEAR(814): 终结符
KEYWORD_YEAR_MONTH(815): 终结符
KEYWORD_ZEROFILL(816): 终结符
KEYWORD_ZONE(817): 终结符
KEYWORD_WITH_ROLLUP(818): 终结符
WORD_CURDATE(819): 终结符
WORD_CURTIME(820): 终结符
WORD_DATE_ADD_INTERVAL(821): 终结符
WORD_DATE_SUB_INTERVAL(822): 终结符
WORD_EXTRACT(823): 终结符
WORD_NOW(824): 终结符
WORD_SYSDATE(825): 终结符
WORD_BIT_AND(826): 终结符
WORD_BIT_OR(827): 终结符
WORD_BIT_XOR(828): 终结符
WORD_COUNT(829): 终结符
WORD_GROUP_CONCAT(830): 终结符
WORD_JSON_ARRAYAGG(831): 终结符
WORD_JSON_OBJECTAGG(832): 终结符
WORD_MAX(833): 终结符
WORD_MIN(834): 终结符
WORD_STD(835): 终结符
WORD_STDDEV_SAMP(836): 终结符
WORD_SUM(837): 终结符
WORD_VAR_SAMP(838): 终结符
WORD_VARIANCE(839): 终结符
WORD_SUBSTRING(840): 终结符
WORD_TRIM(841): 终结符
WORD_CAST(842): 终结符
entry(843): [843->·878]
opt_of(844): [844->·472, 844->·]
opt_braces(845): [845->·23 24, 845->·]
keyword_charset(846): [846->·115 633, 846->·117]
keyword_nchar(847): [847->·449, 847->·447 115]
keyword_varchar(848): [848->·788, 848->·115 791]
keyword_nvarchar(849): [849->·471, 849->·447 788, 849->·449 788, 849->·447 115 791, 849->·449 791]
text_literal_sys(850): [850->·49]
int_literal(851): [851->·47]
num_literal(852): [852->·851, 852->·46, 852->·45]
temporal_literal(853): [853->·169 49, 853->·740 49, 853->·170 49]
literal(854): [854->·850, 854->·852, 854->·853, 854->·242, 854->·753, 854->·44, 854->·43, 854->·50 44, 854->·50 43]
null_literal(855): [855->·467]
literal_or_null(856): [856->·854, 856->·855]
text_literal(857): [857->·49, 857->·48, 857->·50 49, 857->·857 49]
text_string(858): [858->·49, 858->·44, 858->·43]
text_string_list(859): [859->·859 25 858, 859->·858]
signed_literal(860): [860->·854, 860->·9 852, 860->·13 852]
signed_literal_or_null(861): [861->·860, 861->·855]
param_marker(862): [862->·54]
ident_or_text(863): [863->·901, 863->·850, 863->·53]
charset_name(864): [864->·863, 864->·91]
charset_ascii(865): [865->·75, 865->·91 75, 865->·75 91]
charset_unicode(866): [866->·763, 866->·91 763, 866->·763 91]
opt_charset(867): [867->·, 867->·865, 867->·866, 867->·103, 867->·91, 867->·846 864, 867->·846 864 91, 867->·91 846 864]
field_type_param_1(868): [868->·23 852 24]
opt_field_type_param_1(869): [869->·868, 869->·]
field_type_param_2(870): [870->·23 852 25 852 24]
opt_field_type_param_2(871): [871->·870, 871->·]
opt_field_type_param_0_1(872): [872->·23 852 24, 872->·23 24, 872->·]
opt_field_type_param_1_2(873): [873->·23 852 25 852 24, 873->·23 852 24, 873->·]
cast_type(874): [874->·91 869, 874->·115 869 867, 874->·449 869, 874->·638, 874->·638 321, 874->·770, 874->·770 321, 874->·169, 874->·814, 874->·740 868, 874->·170 868, 874->·178 873, 874->·343, 874->·547, 874->·201, 874->·201 522, 874->·254 869, 874->·517, 874->·367, 874->·518, 874->·441, 874->·440, 874->·442, 874->·274]
field_option(875): [875->·638, 875->·770, 875->·816]
field_option_list(876): [876->·876 875, 876->·875]
opt_field_option_list(877): [877->·876, 877->·]
field_type(878): [878->·321 869 877, 878->·745 869 877, 878->·643 869 877, 878->·422 869 877, 878->·90 869 877, 878->·547 871 877, 878->·201 871 877, 878->·201 522 871 877, 878->·254 873 877, 878->·178 873 877, 878->·470 873 877, 878->·253 873 877, 878->·93, 878->·93 868, 878->·96, 878->·97, 878->·115 868 867, 878->·115 867, 878->·847 868 91, 878->·847 868, 878->·847 91, 878->·847, 878->·91 868, 878->·91, 878->·848 868 867, 878->·849 868 91, 878->·849 868, 878->·787 868, 878->·814 869 877, 878->·169, 878->·740 868, 878->·741 868, 878->·170 868, 878->·744, 878->·94 869, 878->·421, 878->·380, 878->·273, 878->·274, 878->·517, 878->·441, 878->·367, 878->·440, 878->·518, 878->·442, 878->·379 787, 878->·379 848 867, 878->·746 867, 878->·735 869 867, 878->·423 867, 878->·381 867, 878->·220 23 859 24 867, 878->·633 23 859 24 867, 878->·379 867, 878->·629, 878->·343]
interval_time_unit(879): [879->·880, 879->·815, 879->·172, 879->·174, 879->·175, 879->·173, 879->·299, 879->·300, 879->·298, 879->·433, 879->·432, 879->·624]
time_unit(880): [880->·814, 880->·537, 880->·439, 880->·798, 880->·171, 880->·297, 880->·431, 880->·618, 880->·428]
window_border_type(881): [881->·607, 881->·541, 881->·284]
opt_window_exclude(882): [882->·230 158 606, 882->·230 282, 882->·230 739, 882->·230 457 492, 882->·]
window_frame_start(883): [883->·757 521, 883->·852 521, 883->·862 521, 883->·329 915 879 521, 883->·158 606]
window_frame_bound(884): [884->·883, 884->·757 258, 884->·852 258, 884->·862 258, 884->·329 915 879 258]
window_frame_extent(885): [885->·883, 885->·89 884 70 884]
opt_window_frame_clause(886): [886->·881 885 882, 886->·]
opt_partition_clause(887): [887->·504 102 916, 887->·]
window_name_or_spec(888): [888->·901, 888->·23 909 887 921 886 24]
windowing_clause(889): [889->·496 888]
opt_windowing_clause(890): [890->·889, 890->·]
ident_sys(891): [891->·51, 891->·52]
ident_keywords_unambiguous(892): [892->·56, 892->·57, 892->·58, 892->·60, 892->·61, 892->·62, 892->·63, 892->·64, 892->·65, 892->·68, 892->·71, 892->·72, 892->·77, 892->·78, 892->·79, 892->·80, 892->·81, 892->·83, 892->·84, 892->·85, 892->·92, 892->·93, 892->·95, 892->·96, 892->·97, 892->·99, 892->·100, 892->·101, 892->·107, 892->·109, 892->·110, 892->·111, 892->·113, 892->·114, 892->·120, 892->·121, 892->·122, 892->·124, 892->·125, 892->·126, 892->·128, 892->·130, 892->·131, 892->·132, 892->·135, 892->·136, 892->·137, 892->·138, 892->·139, 892->·140, 892->·141, 892->·143, 892->·144, 892->·146, 892->·147, 892->·148, 892->·150, 892->·153, 892->·158, 892->·164, 892->·165, 892->·168, 892->·169, 892->·170, 892->·171, 892->·181, 892->·182, 892->·183, 892->·185, 892->·190, 892->·192, 892->·193, 892->·194, 892->·195, 892->·196, 892->·204, 892->·205, 892->·206, 892->·211, 892->·213, 892->·215, 892->·216, 892->·217, 892->·218, 892->·219, 892->·220, 892->·221, 892->·222, 892->·223, 892->·226, 892->·227, 892->·229, 892->·230, 892->·234, 892->·235, 892->·237, 892->·238, 892->·239, 892->·240, 892->·241, 892->·243, 892->·244, 892->·248, 892->·249, 892->·250, 892->·251, 892->·253, 892->·258, 892->·263, 892->·264, 892->·266, 892->·269, 892->·270, 892->·273, 892->·274, 892->·276, 892->·277, 892->·278, 892->·281, 892->·285, 892->·286, 892->·287, 892->·289, 892->·293, 892->·294, 892->·295, 892->·296, 892->·297, 892->·301, 892->·304, 892->·307, 892->·309, 892->·311, 892->·312, 892->·313, 892->·318, 892->·320, 892->·331, 892->·332, 892->·333, 892->·337, 892->·339, 892->·340, 892->·343, 892->·345, 892->·347, 892->·349, 892->·353, 892->·359, 892->·361, 892->·362, 892->·367, 892->·368, 892->·374, 892->·375, 892->·376, 892->·377, 892->·378, 892->·385, 892->·386, 892->·388, 892->·389, 892->·390, 892->·391, 892->·392, 892->·393, 892->·394, 892->·395, 892->·396, 892->·397, 892->·398, 892->·399, 892->·400, 892->·401, 892->·402, 892->·403, 892->·404, 892->·405, 892->·406, 892->·408, 892->·409, 892->·410, 892->·411, 892->·414, 892->·415, 892->·416, 892->·417, 892->·418, 892->·419, 892->·420, 892->·424, 892->·425, 892->·426, 892->·427, 892->·428, 892->·430, 892->·431, 892->·434, 892->·436, 892->·438, 892->·439, 892->·440, 892->·441, 892->·442, 892->·443, 892->·444, 892->·445, 892->·446, 892->·447, 892->·449, 892->·451, 892->·452, 892->·453, 892->·454, 892->·455, 892->·456, 892->·458, 892->·462, 892->·463, 892->·468, 892->·469, 892->·471, 892->·473, 892->·474, 892->·475, 892->·476, 892->·478, 892->·479, 892->·480, 892->·484, 892->·486, 892->·490, 892->·491, 892->·492, 892->·497, 892->·498, 892->·499, 892->·501, 892->·502, 892->·503, 892->·505, 892->·506, 892->·507, 892->·508, 892->·509, 892->·513, 892->·514, 892->·515, 892->·516, 892->·517, 892->·518, 892->·519, 892->·521, 892->·524, 892->·525, 892->·527, 892->·528, 892->·531, 892->·532, 892->·533, 892->·537, 892->·538, 892->·539, 892->·540, 892->·545, 892->·548, 892->·549, 892->·551, 892->·552, 892->·553, 892->·556, 892->·557, 892->·558, 892->·559, 892->·560, 892->·561, 892->·564, 892->·566, 892->·569, 892->·571, 892->·572, 892->·573, 892->·574, 892->·575, 892->·576, 892->·577, 892->·578, 892->·579, 892->·582, 892->·586, 892->·588, 892->·590, 892->·591, 892->·593, 892->·594, 892->·595, 892->·596, 892->·597, 892->·601, 892->·603, 892->·604, 892->·605, 892->·608, 892->·609, 892->·611, 892->·612, 892->·614, 892->·617, 892->·618, 892->·619, 892->·620, 892->·621, 892->·622, 892->·623, 892->·625, 892->·629, 892->·630, 892->·631, 892->·634, 892->·639, 892->·640, 892->·642, 892->·644, 892->·645, 892->·647, 892->·648, 892->·649, 892->·650, 892->·651, 892->·652, 892->·653, 892->·654, 892->·655, 892->·656, 892->·657, 892->·658, 892->·659, 892->·660, 892->·661, 892->·662, 892->·663, 892->·664, 892->·665, 892->·666, 892->·667, 892->·668, 892->·669, 892->·670, 892->·671, 892->·672, 892->·673, 892->·674, 892->·675, 892->·682, 892->·683, 892->·684, 892->·686, 892->·688, 892->·690, 892->·699, 892->·701, 892->·702, 892->·705, 892->·706, 892->·707, 892->·708, 892->·709, 892->·711, 892->·714, 892->·715, 892->·716, 892->·717, 892->·718, 892->·719, 892->·720, 892->·722, 892->·723, 892->·724, 892->·727, 892->·729, 892->·730, 892->·731, 892->·732, 892->·733, 892->·735, 892->·736, 892->·738, 892->·739, 892->·740, 892->·741, 892->·742, 892->·743, 892->·747, 892->·750, 892->·752, 892->·755, 892->·756, 892->·757, 892->·758, 892->·759, 892->·761, 892->·762, 892->·767, 892->·769, 892->·771, 892->·773, 892->·774, 892->·777, 892->·779, 892->·784, 892->·785, 892->·790, 892->·792, 892->·793, 892->·795, 892->·796, 892->·797, 892->·798, 892->·799, 892->·805, 892->·806, 892->·807, 892->·809, 892->·811, 892->·812, 892->·814, 892->·817]
ident_keywords_ambiguous_1_roles_and_labels(893): [893->·587, 893->·636, 893->·231]
ident_keywords_ambiguous_2_labels(894): [894->·257, 894->·641, 894->·259, 894->·133, 894->·134, 894->·520, 894->·523, 894->·149, 894->·288, 894->·291, 894->·810, 894->·176, 894->·305, 894->·567, 894->·319, 894->·703, 894->·710, 894->·583, 894->·200, 894->·457, 894->·75, 894->·214, 894->·87, 894->·602, 894->·352, 894->·613, 894->·103, 894->·104, 894->·754, 894->·117, 894->·119, 894->·123, 894->·764, 894->·638, 894->·763]
ident_keywords_ambiguous_3_roles(895): [895->·225, 895->·580, 895->·585, 895->·459, 895->·721, 895->·530, 895->·563, 895->·534, 895->·247]
ident_keywords_ambiguous_4_system_variables(896): [896->·512, 896->·370, 896->·279, 896->·632, 896->·511]
ident_general_keyword(897): [897->·892, 897->·893, 897->·894, 897->·895, 897->·896]
ident_label_keyword(898): [898->·892, 898->·895, 898->·896]
ident_role_keyword(899): [899->·892, 899->·894, 899->·896]
ident_variable_keyword(900): [900->·892, 900->·893, 900->·894, 900->·895]
ident(901): [901->·891, 901->·897]
label_ident(902): [902->·891, 902->·898]
role_ident(903): [903->·891, 903->·899]
variable_ident(904): [904->·891, 904->·900]
ident_2(905): [905->·901 28 901]
ident_3(906): [906->·901 28 901 28 901]
simple_ident(907): [907->·901, 907->·905, 907->·906]
simple_ident_list(908): [908->·908 25 907, 908->·907]
opt_ident(909): [909->·901, 909->·]
operator_compare(910): [910->·16, 910->·33, 910->·34, 910->·15, 910->·35, 910->·14, 910->·36]
simple_expr(911): [911->·907, 911->·856, 911->·9 911, 911->·13 911, 911->·11 911]
binary_expr(912): [912->·912 21 912, 912->·912 20 912, 912->·912 38 912, 912->·912 39 912, 912->·912 9 912, 912->·912 13 912, 912->·912 17 912, 912->·912 18 912, 912->·912 12 912, 912->·912 199 912, 912->·912 435 912, 912->·912 10 912, 912->·911]
predicate_expr(913): [913->·912 424 844 23 911 24, 913->·912 89 912 70 913, 913->·912 460 89 912 70 913, 913->·912 648 363 912, 913->·912 363 911, 913->·912 363 911 223 911, 913->·912 460 363 911, 913->·912 460 363 911 223 911, 913->·912 555 912, 913->·912 460 555 912, 913->·912]
bool_expr(914): [914->·914 338 467, 914->·914 338 460 467, 914->·914 910 913, 914->·913]
expr(915): [915->·915 487 915, 915->·915 813 915, 915->·915 70 915, 915->·460 915, 915->·914 338 753, 915->·914 338 460 753, 915->·914 338 242, 915->·914 338 460 242, 915->·914 338 767, 915->·914 338 460 767, 915->·914]
expr_list(916): [916->·916 25 915, 916->·915]
order_direction(917): [917->·74, 917->·188]
opt_order_direction(918): [918->·917, 918->·]
order_expr(919): [919->·915 918]
order_by_list(920): [920->·920 25 919, 920->·919]
opt_order_by_clause(921): [921->·489 102 920, 921->·]
S'(922): [922->·843]
"""

from typing import Any, Callable, List, Optional, Tuple

import metasequoia_parser as ms_parser

from metasequoia_sql_new import ast


def action_shift_1(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(1)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_1, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_8(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(8)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_8, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_11(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(11)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_11, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_5(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(5)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_5, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_12(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(12)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_12, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_13(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(13)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_13, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_14(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(14)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_14, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_51(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(51)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_51, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_35(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(35)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_35, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_37(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(37)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_37, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_41(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(41)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_41, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_2(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(2)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_2, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_4(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(4)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_4, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_39(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(39)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_39, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_21(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(21)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_21, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_22(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(22)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_22, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_23(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(23)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_23, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_87(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(87)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_87, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_26(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(26)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_26, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_130(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(130)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_130, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_34(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(34)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_34, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_36(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(36)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_36, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_40(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(40)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_40, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_38(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(38)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_38, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_42(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(42)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_42, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_16(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(16)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_16, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_175(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(175)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_175, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_176(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(176)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_176, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_29(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(29)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_29, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_430(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(430)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_430, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_440(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(440)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_440, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_444(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(444)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_444, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_458(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(458)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_458, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_465(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(465)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_465, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_472(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(472)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_472, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_477(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(477)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_477, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_485(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(485)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_485, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_496(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(496)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_496, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_518(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(518)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_518, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_535(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(535)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_535, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_542(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(542)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_542, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_637(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(637)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_637, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_572(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(572)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_572, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_575(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(575)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_575, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_584(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(584)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_584, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_589(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(589)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_589, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_594(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(594)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_594, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_595(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(595)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_595, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_596(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(596)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_596, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_597(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(597)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_597, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_641(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(641)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_641, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_33(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(33)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_33, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_598(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(598)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_598, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_599(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(599)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_599, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_600(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(600)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_600, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_601(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(601)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_601, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_602(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(602)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_602, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_603(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(603)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_603, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_177(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(177)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_177, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_178(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(178)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_178, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_607(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(607)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_607, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_608(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(608)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_608, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_179(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(179)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_179, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_180(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(180)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_180, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_181(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(181)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_181, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_182(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(182)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_182, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_183(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(183)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_183, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_184(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(184)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_184, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_609(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(609)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_609, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_610(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(610)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_610, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_185(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(185)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_185, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_186(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(186)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_186, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_187(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(187)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_187, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_611(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(611)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_611, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_188(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(188)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_188, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_189(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(189)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_189, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_190(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(190)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_190, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_191(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(191)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_191, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_192(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(192)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_192, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_193(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(193)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_193, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_194(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(194)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_194, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_612(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(612)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_612, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_613(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(613)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_613, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_195(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(195)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_195, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_196(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(196)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_196, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_197(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(197)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_197, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_198(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(198)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_198, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_199(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(199)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_199, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_200(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(200)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_200, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_201(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(201)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_201, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_202(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(202)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_202, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_203(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(203)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_203, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_204(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(204)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_204, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_205(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(205)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_205, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_206(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(206)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_206, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_614(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(614)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_614, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_207(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(207)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_207, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_208(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(208)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_208, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_209(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(209)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_209, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_210(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(210)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_210, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_211(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(211)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_211, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_212(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(212)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_212, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_213(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(213)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_213, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_214(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(214)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_214, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_215(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(215)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_215, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_615(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(615)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_615, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_216(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(216)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_216, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_217(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(217)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_217, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_218(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(218)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_218, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_219(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(219)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_219, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_220(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(220)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_220, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_221(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(221)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_221, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_222(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(222)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_222, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_223(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(223)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_223, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_224(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(224)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_224, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_225(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(225)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_225, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_616(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(616)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_616, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_226(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(226)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_226, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_227(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(227)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_227, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_228(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(228)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_228, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_229(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(229)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_229, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_230(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(230)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_230, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_617(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(617)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_617, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_231(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(231)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_231, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_232(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(232)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_232, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_233(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(233)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_233, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_234(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(234)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_234, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_235(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(235)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_235, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_236(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(236)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_236, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_237(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(237)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_237, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_238(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(238)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_238, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_239(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(239)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_239, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_642(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(642)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_642, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_240(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(240)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_240, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_241(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(241)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_241, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_242(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(242)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_242, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_243(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(243)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_243, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_604(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(604)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_604, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_244(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(244)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_244, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_245(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(245)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_245, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_246(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(246)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_246, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_247(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(247)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_247, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_248(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(248)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_248, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_249(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(249)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_249, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_250(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(250)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_250, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_251(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(251)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_251, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_252(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(252)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_252, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_643(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(643)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_643, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_253(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(253)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_253, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_254(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(254)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_254, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_255(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(255)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_255, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_256(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(256)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_256, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_257(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(257)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_257, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_618(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(618)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_618, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_258(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(258)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_258, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_619(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(619)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_619, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_259(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(259)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_259, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_260(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(260)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_260, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_261(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(261)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_261, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_262(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(262)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_262, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_263(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(263)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_263, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_264(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(264)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_264, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_265(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(265)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_265, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_266(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(266)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_266, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_267(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(267)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_267, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_268(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(268)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_268, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_651(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(651)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_651, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_269(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(269)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_269, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_270(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(270)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_270, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_271(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(271)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_271, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_272(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(272)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_272, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_620(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(620)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_620, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_273(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(273)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_273, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_621(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(621)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_621, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_274(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(274)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_274, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_275(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(275)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_275, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_276(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(276)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_276, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_277(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(277)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_277, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_278(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(278)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_278, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_279(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(279)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_279, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_280(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(280)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_280, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_622(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(622)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_622, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_281(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(281)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_281, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_282(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(282)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_282, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_283(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(283)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_283, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_284(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(284)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_284, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_285(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(285)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_285, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_286(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(286)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_286, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_623(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(623)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_623, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_287(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(287)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_287, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_288(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(288)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_288, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_289(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(289)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_289, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_290(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(290)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_290, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_291(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(291)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_291, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_292(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(292)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_292, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_293(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(293)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_293, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_294(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(294)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_294, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_295(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(295)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_295, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_296(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(296)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_296, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_297(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(297)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_297, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_624(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(624)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_624, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_298(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(298)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_298, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_299(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(299)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_299, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_300(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(300)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_300, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_301(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(301)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_301, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_302(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(302)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_302, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_303(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(303)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_303, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_652(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(652)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_652, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_304(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(304)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_304, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_305(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(305)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_305, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_306(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(306)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_306, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_307(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(307)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_307, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_308(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(308)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_308, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_309(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(309)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_309, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_310(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(310)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_310, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_311(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(311)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_311, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_312(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(312)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_312, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_313(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(313)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_313, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_314(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(314)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_314, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_315(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(315)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_315, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_316(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(316)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_316, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_317(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(317)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_317, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_318(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(318)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_318, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_319(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(319)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_319, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_320(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(320)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_320, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_321(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(321)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_321, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_322(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(322)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_322, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_323(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(323)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_323, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_324(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(324)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_324, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_325(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(325)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_325, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_326(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(326)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_326, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_327(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(327)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_327, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_328(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(328)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_328, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_329(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(329)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_329, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_330(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(330)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_330, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_331(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(331)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_331, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_332(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(332)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_332, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_333(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(333)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_333, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_334(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(334)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_334, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_335(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(335)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_335, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_336(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(336)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_336, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_337(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(337)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_337, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_338(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(338)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_338, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_339(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(339)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_339, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_340(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(340)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_340, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_341(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(341)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_341, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_342(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(342)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_342, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_343(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(343)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_343, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_344(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(344)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_344, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_345(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(345)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_345, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_346(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(346)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_346, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_347(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(347)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_347, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_348(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(348)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_348, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_349(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(349)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_349, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_350(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(350)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_350, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_351(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(351)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_351, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_352(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(352)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_352, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_353(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(353)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_353, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_354(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(354)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_354, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_355(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(355)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_355, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_356(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(356)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_356, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_357(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(357)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_357, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_358(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(358)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_358, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_359(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(359)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_359, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_360(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(360)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_360, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_361(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(361)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_361, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_362(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(362)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_362, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_363(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(363)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_363, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_364(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(364)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_364, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_365(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(365)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_365, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_366(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(366)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_366, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_625(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(625)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_625, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_367(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(367)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_367, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_644(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(644)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_644, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_368(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(368)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_368, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_369(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(369)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_369, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_370(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(370)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_370, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_371(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(371)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_371, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_372(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(372)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_372, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_373(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(373)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_373, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_374(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(374)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_374, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_375(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(375)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_375, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_376(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(376)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_376, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_377(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(377)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_377, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_378(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(378)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_378, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_379(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(379)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_379, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_380(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(380)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_380, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_381(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(381)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_381, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_382(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(382)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_382, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_383(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(383)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_383, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_384(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(384)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_384, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_385(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(385)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_385, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_386(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(386)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_386, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_387(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(387)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_387, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_388(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(388)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_388, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_389(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(389)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_389, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_390(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(390)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_390, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_391(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(391)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_391, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_392(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(392)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_392, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_393(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(393)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_393, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_394(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(394)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_394, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_395(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(395)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_395, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_653(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(653)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_653, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_654(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(654)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_654, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_396(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(396)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_396, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_397(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(397)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_397, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_398(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(398)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_398, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_399(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(399)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_399, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_400(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(400)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_400, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_401(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(401)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_401, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_402(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(402)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_402, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_626(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(626)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_626, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_403(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(403)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_403, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_627(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(627)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_627, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_404(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(404)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_404, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_405(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(405)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_405, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_406(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(406)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_406, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_407(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(407)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_407, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_645(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(645)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_645, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_408(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(408)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_408, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_409(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(409)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_409, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_410(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(410)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_410, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_646(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(646)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_646, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_411(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(411)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_411, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_412(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(412)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_412, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_413(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(413)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_413, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_414(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(414)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_414, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_415(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(415)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_415, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_416(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(416)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_416, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_417(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(417)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_417, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_418(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(418)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_418, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_419(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(419)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_419, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_420(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(420)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_420, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_421(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(421)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_421, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_422(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(422)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_422, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_423(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(423)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_423, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_424(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(424)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_424, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_425(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(425)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_425, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_426(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(426)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_426, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_647(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(647)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_647, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_427(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(427)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_427, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_428(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(428)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_428, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_628(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(628)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_628, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_429(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(429)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_429, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_431(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(431)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_431, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_432(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(432)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_432, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_433(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(433)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_433, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_434(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(434)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_434, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_435(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(435)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_435, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_436(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(436)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_436, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_437(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(437)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_437, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_438(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(438)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_438, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_439(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(439)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_439, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_648(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(648)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_648, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_441(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(441)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_441, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_629(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(629)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_629, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_649(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(649)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_649, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_442(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(442)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_442, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_605(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(605)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_605, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_443(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(443)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_443, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_445(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(445)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_445, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_446(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(446)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_446, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_447(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(447)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_447, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_448(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(448)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_448, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_449(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(449)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_449, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_450(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(450)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_450, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_451(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(451)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_451, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_452(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(452)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_452, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_630(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(630)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_630, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_453(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(453)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_453, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_454(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(454)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_454, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_455(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(455)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_455, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_456(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(456)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_456, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_457(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(457)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_457, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_459(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(459)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_459, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_460(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(460)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_460, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_631(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(631)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_631, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_461(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(461)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_461, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_462(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(462)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_462, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_463(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(463)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_463, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_464(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(464)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_464, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_466(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(466)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_466, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_467(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(467)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_467, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_468(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(468)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_468, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_469(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(469)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_469, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_470(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(470)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_470, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_471(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(471)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_471, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_473(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(473)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_473, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_474(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(474)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_474, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_655(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(655)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_655, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_475(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(475)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_475, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_606(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(606)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_606, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_632(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(632)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_632, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_476(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(476)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_476, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_478(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(478)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_478, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_633(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(633)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_633, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_479(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(479)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_479, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_480(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(480)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_480, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_481(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(481)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_481, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_482(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(482)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_482, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_483(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(483)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_483, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_484(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(484)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_484, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_486(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(486)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_486, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_487(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(487)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_487, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_488(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(488)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_488, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_489(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(489)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_489, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_490(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(490)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_490, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_491(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(491)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_491, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_492(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(492)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_492, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_493(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(493)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_493, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_494(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(494)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_494, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_495(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(495)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_495, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_497(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(497)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_497, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_498(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(498)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_498, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_499(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(499)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_499, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_500(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(500)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_500, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_501(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(501)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_501, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_502(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(502)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_502, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_503(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(503)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_503, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_504(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(504)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_504, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_505(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(505)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_505, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_506(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(506)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_506, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_507(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(507)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_507, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_508(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(508)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_508, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_509(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(509)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_509, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_510(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(510)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_510, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_511(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(511)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_511, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_512(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(512)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_512, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_513(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(513)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_513, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_514(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(514)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_514, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_515(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(515)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_515, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_516(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(516)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_516, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_517(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(517)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_517, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_519(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(519)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_519, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_520(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(520)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_520, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_521(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(521)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_521, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_522(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(522)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_522, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_634(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(634)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_634, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_523(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(523)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_523, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_524(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(524)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_524, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_525(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(525)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_525, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_526(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(526)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_526, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_527(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(527)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_527, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_635(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(635)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_635, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_528(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(528)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_528, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_529(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(529)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_529, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_530(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(530)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_530, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_531(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(531)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_531, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_532(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(532)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_532, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_533(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(533)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_533, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_534(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(534)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_534, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_536(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(536)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_536, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_650(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(650)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_650, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_537(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(537)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_537, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_538(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(538)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_538, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_539(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(539)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_539, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_540(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(540)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_540, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_541(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(541)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_541, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_543(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(543)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_543, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_544(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(544)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_544, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_545(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(545)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_545, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_546(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(546)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_546, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_547(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(547)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_547, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_548(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(548)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_548, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_549(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(549)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_549, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_550(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(550)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_550, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_551(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(551)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_551, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_552(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(552)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_552, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_553(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(553)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_553, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_554(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(554)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_554, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_555(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(555)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_555, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_556(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(556)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_556, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_557(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(557)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_557, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_636(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(636)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_636, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_558(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(558)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_558, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_559(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(559)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_559, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_560(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(560)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_560, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_561(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(561)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_561, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_562(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(562)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_562, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_563(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(563)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_563, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_564(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(564)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_564, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_638(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(638)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_638, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_639(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(639)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_639, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_565(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(565)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_565, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_566(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(566)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_566, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_567(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(567)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_567, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_568(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(568)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_568, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_569(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(569)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_569, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_570(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(570)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_570, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_571(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(571)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_571, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_573(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(573)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_573, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_574(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(574)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_574, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_576(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(576)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_576, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_577(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(577)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_577, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_578(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(578)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_578, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_579(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(579)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_579, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_580(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(580)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_580, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_581(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(581)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_581, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_582(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(582)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_582, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_583(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(583)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_583, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_585(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(585)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_585, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_586(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(586)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_586, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_587(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(587)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_587, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_588(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(588)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_588, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_640(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(640)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_640, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_590(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(590)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_590, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_591(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(591)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_591, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_592(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(592)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_592, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_593(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(593)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_593, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_49(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(49)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_49, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_18(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(18)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_18, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_19(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(19)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_19, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_17(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(17)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_17, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_53(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(53)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_53, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_55(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(55)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_55, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_60(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(60)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_60, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_59(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(59)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_59, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_62(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(62)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_62, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_65(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(65)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_65, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_66(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(66)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_66, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_67(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(67)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_67, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_64(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(64)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_64, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_57(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(57)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_57, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_82(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(82)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_82, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_88(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(88)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_88, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_3(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(3)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_3, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_103(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(103)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_103, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_10(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(10)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_10, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_131(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(131)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_131, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_154(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(154)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_154, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_156(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(156)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_156, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_161(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(161)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_161, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_166(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(166)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_166, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_168(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(168)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_168, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_170(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(170)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_170, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_172(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(172)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_172, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_173(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(173)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_173, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_174(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(174)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_174, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_9(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(9)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_9, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_74(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(74)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_74, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_76(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(76)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_76, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_79(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(79)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_79, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_85(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(85)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_85, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_89(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(89)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_89, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_92(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(92)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_92, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_95(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(95)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_95, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_96(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(96)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_96, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_97(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(97)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_97, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_100(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(100)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_100, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_101(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(101)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_101, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_102(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(102)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_102, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_107(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(107)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_107, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_108(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(108)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_108, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_110(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(110)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_110, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_111(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(111)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_111, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_114(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(114)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_114, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_116(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(116)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_116, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_117(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(117)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_117, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_118(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(118)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_118, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_119(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(119)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_119, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_6(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(6)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_6, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_7(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(7)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_7, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_122(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(122)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_122, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_15(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(15)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_15, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_123(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(123)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_123, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_124(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(124)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_124, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_127(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(127)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_127, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_128(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(128)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_128, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_132(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(132)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_132, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_135(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(135)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_135, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_138(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(138)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_138, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_140(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(140)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_140, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_142(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(142)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_142, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_143(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(143)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_143, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_146(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(146)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_146, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_148(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(148)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_148, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_150(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(150)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_150, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_153(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(153)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_153, True  # 返回状态栈常量状态的终结符行为函数


def action_reduce_0_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 843)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_1_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 846)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_4_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 846)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_5_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 847)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_7_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 847)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_8_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 848)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_9_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.DEFAULT, charset_name=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_10_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 848)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_11_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 849)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_12_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 849)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_13_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 849)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_14_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 849)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_15_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = None
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 849)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_16_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.StringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 850)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_17_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.IntLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 851)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_18_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.DecimalLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_19_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FloatLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_20_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_21_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.BinStringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 858)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_22_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.HexStringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 858)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_23_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.StringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 858)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_24_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = [symbol_stack[-1]]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 859)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_25_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-3] + [symbol_stack[-1]]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 859)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_29_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Hostname(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 863)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_30_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 863)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_32_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 864)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_33_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.StringLiteral(value='BINARY')
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 864)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_34_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.ASCII_BINARY
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 865)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_35_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.ASCII
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 865)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_36_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.BINARY_ASCII
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 865)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_37_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.BINARY, charset_name=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_38_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.UNICODE_BINARY
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 866)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_39_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.UNICODE
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 866)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_40_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.CharsetTypeEnum.BINARY_UNICODE
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 866)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_41_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.BYTE, charset_name=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_42_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.CHARSET_NAME_BINARY, charset_name=symbol_stack[-2].get_str_value())
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_43_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.CHARSET_NAME, charset_name=symbol_stack[-1].get_str_value())
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_45_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=symbol_stack[-1], charset_name=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_46_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=symbol_stack[-1], charset_name=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_47_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Charset(charset_type=ast.CharsetTypeEnum.BINARY_CHARSET_NAME, charset_name=symbol_stack[-1].get_str_value())
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 867)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_49_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=symbol_stack[-2], option_2=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 868)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_52_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 869)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_53_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=symbol_stack[-4], option_2=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-6], 870)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-5:] = [symbol_value]  # 出栈 5 个参数，入栈新生成的非终结符的值
    status_stack[-5:] = [next_status]  # 出栈 5 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_58_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 871)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_59_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=symbol_stack[-2], option_2=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 873)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_60_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=symbol_stack[-4], option_2=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-6], 873)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-5:] = [symbol_value]  # 出栈 5 个参数，入栈新生成的非终结符的值
    status_stack[-5:] = [next_status]  # 出栈 5 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_65_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldOption.SIGNED
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 875)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_66_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldOption.UNSIGNED
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 875)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_67_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldOption.ZEROFILL
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 875)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_68_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 876)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_69_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-2] | symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 876)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_70_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 877)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_71_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.CHAR, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_72_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.CHAR, params=symbol_stack[-2], charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_74_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.DATE)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_75_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.DATETIME, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_77_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.DECIMAL, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_78_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldOption.NONE
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 877)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_79_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=None, option_2=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 873)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_80_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.DOUBLE_PRECISION, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-5], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-4:] = [symbol_value]  # 出栈 4 个参数，入栈新生成的非终结符的值
    status_stack[-4:] = [next_status]  # 出栈 4 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_82_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=None, option_2=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 871)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_83_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.DOUBLE, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_86_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.ENUM, enum_value_list=[text_string.get_str_value() for text_string in symbol_stack[-3]], charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-6], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-5:] = [symbol_value]  # 出栈 5 个参数，入栈新生成的非终结符的值
    status_stack[-5:] = [next_status]  # 出栈 5 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_90_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.FIXED, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_93_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.FLOAT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_96_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.GEOMETRY)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_97_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.GEOMETRYCOLLECTION)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_98_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.INT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_100_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldTypeParams(option_1=None, option_2=None)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 869)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_101_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.JSON)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_102_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LINESTRING)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_103_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LONG_VARBINARY)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_104_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LONG_VARCHAR, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_106_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LONG, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_108_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LONGBLOB)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_109_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.LONGTEXT, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_111_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MEDIUMBLOB)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_112_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MEDIUMINT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_115_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MEDIUMTEXT, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_117_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MULTILINESTRING)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_118_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MULTIPOINT)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_119_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.MULTIPOLYGON)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_120_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NUMERIC, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_123_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.POINT)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_124_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.POLYGON)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_125_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.REAL, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_128_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.SERIAL)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_129_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.SET, enum_value_list=[text_string.get_str_value() for text_string in symbol_stack[-3]], charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-6], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-5:] = [symbol_value]  # 出栈 5 个参数，入栈新生成的非终结符的值
    status_stack[-5:] = [next_status]  # 出栈 5 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_133_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.SMALLINT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_136_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TEXT, params=symbol_stack[-2], charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_139_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TIME, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_141_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TIMESTAMP, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_143_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TINYBLOB)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_144_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TINYINT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_147_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.TINYTEXT, charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_149_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.VARBINARY, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_151_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.YEAR, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_154_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NCHAR_BINARY, params=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_155_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NCHAR, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_156_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NCHAR_BINARY)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_157_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NCHAR)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_158_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.VARCHAR, params=symbol_stack[-2], charset=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_161_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NVARCHAR_BINARY, params=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_162_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.NVARCHAR, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_164_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BIGINT, params=symbol_stack[-2], options=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_167_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BINARY, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_168_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BINARY)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_169_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BIT, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_170_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BIT)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_171_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BLOB, params=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_173_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BOOL)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_174_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FieldType(field_type=ast.FieldTypeEnum.BOOLEAN)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 878)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_175_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 891)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_176_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 891)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_177_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_178_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_179_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_180_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_181_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_182_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_183_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_184_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_185_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_186_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_187_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_188_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_189_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_190_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_191_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_192_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_193_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_194_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_195_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_196_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_197_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_198_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_199_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_200_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_201_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_202_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_203_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_204_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_205_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_206_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_207_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_208_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_209_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_210_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_211_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_212_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_213_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_214_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_215_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_216_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_217_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_218_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_219_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_220_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_221_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_222_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_223_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_224_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_225_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_226_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_227_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_228_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_229_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_230_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_231_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_232_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_233_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_234_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_235_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_236_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_237_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_238_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_239_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_240_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_241_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_242_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_243_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_244_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_245_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_246_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_247_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_248_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_249_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_250_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_251_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_252_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_253_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_254_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_255_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_256_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_257_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_258_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_259_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_260_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_261_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_262_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_263_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_264_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_265_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_266_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_267_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_268_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_269_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_270_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_271_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_272_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_273_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_274_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_275_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_276_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_277_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_278_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_279_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_280_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_281_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_282_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_283_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_284_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_285_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_286_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_287_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_288_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_289_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_290_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_291_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_292_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_293_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_294_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_295_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_296_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_297_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_298_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_299_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_300_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_301_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_302_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_303_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_304_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_305_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_306_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_307_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_308_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_309_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_310_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_311_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_312_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_313_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_314_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_315_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_316_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_317_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_318_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_319_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_320_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_321_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_322_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_323_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_324_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_325_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_326_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_327_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_328_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_329_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_330_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_331_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_332_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_333_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_334_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_335_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_336_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_337_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_338_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_339_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_340_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_341_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_342_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_343_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_344_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_345_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_346_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_347_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_348_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_349_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_350_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_351_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_352_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_353_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_354_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_355_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_356_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_357_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_358_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_359_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_360_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_361_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_362_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_363_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_364_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_365_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_366_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_367_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_368_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_369_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_370_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_371_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_372_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_373_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_374_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_375_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_376_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_377_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_378_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_379_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_380_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_381_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_382_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_383_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_384_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_385_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_386_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_387_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_388_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_389_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_390_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_391_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_392_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_393_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_394_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_395_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_396_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_397_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_398_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_399_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_400_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_401_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_402_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_403_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_404_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_405_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_406_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_407_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_408_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_409_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_410_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_411_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_412_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_413_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_414_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_415_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_416_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_417_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_418_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_419_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_420_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_421_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_422_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_423_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_424_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_425_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_426_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_427_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_428_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_429_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_430_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_431_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_432_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_433_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_434_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_435_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_436_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_437_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_438_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_439_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_440_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_441_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_442_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_443_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_444_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_445_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_446_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_447_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_448_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_449_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_450_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_451_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_452_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_453_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_454_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_455_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_456_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_457_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_458_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_459_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_460_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_461_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_462_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_463_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_464_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_465_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_466_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_467_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_468_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_469_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_470_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_471_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_472_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_473_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_474_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_475_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_476_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_477_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_478_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_479_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_480_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_481_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_482_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_483_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_484_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_485_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_486_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_487_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_488_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_489_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_490_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_491_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_492_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_493_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_494_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_495_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_496_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_497_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_498_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_499_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_500_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_501_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_502_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_503_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_504_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_505_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_506_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_507_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_508_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_509_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_510_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_511_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_512_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_513_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_514_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_515_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_516_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_517_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_518_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_519_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_520_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_521_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_522_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_523_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_524_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_525_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_526_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_527_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_528_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_529_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_530_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_531_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_532_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_533_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_534_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_535_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_536_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_537_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_538_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_539_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_540_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_541_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_542_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_543_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_544_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_545_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_546_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_547_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_548_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_549_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_550_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_551_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_552_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_553_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_554_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_555_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_556_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_557_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_558_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_559_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_560_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_561_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_562_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_563_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_564_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_565_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_566_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_567_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_568_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_569_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_570_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_571_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_572_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_573_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_574_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_575_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_576_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_577_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_578_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_579_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_580_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_581_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_582_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_583_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_584_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_585_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_586_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_587_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_588_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_589_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_590_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_591_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_592_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_593_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_594_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_595_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_596_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_597_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_598_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_599_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_600_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_601_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_602_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_603_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 892)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_604_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 893)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_605_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 893)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_606_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 893)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_607_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_608_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_609_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_610_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_611_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_612_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_613_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_614_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_615_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_616_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_617_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_618_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_619_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_620_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_621_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_622_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_623_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_624_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_625_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_626_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_627_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_628_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_629_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_630_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_631_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_632_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_633_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_634_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_635_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_636_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_637_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_638_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_639_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_640_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_641_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 894)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_642_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_643_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_644_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_645_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_646_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_647_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_648_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_649_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_650_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 895)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_651_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 896)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_652_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 896)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_653_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 896)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_654_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 896)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_655_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.Ident(symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 896)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_656_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 897)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_661_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 901)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_accept(_1: List[int], _2: List[Any], _3: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    return None, True


STATUS_0_TERMINAL_ACTION_HASH = {
    0: action_reduce_0_1,
}


def status_0(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_0_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_1_TERMINAL_ACTION_HASH = {
    49: action_reduce_1_1,
    51: action_reduce_1_1,
    52: action_reduce_1_1,
    53: action_reduce_1_1,
    56: action_reduce_1_1,
    57: action_reduce_1_1,
    58: action_reduce_1_1,
    60: action_reduce_1_1,
    61: action_reduce_1_1,
    62: action_reduce_1_1,
    63: action_reduce_1_1,
    64: action_reduce_1_1,
    65: action_reduce_1_1,
    68: action_reduce_1_1,
    71: action_reduce_1_1,
    72: action_reduce_1_1,
    75: action_reduce_1_1,
    77: action_reduce_1_1,
    78: action_reduce_1_1,
    79: action_reduce_1_1,
    80: action_reduce_1_1,
    81: action_reduce_1_1,
    83: action_reduce_1_1,
    84: action_reduce_1_1,
    85: action_reduce_1_1,
    87: action_reduce_1_1,
    91: action_reduce_1_1,
    92: action_reduce_1_1,
    93: action_reduce_1_1,
    95: action_reduce_1_1,
    96: action_reduce_1_1,
    97: action_reduce_1_1,
    99: action_reduce_1_1,
    100: action_reduce_1_1,
    101: action_reduce_1_1,
    103: action_reduce_1_1,
    104: action_reduce_1_1,
    107: action_reduce_1_1,
    109: action_reduce_1_1,
    110: action_reduce_1_1,
    111: action_reduce_1_1,
    113: action_reduce_1_1,
    114: action_reduce_1_1,
    117: action_reduce_1_1,
    119: action_reduce_1_1,
    120: action_reduce_1_1,
    121: action_reduce_1_1,
    122: action_reduce_1_1,
    123: action_reduce_1_1,
    124: action_reduce_1_1,
    125: action_reduce_1_1,
    126: action_reduce_1_1,
    128: action_reduce_1_1,
    130: action_reduce_1_1,
    131: action_reduce_1_1,
    132: action_reduce_1_1,
    133: action_reduce_1_1,
    134: action_reduce_1_1,
    135: action_reduce_1_1,
    136: action_reduce_1_1,
    137: action_reduce_1_1,
    138: action_reduce_1_1,
    139: action_reduce_1_1,
    140: action_reduce_1_1,
    141: action_reduce_1_1,
    143: action_reduce_1_1,
    144: action_reduce_1_1,
    146: action_reduce_1_1,
    147: action_reduce_1_1,
    148: action_reduce_1_1,
    149: action_reduce_1_1,
    150: action_reduce_1_1,
    153: action_reduce_1_1,
    158: action_reduce_1_1,
    164: action_reduce_1_1,
    165: action_reduce_1_1,
    168: action_reduce_1_1,
    169: action_reduce_1_1,
    170: action_reduce_1_1,
    171: action_reduce_1_1,
    176: action_reduce_1_1,
    181: action_reduce_1_1,
    182: action_reduce_1_1,
    183: action_reduce_1_1,
    185: action_reduce_1_1,
    190: action_reduce_1_1,
    192: action_reduce_1_1,
    193: action_reduce_1_1,
    194: action_reduce_1_1,
    195: action_reduce_1_1,
    196: action_reduce_1_1,
    200: action_reduce_1_1,
    204: action_reduce_1_1,
    205: action_reduce_1_1,
    206: action_reduce_1_1,
    211: action_reduce_1_1,
    213: action_reduce_1_1,
    214: action_reduce_1_1,
    215: action_reduce_1_1,
    216: action_reduce_1_1,
    217: action_reduce_1_1,
    218: action_reduce_1_1,
    219: action_reduce_1_1,
    220: action_reduce_1_1,
    221: action_reduce_1_1,
    222: action_reduce_1_1,
    223: action_reduce_1_1,
    225: action_reduce_1_1,
    226: action_reduce_1_1,
    227: action_reduce_1_1,
    229: action_reduce_1_1,
    230: action_reduce_1_1,
    231: action_reduce_1_1,
    234: action_reduce_1_1,
    235: action_reduce_1_1,
    237: action_reduce_1_1,
    238: action_reduce_1_1,
    239: action_reduce_1_1,
    240: action_reduce_1_1,
    241: action_reduce_1_1,
    243: action_reduce_1_1,
    244: action_reduce_1_1,
    247: action_reduce_1_1,
    248: action_reduce_1_1,
    249: action_reduce_1_1,
    250: action_reduce_1_1,
    251: action_reduce_1_1,
    253: action_reduce_1_1,
    257: action_reduce_1_1,
    258: action_reduce_1_1,
    259: action_reduce_1_1,
    263: action_reduce_1_1,
    264: action_reduce_1_1,
    266: action_reduce_1_1,
    269: action_reduce_1_1,
    270: action_reduce_1_1,
    273: action_reduce_1_1,
    274: action_reduce_1_1,
    276: action_reduce_1_1,
    277: action_reduce_1_1,
    278: action_reduce_1_1,
    279: action_reduce_1_1,
    281: action_reduce_1_1,
    285: action_reduce_1_1,
    286: action_reduce_1_1,
    287: action_reduce_1_1,
    288: action_reduce_1_1,
    289: action_reduce_1_1,
    291: action_reduce_1_1,
    293: action_reduce_1_1,
    294: action_reduce_1_1,
    295: action_reduce_1_1,
    296: action_reduce_1_1,
    297: action_reduce_1_1,
    301: action_reduce_1_1,
    304: action_reduce_1_1,
    305: action_reduce_1_1,
    307: action_reduce_1_1,
    309: action_reduce_1_1,
    311: action_reduce_1_1,
    312: action_reduce_1_1,
    313: action_reduce_1_1,
    318: action_reduce_1_1,
    319: action_reduce_1_1,
    320: action_reduce_1_1,
    331: action_reduce_1_1,
    332: action_reduce_1_1,
    333: action_reduce_1_1,
    337: action_reduce_1_1,
    339: action_reduce_1_1,
    340: action_reduce_1_1,
    343: action_reduce_1_1,
    345: action_reduce_1_1,
    347: action_reduce_1_1,
    349: action_reduce_1_1,
    352: action_reduce_1_1,
    353: action_reduce_1_1,
    359: action_reduce_1_1,
    361: action_reduce_1_1,
    362: action_reduce_1_1,
    367: action_reduce_1_1,
    368: action_reduce_1_1,
    370: action_reduce_1_1,
    374: action_reduce_1_1,
    375: action_reduce_1_1,
    376: action_reduce_1_1,
    377: action_reduce_1_1,
    378: action_reduce_1_1,
    385: action_reduce_1_1,
    386: action_reduce_1_1,
    388: action_reduce_1_1,
    389: action_reduce_1_1,
    390: action_reduce_1_1,
    391: action_reduce_1_1,
    392: action_reduce_1_1,
    393: action_reduce_1_1,
    394: action_reduce_1_1,
    395: action_reduce_1_1,
    396: action_reduce_1_1,
    397: action_reduce_1_1,
    398: action_reduce_1_1,
    399: action_reduce_1_1,
    400: action_reduce_1_1,
    401: action_reduce_1_1,
    402: action_reduce_1_1,
    403: action_reduce_1_1,
    404: action_reduce_1_1,
    405: action_reduce_1_1,
    406: action_reduce_1_1,
    408: action_reduce_1_1,
    409: action_reduce_1_1,
    410: action_reduce_1_1,
    411: action_reduce_1_1,
    414: action_reduce_1_1,
    415: action_reduce_1_1,
    416: action_reduce_1_1,
    417: action_reduce_1_1,
    418: action_reduce_1_1,
    419: action_reduce_1_1,
    420: action_reduce_1_1,
    424: action_reduce_1_1,
    425: action_reduce_1_1,
    426: action_reduce_1_1,
    427: action_reduce_1_1,
    428: action_reduce_1_1,
    430: action_reduce_1_1,
    431: action_reduce_1_1,
    434: action_reduce_1_1,
    436: action_reduce_1_1,
    438: action_reduce_1_1,
    439: action_reduce_1_1,
    440: action_reduce_1_1,
    441: action_reduce_1_1,
    442: action_reduce_1_1,
    443: action_reduce_1_1,
    444: action_reduce_1_1,
    445: action_reduce_1_1,
    446: action_reduce_1_1,
    447: action_reduce_1_1,
    449: action_reduce_1_1,
    451: action_reduce_1_1,
    452: action_reduce_1_1,
    453: action_reduce_1_1,
    454: action_reduce_1_1,
    455: action_reduce_1_1,
    456: action_reduce_1_1,
    457: action_reduce_1_1,
    458: action_reduce_1_1,
    459: action_reduce_1_1,
    462: action_reduce_1_1,
    463: action_reduce_1_1,
    468: action_reduce_1_1,
    469: action_reduce_1_1,
    471: action_reduce_1_1,
    473: action_reduce_1_1,
    474: action_reduce_1_1,
    475: action_reduce_1_1,
    476: action_reduce_1_1,
    478: action_reduce_1_1,
    479: action_reduce_1_1,
    480: action_reduce_1_1,
    484: action_reduce_1_1,
    486: action_reduce_1_1,
    490: action_reduce_1_1,
    491: action_reduce_1_1,
    492: action_reduce_1_1,
    497: action_reduce_1_1,
    498: action_reduce_1_1,
    499: action_reduce_1_1,
    501: action_reduce_1_1,
    502: action_reduce_1_1,
    503: action_reduce_1_1,
    505: action_reduce_1_1,
    506: action_reduce_1_1,
    507: action_reduce_1_1,
    508: action_reduce_1_1,
    509: action_reduce_1_1,
    511: action_reduce_1_1,
    512: action_reduce_1_1,
    513: action_reduce_1_1,
    514: action_reduce_1_1,
    515: action_reduce_1_1,
    516: action_reduce_1_1,
    517: action_reduce_1_1,
    518: action_reduce_1_1,
    519: action_reduce_1_1,
    520: action_reduce_1_1,
    521: action_reduce_1_1,
    523: action_reduce_1_1,
    524: action_reduce_1_1,
    525: action_reduce_1_1,
    527: action_reduce_1_1,
    528: action_reduce_1_1,
    530: action_reduce_1_1,
    531: action_reduce_1_1,
    532: action_reduce_1_1,
    533: action_reduce_1_1,
    534: action_reduce_1_1,
    537: action_reduce_1_1,
    538: action_reduce_1_1,
    539: action_reduce_1_1,
    540: action_reduce_1_1,
    545: action_reduce_1_1,
    548: action_reduce_1_1,
    549: action_reduce_1_1,
    551: action_reduce_1_1,
    552: action_reduce_1_1,
    553: action_reduce_1_1,
    556: action_reduce_1_1,
    557: action_reduce_1_1,
    558: action_reduce_1_1,
    559: action_reduce_1_1,
    560: action_reduce_1_1,
    561: action_reduce_1_1,
    563: action_reduce_1_1,
    564: action_reduce_1_1,
    566: action_reduce_1_1,
    567: action_reduce_1_1,
    569: action_reduce_1_1,
    571: action_reduce_1_1,
    572: action_reduce_1_1,
    573: action_reduce_1_1,
    574: action_reduce_1_1,
    575: action_reduce_1_1,
    576: action_reduce_1_1,
    577: action_reduce_1_1,
    578: action_reduce_1_1,
    579: action_reduce_1_1,
    580: action_reduce_1_1,
    582: action_reduce_1_1,
    583: action_reduce_1_1,
    585: action_reduce_1_1,
    586: action_reduce_1_1,
    587: action_reduce_1_1,
    588: action_reduce_1_1,
    590: action_reduce_1_1,
    591: action_reduce_1_1,
    593: action_reduce_1_1,
    594: action_reduce_1_1,
    595: action_reduce_1_1,
    596: action_reduce_1_1,
    597: action_reduce_1_1,
    601: action_reduce_1_1,
    602: action_reduce_1_1,
    603: action_reduce_1_1,
    604: action_reduce_1_1,
    605: action_reduce_1_1,
    608: action_reduce_1_1,
    609: action_reduce_1_1,
    611: action_reduce_1_1,
    612: action_reduce_1_1,
    613: action_reduce_1_1,
    614: action_reduce_1_1,
    617: action_reduce_1_1,
    618: action_reduce_1_1,
    619: action_reduce_1_1,
    620: action_reduce_1_1,
    621: action_reduce_1_1,
    622: action_reduce_1_1,
    623: action_reduce_1_1,
    625: action_reduce_1_1,
    629: action_reduce_1_1,
    630: action_reduce_1_1,
    631: action_reduce_1_1,
    632: action_reduce_1_1,
    634: action_reduce_1_1,
    636: action_reduce_1_1,
    638: action_reduce_1_1,
    639: action_reduce_1_1,
    640: action_reduce_1_1,
    641: action_reduce_1_1,
    642: action_reduce_1_1,
    644: action_reduce_1_1,
    645: action_reduce_1_1,
    647: action_reduce_1_1,
    648: action_reduce_1_1,
    649: action_reduce_1_1,
    650: action_reduce_1_1,
    651: action_reduce_1_1,
    652: action_reduce_1_1,
    653: action_reduce_1_1,
    654: action_reduce_1_1,
    655: action_reduce_1_1,
    656: action_reduce_1_1,
    657: action_reduce_1_1,
    658: action_reduce_1_1,
    659: action_reduce_1_1,
    660: action_reduce_1_1,
    661: action_reduce_1_1,
    662: action_reduce_1_1,
    663: action_reduce_1_1,
    664: action_reduce_1_1,
    665: action_reduce_1_1,
    666: action_reduce_1_1,
    667: action_reduce_1_1,
    668: action_reduce_1_1,
    669: action_reduce_1_1,
    670: action_reduce_1_1,
    671: action_reduce_1_1,
    672: action_reduce_1_1,
    673: action_reduce_1_1,
    674: action_reduce_1_1,
    675: action_reduce_1_1,
    682: action_reduce_1_1,
    683: action_reduce_1_1,
    684: action_reduce_1_1,
    686: action_reduce_1_1,
    688: action_reduce_1_1,
    690: action_reduce_1_1,
    699: action_reduce_1_1,
    701: action_reduce_1_1,
    702: action_reduce_1_1,
    703: action_reduce_1_1,
    705: action_reduce_1_1,
    706: action_reduce_1_1,
    707: action_reduce_1_1,
    708: action_reduce_1_1,
    709: action_reduce_1_1,
    710: action_reduce_1_1,
    711: action_reduce_1_1,
    714: action_reduce_1_1,
    715: action_reduce_1_1,
    716: action_reduce_1_1,
    717: action_reduce_1_1,
    718: action_reduce_1_1,
    719: action_reduce_1_1,
    720: action_reduce_1_1,
    721: action_reduce_1_1,
    722: action_reduce_1_1,
    723: action_reduce_1_1,
    724: action_reduce_1_1,
    727: action_reduce_1_1,
    729: action_reduce_1_1,
    730: action_reduce_1_1,
    731: action_reduce_1_1,
    732: action_reduce_1_1,
    733: action_reduce_1_1,
    735: action_reduce_1_1,
    736: action_reduce_1_1,
    738: action_reduce_1_1,
    739: action_reduce_1_1,
    740: action_reduce_1_1,
    741: action_reduce_1_1,
    742: action_reduce_1_1,
    743: action_reduce_1_1,
    747: action_reduce_1_1,
    750: action_reduce_1_1,
    752: action_reduce_1_1,
    754: action_reduce_1_1,
    755: action_reduce_1_1,
    756: action_reduce_1_1,
    757: action_reduce_1_1,
    758: action_reduce_1_1,
    759: action_reduce_1_1,
    761: action_reduce_1_1,
    762: action_reduce_1_1,
    763: action_reduce_1_1,
    764: action_reduce_1_1,
    767: action_reduce_1_1,
    769: action_reduce_1_1,
    771: action_reduce_1_1,
    773: action_reduce_1_1,
    774: action_reduce_1_1,
    777: action_reduce_1_1,
    779: action_reduce_1_1,
    784: action_reduce_1_1,
    785: action_reduce_1_1,
    790: action_reduce_1_1,
    792: action_reduce_1_1,
    793: action_reduce_1_1,
    795: action_reduce_1_1,
    796: action_reduce_1_1,
    797: action_reduce_1_1,
    798: action_reduce_1_1,
    799: action_reduce_1_1,
    805: action_reduce_1_1,
    806: action_reduce_1_1,
    807: action_reduce_1_1,
    809: action_reduce_1_1,
    810: action_reduce_1_1,
    811: action_reduce_1_1,
    812: action_reduce_1_1,
    814: action_reduce_1_1,
    817: action_reduce_1_1,
}


def status_1(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_1_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_2_TERMINAL_ACTION_HASH = {
    633: action_shift_1,
}


def status_2(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_2_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_3_TERMINAL_ACTION_HASH = {
    633: action_shift_1,
    791: action_shift_8,
}


def status_3(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_3_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_4_TERMINAL_ACTION_HASH = {
    49: action_reduce_4_1,
    51: action_reduce_4_1,
    52: action_reduce_4_1,
    53: action_reduce_4_1,
    56: action_reduce_4_1,
    57: action_reduce_4_1,
    58: action_reduce_4_1,
    60: action_reduce_4_1,
    61: action_reduce_4_1,
    62: action_reduce_4_1,
    63: action_reduce_4_1,
    64: action_reduce_4_1,
    65: action_reduce_4_1,
    68: action_reduce_4_1,
    71: action_reduce_4_1,
    72: action_reduce_4_1,
    75: action_reduce_4_1,
    77: action_reduce_4_1,
    78: action_reduce_4_1,
    79: action_reduce_4_1,
    80: action_reduce_4_1,
    81: action_reduce_4_1,
    83: action_reduce_4_1,
    84: action_reduce_4_1,
    85: action_reduce_4_1,
    87: action_reduce_4_1,
    91: action_reduce_4_1,
    92: action_reduce_4_1,
    93: action_reduce_4_1,
    95: action_reduce_4_1,
    96: action_reduce_4_1,
    97: action_reduce_4_1,
    99: action_reduce_4_1,
    100: action_reduce_4_1,
    101: action_reduce_4_1,
    103: action_reduce_4_1,
    104: action_reduce_4_1,
    107: action_reduce_4_1,
    109: action_reduce_4_1,
    110: action_reduce_4_1,
    111: action_reduce_4_1,
    113: action_reduce_4_1,
    114: action_reduce_4_1,
    117: action_reduce_4_1,
    119: action_reduce_4_1,
    120: action_reduce_4_1,
    121: action_reduce_4_1,
    122: action_reduce_4_1,
    123: action_reduce_4_1,
    124: action_reduce_4_1,
    125: action_reduce_4_1,
    126: action_reduce_4_1,
    128: action_reduce_4_1,
    130: action_reduce_4_1,
    131: action_reduce_4_1,
    132: action_reduce_4_1,
    133: action_reduce_4_1,
    134: action_reduce_4_1,
    135: action_reduce_4_1,
    136: action_reduce_4_1,
    137: action_reduce_4_1,
    138: action_reduce_4_1,
    139: action_reduce_4_1,
    140: action_reduce_4_1,
    141: action_reduce_4_1,
    143: action_reduce_4_1,
    144: action_reduce_4_1,
    146: action_reduce_4_1,
    147: action_reduce_4_1,
    148: action_reduce_4_1,
    149: action_reduce_4_1,
    150: action_reduce_4_1,
    153: action_reduce_4_1,
    158: action_reduce_4_1,
    164: action_reduce_4_1,
    165: action_reduce_4_1,
    168: action_reduce_4_1,
    169: action_reduce_4_1,
    170: action_reduce_4_1,
    171: action_reduce_4_1,
    176: action_reduce_4_1,
    181: action_reduce_4_1,
    182: action_reduce_4_1,
    183: action_reduce_4_1,
    185: action_reduce_4_1,
    190: action_reduce_4_1,
    192: action_reduce_4_1,
    193: action_reduce_4_1,
    194: action_reduce_4_1,
    195: action_reduce_4_1,
    196: action_reduce_4_1,
    200: action_reduce_4_1,
    204: action_reduce_4_1,
    205: action_reduce_4_1,
    206: action_reduce_4_1,
    211: action_reduce_4_1,
    213: action_reduce_4_1,
    214: action_reduce_4_1,
    215: action_reduce_4_1,
    216: action_reduce_4_1,
    217: action_reduce_4_1,
    218: action_reduce_4_1,
    219: action_reduce_4_1,
    220: action_reduce_4_1,
    221: action_reduce_4_1,
    222: action_reduce_4_1,
    223: action_reduce_4_1,
    225: action_reduce_4_1,
    226: action_reduce_4_1,
    227: action_reduce_4_1,
    229: action_reduce_4_1,
    230: action_reduce_4_1,
    231: action_reduce_4_1,
    234: action_reduce_4_1,
    235: action_reduce_4_1,
    237: action_reduce_4_1,
    238: action_reduce_4_1,
    239: action_reduce_4_1,
    240: action_reduce_4_1,
    241: action_reduce_4_1,
    243: action_reduce_4_1,
    244: action_reduce_4_1,
    247: action_reduce_4_1,
    248: action_reduce_4_1,
    249: action_reduce_4_1,
    250: action_reduce_4_1,
    251: action_reduce_4_1,
    253: action_reduce_4_1,
    257: action_reduce_4_1,
    258: action_reduce_4_1,
    259: action_reduce_4_1,
    263: action_reduce_4_1,
    264: action_reduce_4_1,
    266: action_reduce_4_1,
    269: action_reduce_4_1,
    270: action_reduce_4_1,
    273: action_reduce_4_1,
    274: action_reduce_4_1,
    276: action_reduce_4_1,
    277: action_reduce_4_1,
    278: action_reduce_4_1,
    279: action_reduce_4_1,
    281: action_reduce_4_1,
    285: action_reduce_4_1,
    286: action_reduce_4_1,
    287: action_reduce_4_1,
    288: action_reduce_4_1,
    289: action_reduce_4_1,
    291: action_reduce_4_1,
    293: action_reduce_4_1,
    294: action_reduce_4_1,
    295: action_reduce_4_1,
    296: action_reduce_4_1,
    297: action_reduce_4_1,
    301: action_reduce_4_1,
    304: action_reduce_4_1,
    305: action_reduce_4_1,
    307: action_reduce_4_1,
    309: action_reduce_4_1,
    311: action_reduce_4_1,
    312: action_reduce_4_1,
    313: action_reduce_4_1,
    318: action_reduce_4_1,
    319: action_reduce_4_1,
    320: action_reduce_4_1,
    331: action_reduce_4_1,
    332: action_reduce_4_1,
    333: action_reduce_4_1,
    337: action_reduce_4_1,
    339: action_reduce_4_1,
    340: action_reduce_4_1,
    343: action_reduce_4_1,
    345: action_reduce_4_1,
    347: action_reduce_4_1,
    349: action_reduce_4_1,
    352: action_reduce_4_1,
    353: action_reduce_4_1,
    359: action_reduce_4_1,
    361: action_reduce_4_1,
    362: action_reduce_4_1,
    367: action_reduce_4_1,
    368: action_reduce_4_1,
    370: action_reduce_4_1,
    374: action_reduce_4_1,
    375: action_reduce_4_1,
    376: action_reduce_4_1,
    377: action_reduce_4_1,
    378: action_reduce_4_1,
    385: action_reduce_4_1,
    386: action_reduce_4_1,
    388: action_reduce_4_1,
    389: action_reduce_4_1,
    390: action_reduce_4_1,
    391: action_reduce_4_1,
    392: action_reduce_4_1,
    393: action_reduce_4_1,
    394: action_reduce_4_1,
    395: action_reduce_4_1,
    396: action_reduce_4_1,
    397: action_reduce_4_1,
    398: action_reduce_4_1,
    399: action_reduce_4_1,
    400: action_reduce_4_1,
    401: action_reduce_4_1,
    402: action_reduce_4_1,
    403: action_reduce_4_1,
    404: action_reduce_4_1,
    405: action_reduce_4_1,
    406: action_reduce_4_1,
    408: action_reduce_4_1,
    409: action_reduce_4_1,
    410: action_reduce_4_1,
    411: action_reduce_4_1,
    414: action_reduce_4_1,
    415: action_reduce_4_1,
    416: action_reduce_4_1,
    417: action_reduce_4_1,
    418: action_reduce_4_1,
    419: action_reduce_4_1,
    420: action_reduce_4_1,
    424: action_reduce_4_1,
    425: action_reduce_4_1,
    426: action_reduce_4_1,
    427: action_reduce_4_1,
    428: action_reduce_4_1,
    430: action_reduce_4_1,
    431: action_reduce_4_1,
    434: action_reduce_4_1,
    436: action_reduce_4_1,
    438: action_reduce_4_1,
    439: action_reduce_4_1,
    440: action_reduce_4_1,
    441: action_reduce_4_1,
    442: action_reduce_4_1,
    443: action_reduce_4_1,
    444: action_reduce_4_1,
    445: action_reduce_4_1,
    446: action_reduce_4_1,
    447: action_reduce_4_1,
    449: action_reduce_4_1,
    451: action_reduce_4_1,
    452: action_reduce_4_1,
    453: action_reduce_4_1,
    454: action_reduce_4_1,
    455: action_reduce_4_1,
    456: action_reduce_4_1,
    457: action_reduce_4_1,
    458: action_reduce_4_1,
    459: action_reduce_4_1,
    462: action_reduce_4_1,
    463: action_reduce_4_1,
    468: action_reduce_4_1,
    469: action_reduce_4_1,
    471: action_reduce_4_1,
    473: action_reduce_4_1,
    474: action_reduce_4_1,
    475: action_reduce_4_1,
    476: action_reduce_4_1,
    478: action_reduce_4_1,
    479: action_reduce_4_1,
    480: action_reduce_4_1,
    484: action_reduce_4_1,
    486: action_reduce_4_1,
    490: action_reduce_4_1,
    491: action_reduce_4_1,
    492: action_reduce_4_1,
    497: action_reduce_4_1,
    498: action_reduce_4_1,
    499: action_reduce_4_1,
    501: action_reduce_4_1,
    502: action_reduce_4_1,
    503: action_reduce_4_1,
    505: action_reduce_4_1,
    506: action_reduce_4_1,
    507: action_reduce_4_1,
    508: action_reduce_4_1,
    509: action_reduce_4_1,
    511: action_reduce_4_1,
    512: action_reduce_4_1,
    513: action_reduce_4_1,
    514: action_reduce_4_1,
    515: action_reduce_4_1,
    516: action_reduce_4_1,
    517: action_reduce_4_1,
    518: action_reduce_4_1,
    519: action_reduce_4_1,
    520: action_reduce_4_1,
    521: action_reduce_4_1,
    523: action_reduce_4_1,
    524: action_reduce_4_1,
    525: action_reduce_4_1,
    527: action_reduce_4_1,
    528: action_reduce_4_1,
    530: action_reduce_4_1,
    531: action_reduce_4_1,
    532: action_reduce_4_1,
    533: action_reduce_4_1,
    534: action_reduce_4_1,
    537: action_reduce_4_1,
    538: action_reduce_4_1,
    539: action_reduce_4_1,
    540: action_reduce_4_1,
    545: action_reduce_4_1,
    548: action_reduce_4_1,
    549: action_reduce_4_1,
    551: action_reduce_4_1,
    552: action_reduce_4_1,
    553: action_reduce_4_1,
    556: action_reduce_4_1,
    557: action_reduce_4_1,
    558: action_reduce_4_1,
    559: action_reduce_4_1,
    560: action_reduce_4_1,
    561: action_reduce_4_1,
    563: action_reduce_4_1,
    564: action_reduce_4_1,
    566: action_reduce_4_1,
    567: action_reduce_4_1,
    569: action_reduce_4_1,
    571: action_reduce_4_1,
    572: action_reduce_4_1,
    573: action_reduce_4_1,
    574: action_reduce_4_1,
    575: action_reduce_4_1,
    576: action_reduce_4_1,
    577: action_reduce_4_1,
    578: action_reduce_4_1,
    579: action_reduce_4_1,
    580: action_reduce_4_1,
    582: action_reduce_4_1,
    583: action_reduce_4_1,
    585: action_reduce_4_1,
    586: action_reduce_4_1,
    587: action_reduce_4_1,
    588: action_reduce_4_1,
    590: action_reduce_4_1,
    591: action_reduce_4_1,
    593: action_reduce_4_1,
    594: action_reduce_4_1,
    595: action_reduce_4_1,
    596: action_reduce_4_1,
    597: action_reduce_4_1,
    601: action_reduce_4_1,
    602: action_reduce_4_1,
    603: action_reduce_4_1,
    604: action_reduce_4_1,
    605: action_reduce_4_1,
    608: action_reduce_4_1,
    609: action_reduce_4_1,
    611: action_reduce_4_1,
    612: action_reduce_4_1,
    613: action_reduce_4_1,
    614: action_reduce_4_1,
    617: action_reduce_4_1,
    618: action_reduce_4_1,
    619: action_reduce_4_1,
    620: action_reduce_4_1,
    621: action_reduce_4_1,
    622: action_reduce_4_1,
    623: action_reduce_4_1,
    625: action_reduce_4_1,
    629: action_reduce_4_1,
    630: action_reduce_4_1,
    631: action_reduce_4_1,
    632: action_reduce_4_1,
    634: action_reduce_4_1,
    636: action_reduce_4_1,
    638: action_reduce_4_1,
    639: action_reduce_4_1,
    640: action_reduce_4_1,
    641: action_reduce_4_1,
    642: action_reduce_4_1,
    644: action_reduce_4_1,
    645: action_reduce_4_1,
    647: action_reduce_4_1,
    648: action_reduce_4_1,
    649: action_reduce_4_1,
    650: action_reduce_4_1,
    651: action_reduce_4_1,
    652: action_reduce_4_1,
    653: action_reduce_4_1,
    654: action_reduce_4_1,
    655: action_reduce_4_1,
    656: action_reduce_4_1,
    657: action_reduce_4_1,
    658: action_reduce_4_1,
    659: action_reduce_4_1,
    660: action_reduce_4_1,
    661: action_reduce_4_1,
    662: action_reduce_4_1,
    663: action_reduce_4_1,
    664: action_reduce_4_1,
    665: action_reduce_4_1,
    666: action_reduce_4_1,
    667: action_reduce_4_1,
    668: action_reduce_4_1,
    669: action_reduce_4_1,
    670: action_reduce_4_1,
    671: action_reduce_4_1,
    672: action_reduce_4_1,
    673: action_reduce_4_1,
    674: action_reduce_4_1,
    675: action_reduce_4_1,
    682: action_reduce_4_1,
    683: action_reduce_4_1,
    684: action_reduce_4_1,
    686: action_reduce_4_1,
    688: action_reduce_4_1,
    690: action_reduce_4_1,
    699: action_reduce_4_1,
    701: action_reduce_4_1,
    702: action_reduce_4_1,
    703: action_reduce_4_1,
    705: action_reduce_4_1,
    706: action_reduce_4_1,
    707: action_reduce_4_1,
    708: action_reduce_4_1,
    709: action_reduce_4_1,
    710: action_reduce_4_1,
    711: action_reduce_4_1,
    714: action_reduce_4_1,
    715: action_reduce_4_1,
    716: action_reduce_4_1,
    717: action_reduce_4_1,
    718: action_reduce_4_1,
    719: action_reduce_4_1,
    720: action_reduce_4_1,
    721: action_reduce_4_1,
    722: action_reduce_4_1,
    723: action_reduce_4_1,
    724: action_reduce_4_1,
    727: action_reduce_4_1,
    729: action_reduce_4_1,
    730: action_reduce_4_1,
    731: action_reduce_4_1,
    732: action_reduce_4_1,
    733: action_reduce_4_1,
    735: action_reduce_4_1,
    736: action_reduce_4_1,
    738: action_reduce_4_1,
    739: action_reduce_4_1,
    740: action_reduce_4_1,
    741: action_reduce_4_1,
    742: action_reduce_4_1,
    743: action_reduce_4_1,
    747: action_reduce_4_1,
    750: action_reduce_4_1,
    752: action_reduce_4_1,
    754: action_reduce_4_1,
    755: action_reduce_4_1,
    756: action_reduce_4_1,
    757: action_reduce_4_1,
    758: action_reduce_4_1,
    759: action_reduce_4_1,
    761: action_reduce_4_1,
    762: action_reduce_4_1,
    763: action_reduce_4_1,
    764: action_reduce_4_1,
    767: action_reduce_4_1,
    769: action_reduce_4_1,
    771: action_reduce_4_1,
    773: action_reduce_4_1,
    774: action_reduce_4_1,
    777: action_reduce_4_1,
    779: action_reduce_4_1,
    784: action_reduce_4_1,
    785: action_reduce_4_1,
    790: action_reduce_4_1,
    792: action_reduce_4_1,
    793: action_reduce_4_1,
    795: action_reduce_4_1,
    796: action_reduce_4_1,
    797: action_reduce_4_1,
    798: action_reduce_4_1,
    799: action_reduce_4_1,
    805: action_reduce_4_1,
    806: action_reduce_4_1,
    807: action_reduce_4_1,
    809: action_reduce_4_1,
    810: action_reduce_4_1,
    811: action_reduce_4_1,
    812: action_reduce_4_1,
    814: action_reduce_4_1,
    817: action_reduce_4_1,
}


def status_4(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_4_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_5_TERMINAL_ACTION_HASH = {
    0: action_reduce_5_1,
    23: action_reduce_5_1,
    91: action_reduce_5_1,
    791: action_shift_11,
}


def status_5(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_5_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_6_TERMINAL_ACTION_HASH = {
    115: action_shift_5,
    788: action_shift_12,
}


def status_6(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_6_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_7_TERMINAL_ACTION_HASH = {
    0: action_reduce_7_1,
    23: action_reduce_7_1,
    91: action_reduce_7_1,
    788: action_shift_13,
    791: action_shift_14,
}


def status_7(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_7_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_8_TERMINAL_ACTION_HASH = {
    0: action_reduce_8_1,
    23: action_reduce_8_1,
    75: action_reduce_8_1,
    91: action_reduce_8_1,
    103: action_reduce_8_1,
    115: action_reduce_8_1,
    117: action_reduce_8_1,
    763: action_reduce_8_1,
}


def status_8(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_8_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_9_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    23: action_shift_51,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
    791: action_shift_8,
}


def status_9(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_9_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_10_TERMINAL_ACTION_HASH = {
    0: action_reduce_10_1,
    23: action_reduce_10_1,
    75: action_reduce_10_1,
    91: action_reduce_10_1,
    103: action_reduce_10_1,
    115: action_reduce_10_1,
    117: action_reduce_10_1,
    763: action_reduce_10_1,
}


def status_10(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_10_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_11_TERMINAL_ACTION_HASH = {
    23: action_reduce_11_1,
}


def status_11(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_11_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_12_TERMINAL_ACTION_HASH = {
    23: action_reduce_12_1,
}


def status_12(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_12_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_13_TERMINAL_ACTION_HASH = {
    23: action_reduce_13_1,
}


def status_13(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_13_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_14_TERMINAL_ACTION_HASH = {
    23: action_reduce_14_1,
}


def status_14(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_14_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_15_TERMINAL_ACTION_HASH = {
    23: action_reduce_15_1,
}


def status_15(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_15_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_16_TERMINAL_ACTION_HASH = {
    0: action_reduce_16_1,
    91: action_reduce_16_1,
}


def status_16(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_16_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_17_TERMINAL_ACTION_HASH = {
    24: action_reduce_17_1,
    25: action_reduce_17_1,
}


def status_17(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_17_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_18_TERMINAL_ACTION_HASH = {
    24: action_reduce_18_1,
    25: action_reduce_18_1,
}


def status_18(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_18_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_19_TERMINAL_ACTION_HASH = {
    24: action_reduce_19_1,
    25: action_reduce_19_1,
}


def status_19(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_19_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_20_TERMINAL_ACTION_HASH = {
    24: action_reduce_20_1,
    25: action_reduce_20_1,
}


def status_20(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_20_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_21_TERMINAL_ACTION_HASH = {
    24: action_reduce_21_1,
    25: action_reduce_21_1,
}


def status_21(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_21_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_22_TERMINAL_ACTION_HASH = {
    24: action_reduce_22_1,
    25: action_reduce_22_1,
}


def status_22(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_22_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_23_TERMINAL_ACTION_HASH = {
    24: action_reduce_23_1,
    25: action_reduce_23_1,
}


def status_23(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_23_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_24_TERMINAL_ACTION_HASH = {
    24: action_reduce_24_1,
    25: action_reduce_24_1,
}


def status_24(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_24_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_25_TERMINAL_ACTION_HASH = {
    24: action_reduce_25_1,
    25: action_reduce_25_1,
}


def status_25(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_25_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_26_TERMINAL_ACTION_HASH = {
    43: action_shift_21,
    44: action_shift_22,
    49: action_shift_23,
}


def status_26(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_26_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_27_TERMINAL_ACTION_HASH = {
    24: action_shift_87,
    25: action_shift_26,
}


def status_27(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_27_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_28_TERMINAL_ACTION_HASH = {
    24: action_shift_130,
    25: action_shift_26,
}


def status_28(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_28_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_29_TERMINAL_ACTION_HASH = {
    0: action_reduce_29_1,
    91: action_reduce_29_1,
}


def status_29(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_29_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_30_TERMINAL_ACTION_HASH = {
    0: action_reduce_30_1,
    91: action_reduce_30_1,
}


def status_30(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_30_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_31_TERMINAL_ACTION_HASH = {
    0: action_reduce_30_1,
    91: action_reduce_30_1,
}


def status_31(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_31_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_32_TERMINAL_ACTION_HASH = {
    0: action_reduce_32_1,
    91: action_reduce_32_1,
}


def status_32(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_32_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_33_TERMINAL_ACTION_HASH = {
    0: action_reduce_33_1,
    91: action_reduce_33_1,
}


def status_33(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_33_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_34_TERMINAL_ACTION_HASH = {
    0: action_reduce_34_1,
}


def status_34(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_34_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_35_TERMINAL_ACTION_HASH = {
    0: action_reduce_35_1,
    91: action_shift_34,
}


def status_35(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_35_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_36_TERMINAL_ACTION_HASH = {
    0: action_reduce_36_1,
}


def status_36(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_36_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_37_TERMINAL_ACTION_HASH = {
    0: action_reduce_37_1,
    75: action_shift_36,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_40,
}


def status_37(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_37_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_38_TERMINAL_ACTION_HASH = {
    0: action_reduce_38_1,
}


def status_38(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_38_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_39_TERMINAL_ACTION_HASH = {
    0: action_reduce_39_1,
    91: action_shift_38,
}


def status_39(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_39_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_40_TERMINAL_ACTION_HASH = {
    0: action_reduce_40_1,
}


def status_40(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_40_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_41_TERMINAL_ACTION_HASH = {
    0: action_reduce_41_1,
}


def status_41(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_41_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_42_TERMINAL_ACTION_HASH = {
    0: action_reduce_42_1,
}


def status_42(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_42_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_43_TERMINAL_ACTION_HASH = {
    0: action_reduce_43_1,
    91: action_shift_42,
}


def status_43(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_43_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_44_TERMINAL_ACTION_HASH = {
    49: action_shift_16,
    51: action_shift_175,
    52: action_shift_176,
    53: action_shift_29,
    56: action_shift_430,
    57: action_shift_440,
    58: action_shift_444,
    60: action_shift_458,
    61: action_shift_465,
    62: action_shift_472,
    63: action_shift_477,
    64: action_shift_485,
    65: action_shift_496,
    68: action_shift_518,
    71: action_shift_535,
    72: action_shift_542,
    75: action_shift_637,
    77: action_shift_572,
    78: action_shift_575,
    79: action_shift_584,
    80: action_shift_589,
    81: action_shift_594,
    83: action_shift_595,
    84: action_shift_596,
    85: action_shift_597,
    87: action_shift_641,
    91: action_shift_33,
    92: action_shift_598,
    93: action_shift_599,
    95: action_shift_600,
    96: action_shift_601,
    97: action_shift_602,
    99: action_shift_603,
    100: action_shift_177,
    101: action_shift_178,
    103: action_shift_607,
    104: action_shift_608,
    107: action_shift_179,
    109: action_shift_180,
    110: action_shift_181,
    111: action_shift_182,
    113: action_shift_183,
    114: action_shift_184,
    117: action_shift_609,
    119: action_shift_610,
    120: action_shift_185,
    121: action_shift_186,
    122: action_shift_187,
    123: action_shift_611,
    124: action_shift_188,
    125: action_shift_189,
    126: action_shift_190,
    128: action_shift_191,
    130: action_shift_192,
    131: action_shift_193,
    132: action_shift_194,
    133: action_shift_612,
    134: action_shift_613,
    135: action_shift_195,
    136: action_shift_196,
    137: action_shift_197,
    138: action_shift_198,
    139: action_shift_199,
    140: action_shift_200,
    141: action_shift_201,
    143: action_shift_202,
    144: action_shift_203,
    146: action_shift_204,
    147: action_shift_205,
    148: action_shift_206,
    149: action_shift_614,
    150: action_shift_207,
    153: action_shift_208,
    158: action_shift_209,
    164: action_shift_210,
    165: action_shift_211,
    168: action_shift_212,
    169: action_shift_213,
    170: action_shift_214,
    171: action_shift_215,
    176: action_shift_615,
    181: action_shift_216,
    182: action_shift_217,
    183: action_shift_218,
    185: action_shift_219,
    190: action_shift_220,
    192: action_shift_221,
    193: action_shift_222,
    194: action_shift_223,
    195: action_shift_224,
    196: action_shift_225,
    200: action_shift_616,
    204: action_shift_226,
    205: action_shift_227,
    206: action_shift_228,
    211: action_shift_229,
    213: action_shift_230,
    214: action_shift_617,
    215: action_shift_231,
    216: action_shift_232,
    217: action_shift_233,
    218: action_shift_234,
    219: action_shift_235,
    220: action_shift_236,
    221: action_shift_237,
    222: action_shift_238,
    223: action_shift_239,
    225: action_shift_642,
    226: action_shift_240,
    227: action_shift_241,
    229: action_shift_242,
    230: action_shift_243,
    231: action_shift_604,
    234: action_shift_244,
    235: action_shift_245,
    237: action_shift_246,
    238: action_shift_247,
    239: action_shift_248,
    240: action_shift_249,
    241: action_shift_250,
    243: action_shift_251,
    244: action_shift_252,
    247: action_shift_643,
    248: action_shift_253,
    249: action_shift_254,
    250: action_shift_255,
    251: action_shift_256,
    253: action_shift_257,
    257: action_shift_618,
    258: action_shift_258,
    259: action_shift_619,
    263: action_shift_259,
    264: action_shift_260,
    266: action_shift_261,
    269: action_shift_262,
    270: action_shift_263,
    273: action_shift_264,
    274: action_shift_265,
    276: action_shift_266,
    277: action_shift_267,
    278: action_shift_268,
    279: action_shift_651,
    281: action_shift_269,
    285: action_shift_270,
    286: action_shift_271,
    287: action_shift_272,
    288: action_shift_620,
    289: action_shift_273,
    291: action_shift_621,
    293: action_shift_274,
    294: action_shift_275,
    295: action_shift_276,
    296: action_shift_277,
    297: action_shift_278,
    301: action_shift_279,
    304: action_shift_280,
    305: action_shift_622,
    307: action_shift_281,
    309: action_shift_282,
    311: action_shift_283,
    312: action_shift_284,
    313: action_shift_285,
    318: action_shift_286,
    319: action_shift_623,
    320: action_shift_287,
    331: action_shift_288,
    332: action_shift_289,
    333: action_shift_290,
    337: action_shift_291,
    339: action_shift_292,
    340: action_shift_293,
    343: action_shift_294,
    345: action_shift_295,
    347: action_shift_296,
    349: action_shift_297,
    352: action_shift_624,
    353: action_shift_298,
    359: action_shift_299,
    361: action_shift_300,
    362: action_shift_301,
    367: action_shift_302,
    368: action_shift_303,
    370: action_shift_652,
    374: action_shift_304,
    375: action_shift_305,
    376: action_shift_306,
    377: action_shift_307,
    378: action_shift_308,
    385: action_shift_309,
    386: action_shift_310,
    388: action_shift_311,
    389: action_shift_312,
    390: action_shift_313,
    391: action_shift_314,
    392: action_shift_315,
    393: action_shift_316,
    394: action_shift_317,
    395: action_shift_318,
    396: action_shift_319,
    397: action_shift_320,
    398: action_shift_321,
    399: action_shift_322,
    400: action_shift_323,
    401: action_shift_324,
    402: action_shift_325,
    403: action_shift_326,
    404: action_shift_327,
    405: action_shift_328,
    406: action_shift_329,
    408: action_shift_330,
    409: action_shift_331,
    410: action_shift_332,
    411: action_shift_333,
    414: action_shift_334,
    415: action_shift_335,
    416: action_shift_336,
    417: action_shift_337,
    418: action_shift_338,
    419: action_shift_339,
    420: action_shift_340,
    424: action_shift_341,
    425: action_shift_342,
    426: action_shift_343,
    427: action_shift_344,
    428: action_shift_345,
    430: action_shift_346,
    431: action_shift_347,
    434: action_shift_348,
    436: action_shift_349,
    438: action_shift_350,
    439: action_shift_351,
    440: action_shift_352,
    441: action_shift_353,
    442: action_shift_354,
    443: action_shift_355,
    444: action_shift_356,
    445: action_shift_357,
    446: action_shift_358,
    447: action_shift_359,
    449: action_shift_360,
    451: action_shift_361,
    452: action_shift_362,
    453: action_shift_363,
    454: action_shift_364,
    455: action_shift_365,
    456: action_shift_366,
    457: action_shift_625,
    458: action_shift_367,
    459: action_shift_644,
    462: action_shift_368,
    463: action_shift_369,
    468: action_shift_370,
    469: action_shift_371,
    471: action_shift_372,
    473: action_shift_373,
    474: action_shift_374,
    475: action_shift_375,
    476: action_shift_376,
    478: action_shift_377,
    479: action_shift_378,
    480: action_shift_379,
    484: action_shift_380,
    486: action_shift_381,
    490: action_shift_382,
    491: action_shift_383,
    492: action_shift_384,
    497: action_shift_385,
    498: action_shift_386,
    499: action_shift_387,
    501: action_shift_388,
    502: action_shift_389,
    503: action_shift_390,
    505: action_shift_391,
    506: action_shift_392,
    507: action_shift_393,
    508: action_shift_394,
    509: action_shift_395,
    511: action_shift_653,
    512: action_shift_654,
    513: action_shift_396,
    514: action_shift_397,
    515: action_shift_398,
    516: action_shift_399,
    517: action_shift_400,
    518: action_shift_401,
    519: action_shift_402,
    520: action_shift_626,
    521: action_shift_403,
    523: action_shift_627,
    524: action_shift_404,
    525: action_shift_405,
    527: action_shift_406,
    528: action_shift_407,
    530: action_shift_645,
    531: action_shift_408,
    532: action_shift_409,
    533: action_shift_410,
    534: action_shift_646,
    537: action_shift_411,
    538: action_shift_412,
    539: action_shift_413,
    540: action_shift_414,
    545: action_shift_415,
    548: action_shift_416,
    549: action_shift_417,
    551: action_shift_418,
    552: action_shift_419,
    553: action_shift_420,
    556: action_shift_421,
    557: action_shift_422,
    558: action_shift_423,
    559: action_shift_424,
    560: action_shift_425,
    561: action_shift_426,
    563: action_shift_647,
    564: action_shift_427,
    566: action_shift_428,
    567: action_shift_628,
    569: action_shift_429,
    571: action_shift_431,
    572: action_shift_432,
    573: action_shift_433,
    574: action_shift_434,
    575: action_shift_435,
    576: action_shift_436,
    577: action_shift_437,
    578: action_shift_438,
    579: action_shift_439,
    580: action_shift_648,
    582: action_shift_441,
    583: action_shift_629,
    585: action_shift_649,
    586: action_shift_442,
    587: action_shift_605,
    588: action_shift_443,
    590: action_shift_445,
    591: action_shift_446,
    593: action_shift_447,
    594: action_shift_448,
    595: action_shift_449,
    596: action_shift_450,
    597: action_shift_451,
    601: action_shift_452,
    602: action_shift_630,
    603: action_shift_453,
    604: action_shift_454,
    605: action_shift_455,
    608: action_shift_456,
    609: action_shift_457,
    611: action_shift_459,
    612: action_shift_460,
    613: action_shift_631,
    614: action_shift_461,
    617: action_shift_462,
    618: action_shift_463,
    619: action_shift_464,
    620: action_shift_466,
    621: action_shift_467,
    622: action_shift_468,
    623: action_shift_469,
    625: action_shift_470,
    629: action_shift_471,
    630: action_shift_473,
    631: action_shift_474,
    632: action_shift_655,
    634: action_shift_475,
    636: action_shift_606,
    638: action_shift_632,
    639: action_shift_476,
    640: action_shift_478,
    641: action_shift_633,
    642: action_shift_479,
    644: action_shift_480,
    645: action_shift_481,
    647: action_shift_482,
    648: action_shift_483,
    649: action_shift_484,
    650: action_shift_486,
    651: action_shift_487,
    652: action_shift_488,
    653: action_shift_489,
    654: action_shift_490,
    655: action_shift_491,
    656: action_shift_492,
    657: action_shift_493,
    658: action_shift_494,
    659: action_shift_495,
    660: action_shift_497,
    661: action_shift_498,
    662: action_shift_499,
    663: action_shift_500,
    664: action_shift_501,
    665: action_shift_502,
    666: action_shift_503,
    667: action_shift_504,
    668: action_shift_505,
    669: action_shift_506,
    670: action_shift_507,
    671: action_shift_508,
    672: action_shift_509,
    673: action_shift_510,
    674: action_shift_511,
    675: action_shift_512,
    682: action_shift_513,
    683: action_shift_514,
    684: action_shift_515,
    686: action_shift_516,
    688: action_shift_517,
    690: action_shift_519,
    699: action_shift_520,
    701: action_shift_521,
    702: action_shift_522,
    703: action_shift_634,
    705: action_shift_523,
    706: action_shift_524,
    707: action_shift_525,
    708: action_shift_526,
    709: action_shift_527,
    710: action_shift_635,
    711: action_shift_528,
    714: action_shift_529,
    715: action_shift_530,
    716: action_shift_531,
    717: action_shift_532,
    718: action_shift_533,
    719: action_shift_534,
    720: action_shift_536,
    721: action_shift_650,
    722: action_shift_537,
    723: action_shift_538,
    724: action_shift_539,
    727: action_shift_540,
    729: action_shift_541,
    730: action_shift_543,
    731: action_shift_544,
    732: action_shift_545,
    733: action_shift_546,
    735: action_shift_547,
    736: action_shift_548,
    738: action_shift_549,
    739: action_shift_550,
    740: action_shift_551,
    741: action_shift_552,
    742: action_shift_553,
    743: action_shift_554,
    747: action_shift_555,
    750: action_shift_556,
    752: action_shift_557,
    754: action_shift_636,
    755: action_shift_558,
    756: action_shift_559,
    757: action_shift_560,
    758: action_shift_561,
    759: action_shift_562,
    761: action_shift_563,
    762: action_shift_564,
    763: action_shift_638,
    764: action_shift_639,
    767: action_shift_565,
    769: action_shift_566,
    771: action_shift_567,
    773: action_shift_568,
    774: action_shift_569,
    777: action_shift_570,
    779: action_shift_571,
    784: action_shift_573,
    785: action_shift_574,
    790: action_shift_576,
    792: action_shift_577,
    793: action_shift_578,
    795: action_shift_579,
    796: action_shift_580,
    797: action_shift_581,
    798: action_shift_582,
    799: action_shift_583,
    805: action_shift_585,
    806: action_shift_586,
    807: action_shift_587,
    809: action_shift_588,
    810: action_shift_640,
    811: action_shift_590,
    812: action_shift_591,
    814: action_shift_592,
    817: action_shift_593,
}


def status_44(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_44_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_45_TERMINAL_ACTION_HASH = {
    0: action_reduce_45_1,
}


def status_45(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_45_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_46_TERMINAL_ACTION_HASH = {
    0: action_reduce_46_1,
}


def status_46(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_46_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_47_TERMINAL_ACTION_HASH = {
    0: action_reduce_47_1,
}


def status_47(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_47_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_48_TERMINAL_ACTION_HASH = {
    49: action_shift_16,
    51: action_shift_175,
    52: action_shift_176,
    53: action_shift_29,
    56: action_shift_430,
    57: action_shift_440,
    58: action_shift_444,
    60: action_shift_458,
    61: action_shift_465,
    62: action_shift_472,
    63: action_shift_477,
    64: action_shift_485,
    65: action_shift_496,
    68: action_shift_518,
    71: action_shift_535,
    72: action_shift_542,
    75: action_shift_637,
    77: action_shift_572,
    78: action_shift_575,
    79: action_shift_584,
    80: action_shift_589,
    81: action_shift_594,
    83: action_shift_595,
    84: action_shift_596,
    85: action_shift_597,
    87: action_shift_641,
    91: action_shift_33,
    92: action_shift_598,
    93: action_shift_599,
    95: action_shift_600,
    96: action_shift_601,
    97: action_shift_602,
    99: action_shift_603,
    100: action_shift_177,
    101: action_shift_178,
    103: action_shift_607,
    104: action_shift_608,
    107: action_shift_179,
    109: action_shift_180,
    110: action_shift_181,
    111: action_shift_182,
    113: action_shift_183,
    114: action_shift_184,
    117: action_shift_609,
    119: action_shift_610,
    120: action_shift_185,
    121: action_shift_186,
    122: action_shift_187,
    123: action_shift_611,
    124: action_shift_188,
    125: action_shift_189,
    126: action_shift_190,
    128: action_shift_191,
    130: action_shift_192,
    131: action_shift_193,
    132: action_shift_194,
    133: action_shift_612,
    134: action_shift_613,
    135: action_shift_195,
    136: action_shift_196,
    137: action_shift_197,
    138: action_shift_198,
    139: action_shift_199,
    140: action_shift_200,
    141: action_shift_201,
    143: action_shift_202,
    144: action_shift_203,
    146: action_shift_204,
    147: action_shift_205,
    148: action_shift_206,
    149: action_shift_614,
    150: action_shift_207,
    153: action_shift_208,
    158: action_shift_209,
    164: action_shift_210,
    165: action_shift_211,
    168: action_shift_212,
    169: action_shift_213,
    170: action_shift_214,
    171: action_shift_215,
    176: action_shift_615,
    181: action_shift_216,
    182: action_shift_217,
    183: action_shift_218,
    185: action_shift_219,
    190: action_shift_220,
    192: action_shift_221,
    193: action_shift_222,
    194: action_shift_223,
    195: action_shift_224,
    196: action_shift_225,
    200: action_shift_616,
    204: action_shift_226,
    205: action_shift_227,
    206: action_shift_228,
    211: action_shift_229,
    213: action_shift_230,
    214: action_shift_617,
    215: action_shift_231,
    216: action_shift_232,
    217: action_shift_233,
    218: action_shift_234,
    219: action_shift_235,
    220: action_shift_236,
    221: action_shift_237,
    222: action_shift_238,
    223: action_shift_239,
    225: action_shift_642,
    226: action_shift_240,
    227: action_shift_241,
    229: action_shift_242,
    230: action_shift_243,
    231: action_shift_604,
    234: action_shift_244,
    235: action_shift_245,
    237: action_shift_246,
    238: action_shift_247,
    239: action_shift_248,
    240: action_shift_249,
    241: action_shift_250,
    243: action_shift_251,
    244: action_shift_252,
    247: action_shift_643,
    248: action_shift_253,
    249: action_shift_254,
    250: action_shift_255,
    251: action_shift_256,
    253: action_shift_257,
    257: action_shift_618,
    258: action_shift_258,
    259: action_shift_619,
    263: action_shift_259,
    264: action_shift_260,
    266: action_shift_261,
    269: action_shift_262,
    270: action_shift_263,
    273: action_shift_264,
    274: action_shift_265,
    276: action_shift_266,
    277: action_shift_267,
    278: action_shift_268,
    279: action_shift_651,
    281: action_shift_269,
    285: action_shift_270,
    286: action_shift_271,
    287: action_shift_272,
    288: action_shift_620,
    289: action_shift_273,
    291: action_shift_621,
    293: action_shift_274,
    294: action_shift_275,
    295: action_shift_276,
    296: action_shift_277,
    297: action_shift_278,
    301: action_shift_279,
    304: action_shift_280,
    305: action_shift_622,
    307: action_shift_281,
    309: action_shift_282,
    311: action_shift_283,
    312: action_shift_284,
    313: action_shift_285,
    318: action_shift_286,
    319: action_shift_623,
    320: action_shift_287,
    331: action_shift_288,
    332: action_shift_289,
    333: action_shift_290,
    337: action_shift_291,
    339: action_shift_292,
    340: action_shift_293,
    343: action_shift_294,
    345: action_shift_295,
    347: action_shift_296,
    349: action_shift_297,
    352: action_shift_624,
    353: action_shift_298,
    359: action_shift_299,
    361: action_shift_300,
    362: action_shift_301,
    367: action_shift_302,
    368: action_shift_303,
    370: action_shift_652,
    374: action_shift_304,
    375: action_shift_305,
    376: action_shift_306,
    377: action_shift_307,
    378: action_shift_308,
    385: action_shift_309,
    386: action_shift_310,
    388: action_shift_311,
    389: action_shift_312,
    390: action_shift_313,
    391: action_shift_314,
    392: action_shift_315,
    393: action_shift_316,
    394: action_shift_317,
    395: action_shift_318,
    396: action_shift_319,
    397: action_shift_320,
    398: action_shift_321,
    399: action_shift_322,
    400: action_shift_323,
    401: action_shift_324,
    402: action_shift_325,
    403: action_shift_326,
    404: action_shift_327,
    405: action_shift_328,
    406: action_shift_329,
    408: action_shift_330,
    409: action_shift_331,
    410: action_shift_332,
    411: action_shift_333,
    414: action_shift_334,
    415: action_shift_335,
    416: action_shift_336,
    417: action_shift_337,
    418: action_shift_338,
    419: action_shift_339,
    420: action_shift_340,
    424: action_shift_341,
    425: action_shift_342,
    426: action_shift_343,
    427: action_shift_344,
    428: action_shift_345,
    430: action_shift_346,
    431: action_shift_347,
    434: action_shift_348,
    436: action_shift_349,
    438: action_shift_350,
    439: action_shift_351,
    440: action_shift_352,
    441: action_shift_353,
    442: action_shift_354,
    443: action_shift_355,
    444: action_shift_356,
    445: action_shift_357,
    446: action_shift_358,
    447: action_shift_359,
    449: action_shift_360,
    451: action_shift_361,
    452: action_shift_362,
    453: action_shift_363,
    454: action_shift_364,
    455: action_shift_365,
    456: action_shift_366,
    457: action_shift_625,
    458: action_shift_367,
    459: action_shift_644,
    462: action_shift_368,
    463: action_shift_369,
    468: action_shift_370,
    469: action_shift_371,
    471: action_shift_372,
    473: action_shift_373,
    474: action_shift_374,
    475: action_shift_375,
    476: action_shift_376,
    478: action_shift_377,
    479: action_shift_378,
    480: action_shift_379,
    484: action_shift_380,
    486: action_shift_381,
    490: action_shift_382,
    491: action_shift_383,
    492: action_shift_384,
    497: action_shift_385,
    498: action_shift_386,
    499: action_shift_387,
    501: action_shift_388,
    502: action_shift_389,
    503: action_shift_390,
    505: action_shift_391,
    506: action_shift_392,
    507: action_shift_393,
    508: action_shift_394,
    509: action_shift_395,
    511: action_shift_653,
    512: action_shift_654,
    513: action_shift_396,
    514: action_shift_397,
    515: action_shift_398,
    516: action_shift_399,
    517: action_shift_400,
    518: action_shift_401,
    519: action_shift_402,
    520: action_shift_626,
    521: action_shift_403,
    523: action_shift_627,
    524: action_shift_404,
    525: action_shift_405,
    527: action_shift_406,
    528: action_shift_407,
    530: action_shift_645,
    531: action_shift_408,
    532: action_shift_409,
    533: action_shift_410,
    534: action_shift_646,
    537: action_shift_411,
    538: action_shift_412,
    539: action_shift_413,
    540: action_shift_414,
    545: action_shift_415,
    548: action_shift_416,
    549: action_shift_417,
    551: action_shift_418,
    552: action_shift_419,
    553: action_shift_420,
    556: action_shift_421,
    557: action_shift_422,
    558: action_shift_423,
    559: action_shift_424,
    560: action_shift_425,
    561: action_shift_426,
    563: action_shift_647,
    564: action_shift_427,
    566: action_shift_428,
    567: action_shift_628,
    569: action_shift_429,
    571: action_shift_431,
    572: action_shift_432,
    573: action_shift_433,
    574: action_shift_434,
    575: action_shift_435,
    576: action_shift_436,
    577: action_shift_437,
    578: action_shift_438,
    579: action_shift_439,
    580: action_shift_648,
    582: action_shift_441,
    583: action_shift_629,
    585: action_shift_649,
    586: action_shift_442,
    587: action_shift_605,
    588: action_shift_443,
    590: action_shift_445,
    591: action_shift_446,
    593: action_shift_447,
    594: action_shift_448,
    595: action_shift_449,
    596: action_shift_450,
    597: action_shift_451,
    601: action_shift_452,
    602: action_shift_630,
    603: action_shift_453,
    604: action_shift_454,
    605: action_shift_455,
    608: action_shift_456,
    609: action_shift_457,
    611: action_shift_459,
    612: action_shift_460,
    613: action_shift_631,
    614: action_shift_461,
    617: action_shift_462,
    618: action_shift_463,
    619: action_shift_464,
    620: action_shift_466,
    621: action_shift_467,
    622: action_shift_468,
    623: action_shift_469,
    625: action_shift_470,
    629: action_shift_471,
    630: action_shift_473,
    631: action_shift_474,
    632: action_shift_655,
    634: action_shift_475,
    636: action_shift_606,
    638: action_shift_632,
    639: action_shift_476,
    640: action_shift_478,
    641: action_shift_633,
    642: action_shift_479,
    644: action_shift_480,
    645: action_shift_481,
    647: action_shift_482,
    648: action_shift_483,
    649: action_shift_484,
    650: action_shift_486,
    651: action_shift_487,
    652: action_shift_488,
    653: action_shift_489,
    654: action_shift_490,
    655: action_shift_491,
    656: action_shift_492,
    657: action_shift_493,
    658: action_shift_494,
    659: action_shift_495,
    660: action_shift_497,
    661: action_shift_498,
    662: action_shift_499,
    663: action_shift_500,
    664: action_shift_501,
    665: action_shift_502,
    666: action_shift_503,
    667: action_shift_504,
    668: action_shift_505,
    669: action_shift_506,
    670: action_shift_507,
    671: action_shift_508,
    672: action_shift_509,
    673: action_shift_510,
    674: action_shift_511,
    675: action_shift_512,
    682: action_shift_513,
    683: action_shift_514,
    684: action_shift_515,
    686: action_shift_516,
    688: action_shift_517,
    690: action_shift_519,
    699: action_shift_520,
    701: action_shift_521,
    702: action_shift_522,
    703: action_shift_634,
    705: action_shift_523,
    706: action_shift_524,
    707: action_shift_525,
    708: action_shift_526,
    709: action_shift_527,
    710: action_shift_635,
    711: action_shift_528,
    714: action_shift_529,
    715: action_shift_530,
    716: action_shift_531,
    717: action_shift_532,
    718: action_shift_533,
    719: action_shift_534,
    720: action_shift_536,
    721: action_shift_650,
    722: action_shift_537,
    723: action_shift_538,
    724: action_shift_539,
    727: action_shift_540,
    729: action_shift_541,
    730: action_shift_543,
    731: action_shift_544,
    732: action_shift_545,
    733: action_shift_546,
    735: action_shift_547,
    736: action_shift_548,
    738: action_shift_549,
    739: action_shift_550,
    740: action_shift_551,
    741: action_shift_552,
    742: action_shift_553,
    743: action_shift_554,
    747: action_shift_555,
    750: action_shift_556,
    752: action_shift_557,
    754: action_shift_636,
    755: action_shift_558,
    756: action_shift_559,
    757: action_shift_560,
    758: action_shift_561,
    759: action_shift_562,
    761: action_shift_563,
    762: action_shift_564,
    763: action_shift_638,
    764: action_shift_639,
    767: action_shift_565,
    769: action_shift_566,
    771: action_shift_567,
    773: action_shift_568,
    774: action_shift_569,
    777: action_shift_570,
    779: action_shift_571,
    784: action_shift_573,
    785: action_shift_574,
    790: action_shift_576,
    792: action_shift_577,
    793: action_shift_578,
    795: action_shift_579,
    796: action_shift_580,
    797: action_shift_581,
    798: action_shift_582,
    799: action_shift_583,
    805: action_shift_585,
    806: action_shift_586,
    807: action_shift_587,
    809: action_shift_588,
    810: action_shift_640,
    811: action_shift_590,
    812: action_shift_591,
    814: action_shift_592,
    817: action_shift_593,
}


def status_48(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_48_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_49_TERMINAL_ACTION_HASH = {
    0: action_reduce_49_1,
    75: action_reduce_49_1,
    91: action_reduce_49_1,
    103: action_reduce_49_1,
    115: action_reduce_49_1,
    117: action_reduce_49_1,
    638: action_reduce_49_1,
    763: action_reduce_49_1,
    770: action_reduce_49_1,
    816: action_reduce_49_1,
}


def status_49(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_49_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_50_TERMINAL_ACTION_HASH = {
    24: action_shift_49,
}


def status_50(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_50_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_51_TERMINAL_ACTION_HASH = {
    45: action_shift_18,
    46: action_shift_19,
    47: action_shift_17,
}


def status_51(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_51_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_52_TERMINAL_ACTION_HASH = {
    0: action_reduce_52_1,
    75: action_reduce_52_1,
    91: action_reduce_52_1,
    103: action_reduce_52_1,
    115: action_reduce_52_1,
    117: action_reduce_52_1,
    638: action_reduce_52_1,
    763: action_reduce_52_1,
    770: action_reduce_52_1,
    816: action_reduce_52_1,
}


def status_52(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_52_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_53_TERMINAL_ACTION_HASH = {
    0: action_reduce_53_1,
    638: action_reduce_53_1,
    770: action_reduce_53_1,
    816: action_reduce_53_1,
}


def status_53(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_53_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_54_TERMINAL_ACTION_HASH = {
    24: action_shift_53,
}


def status_54(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_54_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_55_TERMINAL_ACTION_HASH = {
    45: action_shift_18,
    46: action_shift_19,
    47: action_shift_17,
}


def status_55(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_55_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_56_TERMINAL_ACTION_HASH = {
    25: action_shift_55,
}


def status_56(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_56_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_57_TERMINAL_ACTION_HASH = {
    45: action_shift_18,
    46: action_shift_19,
    47: action_shift_17,
}


def status_57(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_57_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_58_TERMINAL_ACTION_HASH = {
    0: action_reduce_58_1,
    638: action_reduce_58_1,
    770: action_reduce_58_1,
    816: action_reduce_58_1,
}


def status_58(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_58_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_59_TERMINAL_ACTION_HASH = {
    0: action_reduce_59_1,
    638: action_reduce_59_1,
    770: action_reduce_59_1,
    816: action_reduce_59_1,
}


def status_59(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_59_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_60_TERMINAL_ACTION_HASH = {
    0: action_reduce_60_1,
    638: action_reduce_60_1,
    770: action_reduce_60_1,
    816: action_reduce_60_1,
}


def status_60(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_60_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_61_TERMINAL_ACTION_HASH = {
    24: action_shift_60,
}


def status_61(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_61_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_62_TERMINAL_ACTION_HASH = {
    45: action_shift_18,
    46: action_shift_19,
    47: action_shift_17,
}


def status_62(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_62_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_63_TERMINAL_ACTION_HASH = {
    24: action_shift_59,
    25: action_shift_62,
}


def status_63(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_63_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_64_TERMINAL_ACTION_HASH = {
    45: action_shift_18,
    46: action_shift_19,
    47: action_shift_17,
}


def status_64(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_64_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_65_TERMINAL_ACTION_HASH = {
    0: action_reduce_65_1,
    638: action_reduce_65_1,
    770: action_reduce_65_1,
    816: action_reduce_65_1,
}


def status_65(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_65_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_66_TERMINAL_ACTION_HASH = {
    0: action_reduce_66_1,
    638: action_reduce_66_1,
    770: action_reduce_66_1,
    816: action_reduce_66_1,
}


def status_66(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_66_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_67_TERMINAL_ACTION_HASH = {
    0: action_reduce_67_1,
    638: action_reduce_67_1,
    770: action_reduce_67_1,
    816: action_reduce_67_1,
}


def status_67(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_67_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_68_TERMINAL_ACTION_HASH = {
    0: action_reduce_68_1,
    638: action_reduce_68_1,
    770: action_reduce_68_1,
    816: action_reduce_68_1,
}


def status_68(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_68_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_69_TERMINAL_ACTION_HASH = {
    0: action_reduce_69_1,
    638: action_reduce_69_1,
    770: action_reduce_69_1,
    816: action_reduce_69_1,
}


def status_69(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_69_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_70_TERMINAL_ACTION_HASH = {
    0: action_reduce_70_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_70(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_70_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_71_TERMINAL_ACTION_HASH = {
    0: action_reduce_71_1,
}


def status_71(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_71_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_72_TERMINAL_ACTION_HASH = {
    0: action_reduce_72_1,
}


def status_72(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_72_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_73_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_73(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_73_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_74_TERMINAL_ACTION_HASH = {
    0: action_reduce_74_1,
}


def status_74(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_74_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_75_TERMINAL_ACTION_HASH = {
    0: action_reduce_75_1,
}


def status_75(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_75_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_76_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_76(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_76_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_77_TERMINAL_ACTION_HASH = {
    0: action_reduce_77_1,
}


def status_77(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_77_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_78_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_78(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_78_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_79_TERMINAL_ACTION_HASH = {
    0: action_reduce_79_1,
    23: action_shift_64,
    638: action_reduce_79_1,
    770: action_reduce_79_1,
    816: action_reduce_79_1,
}


def status_79(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_79_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_80_TERMINAL_ACTION_HASH = {
    0: action_reduce_80_1,
}


def status_80(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_80_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_81_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_81(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_81_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_82_TERMINAL_ACTION_HASH = {
    0: action_reduce_82_1,
    23: action_shift_57,
    638: action_reduce_82_1,
    770: action_reduce_82_1,
    816: action_reduce_82_1,
}


def status_82(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_82_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_83_TERMINAL_ACTION_HASH = {
    0: action_reduce_83_1,
}


def status_83(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_83_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_84_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_84(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_84_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_85_TERMINAL_ACTION_HASH = {
    0: action_reduce_82_1,
    23: action_shift_57,
    522: action_shift_82,
    638: action_reduce_82_1,
    770: action_reduce_82_1,
    816: action_reduce_82_1,
}


def status_85(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_85_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_86_TERMINAL_ACTION_HASH = {
    0: action_reduce_86_1,
}


def status_86(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_86_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_87_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_87(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_87_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_88_TERMINAL_ACTION_HASH = {
    43: action_shift_21,
    44: action_shift_22,
    49: action_shift_23,
}


def status_88(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_88_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_89_TERMINAL_ACTION_HASH = {
    23: action_shift_88,
}


def status_89(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_89_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_90_TERMINAL_ACTION_HASH = {
    0: action_reduce_90_1,
}


def status_90(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_90_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_91_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_91(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_91_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_92_TERMINAL_ACTION_HASH = {
    0: action_reduce_79_1,
    23: action_shift_64,
    638: action_reduce_79_1,
    770: action_reduce_79_1,
    816: action_reduce_79_1,
}


def status_92(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_92_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_93_TERMINAL_ACTION_HASH = {
    0: action_reduce_93_1,
}


def status_93(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_93_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_94_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_94(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_94_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_95_TERMINAL_ACTION_HASH = {
    0: action_reduce_79_1,
    23: action_shift_64,
    638: action_reduce_79_1,
    770: action_reduce_79_1,
    816: action_reduce_79_1,
}


def status_95(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_95_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_96_TERMINAL_ACTION_HASH = {
    0: action_reduce_96_1,
}


def status_96(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_96_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_97_TERMINAL_ACTION_HASH = {
    0: action_reduce_97_1,
}


def status_97(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_97_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_98_TERMINAL_ACTION_HASH = {
    0: action_reduce_98_1,
}


def status_98(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_98_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_99_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_99(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_99_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_100_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_100(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_100_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_101_TERMINAL_ACTION_HASH = {
    0: action_reduce_101_1,
}


def status_101(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_101_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_102_TERMINAL_ACTION_HASH = {
    0: action_reduce_102_1,
}


def status_102(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_102_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_103_TERMINAL_ACTION_HASH = {
    0: action_reduce_103_1,
}


def status_103(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_103_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_104_TERMINAL_ACTION_HASH = {
    0: action_reduce_104_1,
}


def status_104(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_104_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_105_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_105(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_105_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_106_TERMINAL_ACTION_HASH = {
    0: action_reduce_106_1,
}


def status_106(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_106_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_107_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_3,
    117: action_shift_4,
    763: action_shift_39,
    787: action_shift_103,
    788: action_shift_10,
}


def status_107(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_107_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_108_TERMINAL_ACTION_HASH = {
    0: action_reduce_108_1,
}


def status_108(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_108_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_109_TERMINAL_ACTION_HASH = {
    0: action_reduce_109_1,
}


def status_109(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_109_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_110_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_110(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_110_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_111_TERMINAL_ACTION_HASH = {
    0: action_reduce_111_1,
}


def status_111(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_111_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_112_TERMINAL_ACTION_HASH = {
    0: action_reduce_112_1,
}


def status_112(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_112_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_113_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_113(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_113_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_114_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_114(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_114_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_115_TERMINAL_ACTION_HASH = {
    0: action_reduce_115_1,
}


def status_115(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_115_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_116_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_116(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_116_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_117_TERMINAL_ACTION_HASH = {
    0: action_reduce_117_1,
}


def status_117(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_117_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_118_TERMINAL_ACTION_HASH = {
    0: action_reduce_118_1,
}


def status_118(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_118_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_119_TERMINAL_ACTION_HASH = {
    0: action_reduce_119_1,
}


def status_119(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_119_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_120_TERMINAL_ACTION_HASH = {
    0: action_reduce_120_1,
}


def status_120(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_120_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_121_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_121(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_121_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_122_TERMINAL_ACTION_HASH = {
    0: action_reduce_79_1,
    23: action_shift_64,
    638: action_reduce_79_1,
    770: action_reduce_79_1,
    816: action_reduce_79_1,
}


def status_122(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_122_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_123_TERMINAL_ACTION_HASH = {
    0: action_reduce_123_1,
}


def status_123(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_123_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_124_TERMINAL_ACTION_HASH = {
    0: action_reduce_124_1,
}


def status_124(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_124_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_125_TERMINAL_ACTION_HASH = {
    0: action_reduce_125_1,
}


def status_125(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_125_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_126_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_126(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_126_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_127_TERMINAL_ACTION_HASH = {
    0: action_reduce_82_1,
    23: action_shift_57,
    638: action_reduce_82_1,
    770: action_reduce_82_1,
    816: action_reduce_82_1,
}


def status_127(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_127_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_128_TERMINAL_ACTION_HASH = {
    0: action_reduce_128_1,
}


def status_128(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_128_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_129_TERMINAL_ACTION_HASH = {
    0: action_reduce_129_1,
}


def status_129(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_129_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_130_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_130(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_130_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_131_TERMINAL_ACTION_HASH = {
    43: action_shift_21,
    44: action_shift_22,
    49: action_shift_23,
}


def status_131(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_131_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_132_TERMINAL_ACTION_HASH = {
    23: action_shift_131,
}


def status_132(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_132_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_133_TERMINAL_ACTION_HASH = {
    0: action_reduce_133_1,
}


def status_133(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_133_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_134_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_134(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_134_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_135_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_135(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_135_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_136_TERMINAL_ACTION_HASH = {
    0: action_reduce_136_1,
}


def status_136(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_136_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_137_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_137(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_137_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_138_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    75: action_reduce_100_1,
    91: action_reduce_100_1,
    103: action_reduce_100_1,
    115: action_reduce_100_1,
    117: action_reduce_100_1,
    763: action_reduce_100_1,
}


def status_138(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_138_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_139_TERMINAL_ACTION_HASH = {
    0: action_reduce_139_1,
}


def status_139(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_139_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_140_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_140(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_140_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_141_TERMINAL_ACTION_HASH = {
    0: action_reduce_141_1,
}


def status_141(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_141_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_142_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_142(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_142_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_143_TERMINAL_ACTION_HASH = {
    0: action_reduce_143_1,
}


def status_143(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_143_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_144_TERMINAL_ACTION_HASH = {
    0: action_reduce_144_1,
}


def status_144(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_144_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_145_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_145(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_145_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_146_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_146(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_146_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_147_TERMINAL_ACTION_HASH = {
    0: action_reduce_147_1,
}


def status_147(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_147_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_148_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_148(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_148_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_149_TERMINAL_ACTION_HASH = {
    0: action_reduce_149_1,
}


def status_149(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_149_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_150_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_150(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_150_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_151_TERMINAL_ACTION_HASH = {
    0: action_reduce_151_1,
}


def status_151(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_151_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_152_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_152(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_152_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_153_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_153(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_153_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_154_TERMINAL_ACTION_HASH = {
    0: action_reduce_154_1,
}


def status_154(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_154_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_155_TERMINAL_ACTION_HASH = {
    0: action_reduce_155_1,
    91: action_shift_154,
}


def status_155(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_155_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_156_TERMINAL_ACTION_HASH = {
    0: action_reduce_156_1,
}


def status_156(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_156_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_157_TERMINAL_ACTION_HASH = {
    0: action_reduce_157_1,
    23: action_shift_51,
    91: action_shift_156,
}


def status_157(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_157_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_158_TERMINAL_ACTION_HASH = {
    0: action_reduce_158_1,
}


def status_158(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_158_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_159_TERMINAL_ACTION_HASH = {
    0: action_reduce_9_1,
    75: action_shift_35,
    91: action_shift_37,
    103: action_shift_41,
    115: action_shift_2,
    117: action_shift_4,
    763: action_shift_39,
}


def status_159(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_159_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_160_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_160(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_160_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_161_TERMINAL_ACTION_HASH = {
    0: action_reduce_161_1,
}


def status_161(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_161_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_162_TERMINAL_ACTION_HASH = {
    0: action_reduce_162_1,
    91: action_shift_161,
}


def status_162(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_162_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_163_TERMINAL_ACTION_HASH = {
    23: action_shift_51,
}


def status_163(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_163_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_164_TERMINAL_ACTION_HASH = {
    0: action_reduce_164_1,
}


def status_164(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_164_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_165_TERMINAL_ACTION_HASH = {
    0: action_reduce_78_1,
    638: action_shift_65,
    770: action_shift_66,
    816: action_shift_67,
}


def status_165(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_165_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_166_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
    638: action_reduce_100_1,
    770: action_reduce_100_1,
    816: action_reduce_100_1,
}


def status_166(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_166_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_167_TERMINAL_ACTION_HASH = {
    0: action_reduce_167_1,
}


def status_167(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_167_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_168_TERMINAL_ACTION_HASH = {
    0: action_reduce_168_1,
    23: action_shift_51,
}


def status_168(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_168_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_169_TERMINAL_ACTION_HASH = {
    0: action_reduce_169_1,
}


def status_169(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_169_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_170_TERMINAL_ACTION_HASH = {
    0: action_reduce_170_1,
    23: action_shift_51,
}


def status_170(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_170_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_171_TERMINAL_ACTION_HASH = {
    0: action_reduce_171_1,
}


def status_171(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_171_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_172_TERMINAL_ACTION_HASH = {
    0: action_reduce_100_1,
    23: action_shift_51,
}


def status_172(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_172_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_173_TERMINAL_ACTION_HASH = {
    0: action_reduce_173_1,
}


def status_173(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_173_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_174_TERMINAL_ACTION_HASH = {
    0: action_reduce_174_1,
}


def status_174(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_174_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_175_TERMINAL_ACTION_HASH = {
    0: action_reduce_175_1,
    91: action_reduce_175_1,
}


def status_175(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_175_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_176_TERMINAL_ACTION_HASH = {
    0: action_reduce_176_1,
    91: action_reduce_176_1,
}


def status_176(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_176_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_177_TERMINAL_ACTION_HASH = {
    0: action_reduce_177_1,
    91: action_reduce_177_1,
}


def status_177(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_177_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_178_TERMINAL_ACTION_HASH = {
    0: action_reduce_178_1,
    91: action_reduce_178_1,
}


def status_178(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_178_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_179_TERMINAL_ACTION_HASH = {
    0: action_reduce_179_1,
    91: action_reduce_179_1,
}


def status_179(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_179_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_180_TERMINAL_ACTION_HASH = {
    0: action_reduce_180_1,
    91: action_reduce_180_1,
}


def status_180(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_180_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_181_TERMINAL_ACTION_HASH = {
    0: action_reduce_181_1,
    91: action_reduce_181_1,
}


def status_181(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_181_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_182_TERMINAL_ACTION_HASH = {
    0: action_reduce_182_1,
    91: action_reduce_182_1,
}


def status_182(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_182_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_183_TERMINAL_ACTION_HASH = {
    0: action_reduce_183_1,
    91: action_reduce_183_1,
}


def status_183(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_183_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_184_TERMINAL_ACTION_HASH = {
    0: action_reduce_184_1,
    91: action_reduce_184_1,
}


def status_184(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_184_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_185_TERMINAL_ACTION_HASH = {
    0: action_reduce_185_1,
    91: action_reduce_185_1,
}


def status_185(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_185_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_186_TERMINAL_ACTION_HASH = {
    0: action_reduce_186_1,
    91: action_reduce_186_1,
}


def status_186(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_186_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_187_TERMINAL_ACTION_HASH = {
    0: action_reduce_187_1,
    91: action_reduce_187_1,
}


def status_187(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_187_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_188_TERMINAL_ACTION_HASH = {
    0: action_reduce_188_1,
    91: action_reduce_188_1,
}


def status_188(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_188_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_189_TERMINAL_ACTION_HASH = {
    0: action_reduce_189_1,
    91: action_reduce_189_1,
}


def status_189(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_189_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_190_TERMINAL_ACTION_HASH = {
    0: action_reduce_190_1,
    91: action_reduce_190_1,
}


def status_190(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_190_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_191_TERMINAL_ACTION_HASH = {
    0: action_reduce_191_1,
    91: action_reduce_191_1,
}


def status_191(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_191_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_192_TERMINAL_ACTION_HASH = {
    0: action_reduce_192_1,
    91: action_reduce_192_1,
}


def status_192(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_192_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_193_TERMINAL_ACTION_HASH = {
    0: action_reduce_193_1,
    91: action_reduce_193_1,
}


def status_193(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_193_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_194_TERMINAL_ACTION_HASH = {
    0: action_reduce_194_1,
    91: action_reduce_194_1,
}


def status_194(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_194_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_195_TERMINAL_ACTION_HASH = {
    0: action_reduce_195_1,
    91: action_reduce_195_1,
}


def status_195(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_195_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_196_TERMINAL_ACTION_HASH = {
    0: action_reduce_196_1,
    91: action_reduce_196_1,
}


def status_196(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_196_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_197_TERMINAL_ACTION_HASH = {
    0: action_reduce_197_1,
    91: action_reduce_197_1,
}


def status_197(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_197_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_198_TERMINAL_ACTION_HASH = {
    0: action_reduce_198_1,
    91: action_reduce_198_1,
}


def status_198(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_198_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_199_TERMINAL_ACTION_HASH = {
    0: action_reduce_199_1,
    91: action_reduce_199_1,
}


def status_199(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_199_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_200_TERMINAL_ACTION_HASH = {
    0: action_reduce_200_1,
    91: action_reduce_200_1,
}


def status_200(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_200_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_201_TERMINAL_ACTION_HASH = {
    0: action_reduce_201_1,
    91: action_reduce_201_1,
}


def status_201(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_201_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_202_TERMINAL_ACTION_HASH = {
    0: action_reduce_202_1,
    91: action_reduce_202_1,
}


def status_202(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_202_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_203_TERMINAL_ACTION_HASH = {
    0: action_reduce_203_1,
    91: action_reduce_203_1,
}


def status_203(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_203_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_204_TERMINAL_ACTION_HASH = {
    0: action_reduce_204_1,
    91: action_reduce_204_1,
}


def status_204(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_204_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_205_TERMINAL_ACTION_HASH = {
    0: action_reduce_205_1,
    91: action_reduce_205_1,
}


def status_205(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_205_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_206_TERMINAL_ACTION_HASH = {
    0: action_reduce_206_1,
    91: action_reduce_206_1,
}


def status_206(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_206_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_207_TERMINAL_ACTION_HASH = {
    0: action_reduce_207_1,
    91: action_reduce_207_1,
}


def status_207(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_207_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_208_TERMINAL_ACTION_HASH = {
    0: action_reduce_208_1,
    91: action_reduce_208_1,
}


def status_208(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_208_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_209_TERMINAL_ACTION_HASH = {
    0: action_reduce_209_1,
    91: action_reduce_209_1,
}


def status_209(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_209_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_210_TERMINAL_ACTION_HASH = {
    0: action_reduce_210_1,
    91: action_reduce_210_1,
}


def status_210(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_210_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_211_TERMINAL_ACTION_HASH = {
    0: action_reduce_211_1,
    91: action_reduce_211_1,
}


def status_211(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_211_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_212_TERMINAL_ACTION_HASH = {
    0: action_reduce_212_1,
    91: action_reduce_212_1,
}


def status_212(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_212_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_213_TERMINAL_ACTION_HASH = {
    0: action_reduce_213_1,
    91: action_reduce_213_1,
}


def status_213(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_213_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_214_TERMINAL_ACTION_HASH = {
    0: action_reduce_214_1,
    91: action_reduce_214_1,
}


def status_214(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_214_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_215_TERMINAL_ACTION_HASH = {
    0: action_reduce_215_1,
    91: action_reduce_215_1,
}


def status_215(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_215_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_216_TERMINAL_ACTION_HASH = {
    0: action_reduce_216_1,
    91: action_reduce_216_1,
}


def status_216(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_216_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_217_TERMINAL_ACTION_HASH = {
    0: action_reduce_217_1,
    91: action_reduce_217_1,
}


def status_217(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_217_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_218_TERMINAL_ACTION_HASH = {
    0: action_reduce_218_1,
    91: action_reduce_218_1,
}


def status_218(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_218_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_219_TERMINAL_ACTION_HASH = {
    0: action_reduce_219_1,
    91: action_reduce_219_1,
}


def status_219(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_219_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_220_TERMINAL_ACTION_HASH = {
    0: action_reduce_220_1,
    91: action_reduce_220_1,
}


def status_220(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_220_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_221_TERMINAL_ACTION_HASH = {
    0: action_reduce_221_1,
    91: action_reduce_221_1,
}


def status_221(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_221_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_222_TERMINAL_ACTION_HASH = {
    0: action_reduce_222_1,
    91: action_reduce_222_1,
}


def status_222(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_222_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_223_TERMINAL_ACTION_HASH = {
    0: action_reduce_223_1,
    91: action_reduce_223_1,
}


def status_223(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_223_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_224_TERMINAL_ACTION_HASH = {
    0: action_reduce_224_1,
    91: action_reduce_224_1,
}


def status_224(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_224_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_225_TERMINAL_ACTION_HASH = {
    0: action_reduce_225_1,
    91: action_reduce_225_1,
}


def status_225(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_225_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_226_TERMINAL_ACTION_HASH = {
    0: action_reduce_226_1,
    91: action_reduce_226_1,
}


def status_226(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_226_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_227_TERMINAL_ACTION_HASH = {
    0: action_reduce_227_1,
    91: action_reduce_227_1,
}


def status_227(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_227_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_228_TERMINAL_ACTION_HASH = {
    0: action_reduce_228_1,
    91: action_reduce_228_1,
}


def status_228(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_228_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_229_TERMINAL_ACTION_HASH = {
    0: action_reduce_229_1,
    91: action_reduce_229_1,
}


def status_229(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_229_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_230_TERMINAL_ACTION_HASH = {
    0: action_reduce_230_1,
    91: action_reduce_230_1,
}


def status_230(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_230_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_231_TERMINAL_ACTION_HASH = {
    0: action_reduce_231_1,
    91: action_reduce_231_1,
}


def status_231(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_231_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_232_TERMINAL_ACTION_HASH = {
    0: action_reduce_232_1,
    91: action_reduce_232_1,
}


def status_232(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_232_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_233_TERMINAL_ACTION_HASH = {
    0: action_reduce_233_1,
    91: action_reduce_233_1,
}


def status_233(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_233_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_234_TERMINAL_ACTION_HASH = {
    0: action_reduce_234_1,
    91: action_reduce_234_1,
}


def status_234(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_234_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_235_TERMINAL_ACTION_HASH = {
    0: action_reduce_235_1,
    91: action_reduce_235_1,
}


def status_235(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_235_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_236_TERMINAL_ACTION_HASH = {
    0: action_reduce_236_1,
    91: action_reduce_236_1,
}


def status_236(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_236_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_237_TERMINAL_ACTION_HASH = {
    0: action_reduce_237_1,
    91: action_reduce_237_1,
}


def status_237(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_237_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_238_TERMINAL_ACTION_HASH = {
    0: action_reduce_238_1,
    91: action_reduce_238_1,
}


def status_238(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_238_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_239_TERMINAL_ACTION_HASH = {
    0: action_reduce_239_1,
    91: action_reduce_239_1,
}


def status_239(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_239_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_240_TERMINAL_ACTION_HASH = {
    0: action_reduce_240_1,
    91: action_reduce_240_1,
}


def status_240(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_240_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_241_TERMINAL_ACTION_HASH = {
    0: action_reduce_241_1,
    91: action_reduce_241_1,
}


def status_241(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_241_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_242_TERMINAL_ACTION_HASH = {
    0: action_reduce_242_1,
    91: action_reduce_242_1,
}


def status_242(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_242_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_243_TERMINAL_ACTION_HASH = {
    0: action_reduce_243_1,
    91: action_reduce_243_1,
}


def status_243(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_243_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_244_TERMINAL_ACTION_HASH = {
    0: action_reduce_244_1,
    91: action_reduce_244_1,
}


def status_244(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_244_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_245_TERMINAL_ACTION_HASH = {
    0: action_reduce_245_1,
    91: action_reduce_245_1,
}


def status_245(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_245_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_246_TERMINAL_ACTION_HASH = {
    0: action_reduce_246_1,
    91: action_reduce_246_1,
}


def status_246(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_246_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_247_TERMINAL_ACTION_HASH = {
    0: action_reduce_247_1,
    91: action_reduce_247_1,
}


def status_247(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_247_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_248_TERMINAL_ACTION_HASH = {
    0: action_reduce_248_1,
    91: action_reduce_248_1,
}


def status_248(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_248_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_249_TERMINAL_ACTION_HASH = {
    0: action_reduce_249_1,
    91: action_reduce_249_1,
}


def status_249(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_249_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_250_TERMINAL_ACTION_HASH = {
    0: action_reduce_250_1,
    91: action_reduce_250_1,
}


def status_250(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_250_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_251_TERMINAL_ACTION_HASH = {
    0: action_reduce_251_1,
    91: action_reduce_251_1,
}


def status_251(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_251_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_252_TERMINAL_ACTION_HASH = {
    0: action_reduce_252_1,
    91: action_reduce_252_1,
}


def status_252(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_252_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_253_TERMINAL_ACTION_HASH = {
    0: action_reduce_253_1,
    91: action_reduce_253_1,
}


def status_253(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_253_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_254_TERMINAL_ACTION_HASH = {
    0: action_reduce_254_1,
    91: action_reduce_254_1,
}


def status_254(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_254_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_255_TERMINAL_ACTION_HASH = {
    0: action_reduce_255_1,
    91: action_reduce_255_1,
}


def status_255(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_255_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_256_TERMINAL_ACTION_HASH = {
    0: action_reduce_256_1,
    91: action_reduce_256_1,
}


def status_256(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_256_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_257_TERMINAL_ACTION_HASH = {
    0: action_reduce_257_1,
    91: action_reduce_257_1,
}


def status_257(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_257_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_258_TERMINAL_ACTION_HASH = {
    0: action_reduce_258_1,
    91: action_reduce_258_1,
}


def status_258(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_258_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_259_TERMINAL_ACTION_HASH = {
    0: action_reduce_259_1,
    91: action_reduce_259_1,
}


def status_259(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_259_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_260_TERMINAL_ACTION_HASH = {
    0: action_reduce_260_1,
    91: action_reduce_260_1,
}


def status_260(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_260_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_261_TERMINAL_ACTION_HASH = {
    0: action_reduce_261_1,
    91: action_reduce_261_1,
}


def status_261(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_261_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_262_TERMINAL_ACTION_HASH = {
    0: action_reduce_262_1,
    91: action_reduce_262_1,
}


def status_262(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_262_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_263_TERMINAL_ACTION_HASH = {
    0: action_reduce_263_1,
    91: action_reduce_263_1,
}


def status_263(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_263_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_264_TERMINAL_ACTION_HASH = {
    0: action_reduce_264_1,
    91: action_reduce_264_1,
}


def status_264(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_264_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_265_TERMINAL_ACTION_HASH = {
    0: action_reduce_265_1,
    91: action_reduce_265_1,
}


def status_265(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_265_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_266_TERMINAL_ACTION_HASH = {
    0: action_reduce_266_1,
    91: action_reduce_266_1,
}


def status_266(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_266_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_267_TERMINAL_ACTION_HASH = {
    0: action_reduce_267_1,
    91: action_reduce_267_1,
}


def status_267(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_267_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_268_TERMINAL_ACTION_HASH = {
    0: action_reduce_268_1,
    91: action_reduce_268_1,
}


def status_268(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_268_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_269_TERMINAL_ACTION_HASH = {
    0: action_reduce_269_1,
    91: action_reduce_269_1,
}


def status_269(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_269_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_270_TERMINAL_ACTION_HASH = {
    0: action_reduce_270_1,
    91: action_reduce_270_1,
}


def status_270(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_270_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_271_TERMINAL_ACTION_HASH = {
    0: action_reduce_271_1,
    91: action_reduce_271_1,
}


def status_271(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_271_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_272_TERMINAL_ACTION_HASH = {
    0: action_reduce_272_1,
    91: action_reduce_272_1,
}


def status_272(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_272_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_273_TERMINAL_ACTION_HASH = {
    0: action_reduce_273_1,
    91: action_reduce_273_1,
}


def status_273(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_273_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_274_TERMINAL_ACTION_HASH = {
    0: action_reduce_274_1,
    91: action_reduce_274_1,
}


def status_274(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_274_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_275_TERMINAL_ACTION_HASH = {
    0: action_reduce_275_1,
    91: action_reduce_275_1,
}


def status_275(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_275_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_276_TERMINAL_ACTION_HASH = {
    0: action_reduce_276_1,
    91: action_reduce_276_1,
}


def status_276(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_276_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_277_TERMINAL_ACTION_HASH = {
    0: action_reduce_277_1,
    91: action_reduce_277_1,
}


def status_277(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_277_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_278_TERMINAL_ACTION_HASH = {
    0: action_reduce_278_1,
    91: action_reduce_278_1,
}


def status_278(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_278_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_279_TERMINAL_ACTION_HASH = {
    0: action_reduce_279_1,
    91: action_reduce_279_1,
}


def status_279(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_279_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_280_TERMINAL_ACTION_HASH = {
    0: action_reduce_280_1,
    91: action_reduce_280_1,
}


def status_280(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_280_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_281_TERMINAL_ACTION_HASH = {
    0: action_reduce_281_1,
    91: action_reduce_281_1,
}


def status_281(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_281_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_282_TERMINAL_ACTION_HASH = {
    0: action_reduce_282_1,
    91: action_reduce_282_1,
}


def status_282(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_282_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_283_TERMINAL_ACTION_HASH = {
    0: action_reduce_283_1,
    91: action_reduce_283_1,
}


def status_283(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_283_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_284_TERMINAL_ACTION_HASH = {
    0: action_reduce_284_1,
    91: action_reduce_284_1,
}


def status_284(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_284_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_285_TERMINAL_ACTION_HASH = {
    0: action_reduce_285_1,
    91: action_reduce_285_1,
}


def status_285(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_285_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_286_TERMINAL_ACTION_HASH = {
    0: action_reduce_286_1,
    91: action_reduce_286_1,
}


def status_286(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_286_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_287_TERMINAL_ACTION_HASH = {
    0: action_reduce_287_1,
    91: action_reduce_287_1,
}


def status_287(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_287_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_288_TERMINAL_ACTION_HASH = {
    0: action_reduce_288_1,
    91: action_reduce_288_1,
}


def status_288(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_288_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_289_TERMINAL_ACTION_HASH = {
    0: action_reduce_289_1,
    91: action_reduce_289_1,
}


def status_289(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_289_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_290_TERMINAL_ACTION_HASH = {
    0: action_reduce_290_1,
    91: action_reduce_290_1,
}


def status_290(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_290_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_291_TERMINAL_ACTION_HASH = {
    0: action_reduce_291_1,
    91: action_reduce_291_1,
}


def status_291(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_291_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_292_TERMINAL_ACTION_HASH = {
    0: action_reduce_292_1,
    91: action_reduce_292_1,
}


def status_292(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_292_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_293_TERMINAL_ACTION_HASH = {
    0: action_reduce_293_1,
    91: action_reduce_293_1,
}


def status_293(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_293_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_294_TERMINAL_ACTION_HASH = {
    0: action_reduce_294_1,
    91: action_reduce_294_1,
}


def status_294(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_294_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_295_TERMINAL_ACTION_HASH = {
    0: action_reduce_295_1,
    91: action_reduce_295_1,
}


def status_295(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_295_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_296_TERMINAL_ACTION_HASH = {
    0: action_reduce_296_1,
    91: action_reduce_296_1,
}


def status_296(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_296_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_297_TERMINAL_ACTION_HASH = {
    0: action_reduce_297_1,
    91: action_reduce_297_1,
}


def status_297(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_297_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_298_TERMINAL_ACTION_HASH = {
    0: action_reduce_298_1,
    91: action_reduce_298_1,
}


def status_298(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_298_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_299_TERMINAL_ACTION_HASH = {
    0: action_reduce_299_1,
    91: action_reduce_299_1,
}


def status_299(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_299_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_300_TERMINAL_ACTION_HASH = {
    0: action_reduce_300_1,
    91: action_reduce_300_1,
}


def status_300(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_300_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_301_TERMINAL_ACTION_HASH = {
    0: action_reduce_301_1,
    91: action_reduce_301_1,
}


def status_301(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_301_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_302_TERMINAL_ACTION_HASH = {
    0: action_reduce_302_1,
    91: action_reduce_302_1,
}


def status_302(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_302_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_303_TERMINAL_ACTION_HASH = {
    0: action_reduce_303_1,
    91: action_reduce_303_1,
}


def status_303(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_303_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_304_TERMINAL_ACTION_HASH = {
    0: action_reduce_304_1,
    91: action_reduce_304_1,
}


def status_304(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_304_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_305_TERMINAL_ACTION_HASH = {
    0: action_reduce_305_1,
    91: action_reduce_305_1,
}


def status_305(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_305_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_306_TERMINAL_ACTION_HASH = {
    0: action_reduce_306_1,
    91: action_reduce_306_1,
}


def status_306(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_306_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_307_TERMINAL_ACTION_HASH = {
    0: action_reduce_307_1,
    91: action_reduce_307_1,
}


def status_307(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_307_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_308_TERMINAL_ACTION_HASH = {
    0: action_reduce_308_1,
    91: action_reduce_308_1,
}


def status_308(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_308_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_309_TERMINAL_ACTION_HASH = {
    0: action_reduce_309_1,
    91: action_reduce_309_1,
}


def status_309(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_309_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_310_TERMINAL_ACTION_HASH = {
    0: action_reduce_310_1,
    91: action_reduce_310_1,
}


def status_310(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_310_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_311_TERMINAL_ACTION_HASH = {
    0: action_reduce_311_1,
    91: action_reduce_311_1,
}


def status_311(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_311_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_312_TERMINAL_ACTION_HASH = {
    0: action_reduce_312_1,
    91: action_reduce_312_1,
}


def status_312(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_312_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_313_TERMINAL_ACTION_HASH = {
    0: action_reduce_313_1,
    91: action_reduce_313_1,
}


def status_313(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_313_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_314_TERMINAL_ACTION_HASH = {
    0: action_reduce_314_1,
    91: action_reduce_314_1,
}


def status_314(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_314_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_315_TERMINAL_ACTION_HASH = {
    0: action_reduce_315_1,
    91: action_reduce_315_1,
}


def status_315(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_315_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_316_TERMINAL_ACTION_HASH = {
    0: action_reduce_316_1,
    91: action_reduce_316_1,
}


def status_316(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_316_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_317_TERMINAL_ACTION_HASH = {
    0: action_reduce_317_1,
    91: action_reduce_317_1,
}


def status_317(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_317_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_318_TERMINAL_ACTION_HASH = {
    0: action_reduce_318_1,
    91: action_reduce_318_1,
}


def status_318(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_318_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_319_TERMINAL_ACTION_HASH = {
    0: action_reduce_319_1,
    91: action_reduce_319_1,
}


def status_319(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_319_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_320_TERMINAL_ACTION_HASH = {
    0: action_reduce_320_1,
    91: action_reduce_320_1,
}


def status_320(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_320_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_321_TERMINAL_ACTION_HASH = {
    0: action_reduce_321_1,
    91: action_reduce_321_1,
}


def status_321(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_321_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_322_TERMINAL_ACTION_HASH = {
    0: action_reduce_322_1,
    91: action_reduce_322_1,
}


def status_322(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_322_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_323_TERMINAL_ACTION_HASH = {
    0: action_reduce_323_1,
    91: action_reduce_323_1,
}


def status_323(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_323_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_324_TERMINAL_ACTION_HASH = {
    0: action_reduce_324_1,
    91: action_reduce_324_1,
}


def status_324(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_324_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_325_TERMINAL_ACTION_HASH = {
    0: action_reduce_325_1,
    91: action_reduce_325_1,
}


def status_325(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_325_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_326_TERMINAL_ACTION_HASH = {
    0: action_reduce_326_1,
    91: action_reduce_326_1,
}


def status_326(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_326_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_327_TERMINAL_ACTION_HASH = {
    0: action_reduce_327_1,
    91: action_reduce_327_1,
}


def status_327(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_327_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_328_TERMINAL_ACTION_HASH = {
    0: action_reduce_328_1,
    91: action_reduce_328_1,
}


def status_328(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_328_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_329_TERMINAL_ACTION_HASH = {
    0: action_reduce_329_1,
    91: action_reduce_329_1,
}


def status_329(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_329_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_330_TERMINAL_ACTION_HASH = {
    0: action_reduce_330_1,
    91: action_reduce_330_1,
}


def status_330(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_330_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_331_TERMINAL_ACTION_HASH = {
    0: action_reduce_331_1,
    91: action_reduce_331_1,
}


def status_331(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_331_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_332_TERMINAL_ACTION_HASH = {
    0: action_reduce_332_1,
    91: action_reduce_332_1,
}


def status_332(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_332_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_333_TERMINAL_ACTION_HASH = {
    0: action_reduce_333_1,
    91: action_reduce_333_1,
}


def status_333(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_333_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_334_TERMINAL_ACTION_HASH = {
    0: action_reduce_334_1,
    91: action_reduce_334_1,
}


def status_334(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_334_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_335_TERMINAL_ACTION_HASH = {
    0: action_reduce_335_1,
    91: action_reduce_335_1,
}


def status_335(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_335_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_336_TERMINAL_ACTION_HASH = {
    0: action_reduce_336_1,
    91: action_reduce_336_1,
}


def status_336(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_336_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_337_TERMINAL_ACTION_HASH = {
    0: action_reduce_337_1,
    91: action_reduce_337_1,
}


def status_337(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_337_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_338_TERMINAL_ACTION_HASH = {
    0: action_reduce_338_1,
    91: action_reduce_338_1,
}


def status_338(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_338_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_339_TERMINAL_ACTION_HASH = {
    0: action_reduce_339_1,
    91: action_reduce_339_1,
}


def status_339(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_339_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_340_TERMINAL_ACTION_HASH = {
    0: action_reduce_340_1,
    91: action_reduce_340_1,
}


def status_340(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_340_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_341_TERMINAL_ACTION_HASH = {
    0: action_reduce_341_1,
    91: action_reduce_341_1,
}


def status_341(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_341_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_342_TERMINAL_ACTION_HASH = {
    0: action_reduce_342_1,
    91: action_reduce_342_1,
}


def status_342(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_342_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_343_TERMINAL_ACTION_HASH = {
    0: action_reduce_343_1,
    91: action_reduce_343_1,
}


def status_343(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_343_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_344_TERMINAL_ACTION_HASH = {
    0: action_reduce_344_1,
    91: action_reduce_344_1,
}


def status_344(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_344_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_345_TERMINAL_ACTION_HASH = {
    0: action_reduce_345_1,
    91: action_reduce_345_1,
}


def status_345(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_345_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_346_TERMINAL_ACTION_HASH = {
    0: action_reduce_346_1,
    91: action_reduce_346_1,
}


def status_346(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_346_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_347_TERMINAL_ACTION_HASH = {
    0: action_reduce_347_1,
    91: action_reduce_347_1,
}


def status_347(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_347_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_348_TERMINAL_ACTION_HASH = {
    0: action_reduce_348_1,
    91: action_reduce_348_1,
}


def status_348(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_348_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_349_TERMINAL_ACTION_HASH = {
    0: action_reduce_349_1,
    91: action_reduce_349_1,
}


def status_349(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_349_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_350_TERMINAL_ACTION_HASH = {
    0: action_reduce_350_1,
    91: action_reduce_350_1,
}


def status_350(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_350_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_351_TERMINAL_ACTION_HASH = {
    0: action_reduce_351_1,
    91: action_reduce_351_1,
}


def status_351(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_351_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_352_TERMINAL_ACTION_HASH = {
    0: action_reduce_352_1,
    91: action_reduce_352_1,
}


def status_352(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_352_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_353_TERMINAL_ACTION_HASH = {
    0: action_reduce_353_1,
    91: action_reduce_353_1,
}


def status_353(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_353_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_354_TERMINAL_ACTION_HASH = {
    0: action_reduce_354_1,
    91: action_reduce_354_1,
}


def status_354(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_354_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_355_TERMINAL_ACTION_HASH = {
    0: action_reduce_355_1,
    91: action_reduce_355_1,
}


def status_355(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_355_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_356_TERMINAL_ACTION_HASH = {
    0: action_reduce_356_1,
    91: action_reduce_356_1,
}


def status_356(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_356_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_357_TERMINAL_ACTION_HASH = {
    0: action_reduce_357_1,
    91: action_reduce_357_1,
}


def status_357(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_357_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_358_TERMINAL_ACTION_HASH = {
    0: action_reduce_358_1,
    91: action_reduce_358_1,
}


def status_358(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_358_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_359_TERMINAL_ACTION_HASH = {
    0: action_reduce_359_1,
    91: action_reduce_359_1,
}


def status_359(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_359_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_360_TERMINAL_ACTION_HASH = {
    0: action_reduce_360_1,
    91: action_reduce_360_1,
}


def status_360(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_360_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_361_TERMINAL_ACTION_HASH = {
    0: action_reduce_361_1,
    91: action_reduce_361_1,
}


def status_361(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_361_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_362_TERMINAL_ACTION_HASH = {
    0: action_reduce_362_1,
    91: action_reduce_362_1,
}


def status_362(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_362_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_363_TERMINAL_ACTION_HASH = {
    0: action_reduce_363_1,
    91: action_reduce_363_1,
}


def status_363(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_363_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_364_TERMINAL_ACTION_HASH = {
    0: action_reduce_364_1,
    91: action_reduce_364_1,
}


def status_364(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_364_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_365_TERMINAL_ACTION_HASH = {
    0: action_reduce_365_1,
    91: action_reduce_365_1,
}


def status_365(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_365_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_366_TERMINAL_ACTION_HASH = {
    0: action_reduce_366_1,
    91: action_reduce_366_1,
}


def status_366(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_366_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_367_TERMINAL_ACTION_HASH = {
    0: action_reduce_367_1,
    91: action_reduce_367_1,
}


def status_367(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_367_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_368_TERMINAL_ACTION_HASH = {
    0: action_reduce_368_1,
    91: action_reduce_368_1,
}


def status_368(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_368_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_369_TERMINAL_ACTION_HASH = {
    0: action_reduce_369_1,
    91: action_reduce_369_1,
}


def status_369(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_369_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_370_TERMINAL_ACTION_HASH = {
    0: action_reduce_370_1,
    91: action_reduce_370_1,
}


def status_370(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_370_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_371_TERMINAL_ACTION_HASH = {
    0: action_reduce_371_1,
    91: action_reduce_371_1,
}


def status_371(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_371_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_372_TERMINAL_ACTION_HASH = {
    0: action_reduce_372_1,
    91: action_reduce_372_1,
}


def status_372(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_372_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_373_TERMINAL_ACTION_HASH = {
    0: action_reduce_373_1,
    91: action_reduce_373_1,
}


def status_373(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_373_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_374_TERMINAL_ACTION_HASH = {
    0: action_reduce_374_1,
    91: action_reduce_374_1,
}


def status_374(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_374_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_375_TERMINAL_ACTION_HASH = {
    0: action_reduce_375_1,
    91: action_reduce_375_1,
}


def status_375(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_375_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_376_TERMINAL_ACTION_HASH = {
    0: action_reduce_376_1,
    91: action_reduce_376_1,
}


def status_376(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_376_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_377_TERMINAL_ACTION_HASH = {
    0: action_reduce_377_1,
    91: action_reduce_377_1,
}


def status_377(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_377_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_378_TERMINAL_ACTION_HASH = {
    0: action_reduce_378_1,
    91: action_reduce_378_1,
}


def status_378(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_378_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_379_TERMINAL_ACTION_HASH = {
    0: action_reduce_379_1,
    91: action_reduce_379_1,
}


def status_379(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_379_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_380_TERMINAL_ACTION_HASH = {
    0: action_reduce_380_1,
    91: action_reduce_380_1,
}


def status_380(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_380_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_381_TERMINAL_ACTION_HASH = {
    0: action_reduce_381_1,
    91: action_reduce_381_1,
}


def status_381(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_381_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_382_TERMINAL_ACTION_HASH = {
    0: action_reduce_382_1,
    91: action_reduce_382_1,
}


def status_382(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_382_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_383_TERMINAL_ACTION_HASH = {
    0: action_reduce_383_1,
    91: action_reduce_383_1,
}


def status_383(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_383_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_384_TERMINAL_ACTION_HASH = {
    0: action_reduce_384_1,
    91: action_reduce_384_1,
}


def status_384(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_384_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_385_TERMINAL_ACTION_HASH = {
    0: action_reduce_385_1,
    91: action_reduce_385_1,
}


def status_385(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_385_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_386_TERMINAL_ACTION_HASH = {
    0: action_reduce_386_1,
    91: action_reduce_386_1,
}


def status_386(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_386_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_387_TERMINAL_ACTION_HASH = {
    0: action_reduce_387_1,
    91: action_reduce_387_1,
}


def status_387(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_387_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_388_TERMINAL_ACTION_HASH = {
    0: action_reduce_388_1,
    91: action_reduce_388_1,
}


def status_388(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_388_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_389_TERMINAL_ACTION_HASH = {
    0: action_reduce_389_1,
    91: action_reduce_389_1,
}


def status_389(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_389_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_390_TERMINAL_ACTION_HASH = {
    0: action_reduce_390_1,
    91: action_reduce_390_1,
}


def status_390(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_390_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_391_TERMINAL_ACTION_HASH = {
    0: action_reduce_391_1,
    91: action_reduce_391_1,
}


def status_391(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_391_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_392_TERMINAL_ACTION_HASH = {
    0: action_reduce_392_1,
    91: action_reduce_392_1,
}


def status_392(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_392_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_393_TERMINAL_ACTION_HASH = {
    0: action_reduce_393_1,
    91: action_reduce_393_1,
}


def status_393(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_393_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_394_TERMINAL_ACTION_HASH = {
    0: action_reduce_394_1,
    91: action_reduce_394_1,
}


def status_394(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_394_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_395_TERMINAL_ACTION_HASH = {
    0: action_reduce_395_1,
    91: action_reduce_395_1,
}


def status_395(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_395_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_396_TERMINAL_ACTION_HASH = {
    0: action_reduce_396_1,
    91: action_reduce_396_1,
}


def status_396(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_396_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_397_TERMINAL_ACTION_HASH = {
    0: action_reduce_397_1,
    91: action_reduce_397_1,
}


def status_397(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_397_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_398_TERMINAL_ACTION_HASH = {
    0: action_reduce_398_1,
    91: action_reduce_398_1,
}


def status_398(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_398_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_399_TERMINAL_ACTION_HASH = {
    0: action_reduce_399_1,
    91: action_reduce_399_1,
}


def status_399(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_399_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_400_TERMINAL_ACTION_HASH = {
    0: action_reduce_400_1,
    91: action_reduce_400_1,
}


def status_400(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_400_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_401_TERMINAL_ACTION_HASH = {
    0: action_reduce_401_1,
    91: action_reduce_401_1,
}


def status_401(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_401_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_402_TERMINAL_ACTION_HASH = {
    0: action_reduce_402_1,
    91: action_reduce_402_1,
}


def status_402(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_402_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_403_TERMINAL_ACTION_HASH = {
    0: action_reduce_403_1,
    91: action_reduce_403_1,
}


def status_403(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_403_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_404_TERMINAL_ACTION_HASH = {
    0: action_reduce_404_1,
    91: action_reduce_404_1,
}


def status_404(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_404_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_405_TERMINAL_ACTION_HASH = {
    0: action_reduce_405_1,
    91: action_reduce_405_1,
}


def status_405(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_405_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_406_TERMINAL_ACTION_HASH = {
    0: action_reduce_406_1,
    91: action_reduce_406_1,
}


def status_406(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_406_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_407_TERMINAL_ACTION_HASH = {
    0: action_reduce_407_1,
    91: action_reduce_407_1,
}


def status_407(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_407_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_408_TERMINAL_ACTION_HASH = {
    0: action_reduce_408_1,
    91: action_reduce_408_1,
}


def status_408(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_408_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_409_TERMINAL_ACTION_HASH = {
    0: action_reduce_409_1,
    91: action_reduce_409_1,
}


def status_409(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_409_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_410_TERMINAL_ACTION_HASH = {
    0: action_reduce_410_1,
    91: action_reduce_410_1,
}


def status_410(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_410_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_411_TERMINAL_ACTION_HASH = {
    0: action_reduce_411_1,
    91: action_reduce_411_1,
}


def status_411(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_411_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_412_TERMINAL_ACTION_HASH = {
    0: action_reduce_412_1,
    91: action_reduce_412_1,
}


def status_412(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_412_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_413_TERMINAL_ACTION_HASH = {
    0: action_reduce_413_1,
    91: action_reduce_413_1,
}


def status_413(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_413_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_414_TERMINAL_ACTION_HASH = {
    0: action_reduce_414_1,
    91: action_reduce_414_1,
}


def status_414(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_414_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_415_TERMINAL_ACTION_HASH = {
    0: action_reduce_415_1,
    91: action_reduce_415_1,
}


def status_415(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_415_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_416_TERMINAL_ACTION_HASH = {
    0: action_reduce_416_1,
    91: action_reduce_416_1,
}


def status_416(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_416_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_417_TERMINAL_ACTION_HASH = {
    0: action_reduce_417_1,
    91: action_reduce_417_1,
}


def status_417(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_417_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_418_TERMINAL_ACTION_HASH = {
    0: action_reduce_418_1,
    91: action_reduce_418_1,
}


def status_418(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_418_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_419_TERMINAL_ACTION_HASH = {
    0: action_reduce_419_1,
    91: action_reduce_419_1,
}


def status_419(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_419_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_420_TERMINAL_ACTION_HASH = {
    0: action_reduce_420_1,
    91: action_reduce_420_1,
}


def status_420(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_420_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_421_TERMINAL_ACTION_HASH = {
    0: action_reduce_421_1,
    91: action_reduce_421_1,
}


def status_421(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_421_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_422_TERMINAL_ACTION_HASH = {
    0: action_reduce_422_1,
    91: action_reduce_422_1,
}


def status_422(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_422_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_423_TERMINAL_ACTION_HASH = {
    0: action_reduce_423_1,
    91: action_reduce_423_1,
}


def status_423(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_423_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_424_TERMINAL_ACTION_HASH = {
    0: action_reduce_424_1,
    91: action_reduce_424_1,
}


def status_424(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_424_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_425_TERMINAL_ACTION_HASH = {
    0: action_reduce_425_1,
    91: action_reduce_425_1,
}


def status_425(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_425_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_426_TERMINAL_ACTION_HASH = {
    0: action_reduce_426_1,
    91: action_reduce_426_1,
}


def status_426(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_426_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_427_TERMINAL_ACTION_HASH = {
    0: action_reduce_427_1,
    91: action_reduce_427_1,
}


def status_427(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_427_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_428_TERMINAL_ACTION_HASH = {
    0: action_reduce_428_1,
    91: action_reduce_428_1,
}


def status_428(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_428_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_429_TERMINAL_ACTION_HASH = {
    0: action_reduce_429_1,
    91: action_reduce_429_1,
}


def status_429(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_429_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_430_TERMINAL_ACTION_HASH = {
    0: action_reduce_430_1,
    91: action_reduce_430_1,
}


def status_430(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_430_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_431_TERMINAL_ACTION_HASH = {
    0: action_reduce_431_1,
    91: action_reduce_431_1,
}


def status_431(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_431_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_432_TERMINAL_ACTION_HASH = {
    0: action_reduce_432_1,
    91: action_reduce_432_1,
}


def status_432(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_432_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_433_TERMINAL_ACTION_HASH = {
    0: action_reduce_433_1,
    91: action_reduce_433_1,
}


def status_433(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_433_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_434_TERMINAL_ACTION_HASH = {
    0: action_reduce_434_1,
    91: action_reduce_434_1,
}


def status_434(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_434_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_435_TERMINAL_ACTION_HASH = {
    0: action_reduce_435_1,
    91: action_reduce_435_1,
}


def status_435(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_435_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_436_TERMINAL_ACTION_HASH = {
    0: action_reduce_436_1,
    91: action_reduce_436_1,
}


def status_436(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_436_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_437_TERMINAL_ACTION_HASH = {
    0: action_reduce_437_1,
    91: action_reduce_437_1,
}


def status_437(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_437_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_438_TERMINAL_ACTION_HASH = {
    0: action_reduce_438_1,
    91: action_reduce_438_1,
}


def status_438(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_438_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_439_TERMINAL_ACTION_HASH = {
    0: action_reduce_439_1,
    91: action_reduce_439_1,
}


def status_439(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_439_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_440_TERMINAL_ACTION_HASH = {
    0: action_reduce_440_1,
    91: action_reduce_440_1,
}


def status_440(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_440_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_441_TERMINAL_ACTION_HASH = {
    0: action_reduce_441_1,
    91: action_reduce_441_1,
}


def status_441(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_441_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_442_TERMINAL_ACTION_HASH = {
    0: action_reduce_442_1,
    91: action_reduce_442_1,
}


def status_442(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_442_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_443_TERMINAL_ACTION_HASH = {
    0: action_reduce_443_1,
    91: action_reduce_443_1,
}


def status_443(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_443_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_444_TERMINAL_ACTION_HASH = {
    0: action_reduce_444_1,
    91: action_reduce_444_1,
}


def status_444(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_444_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_445_TERMINAL_ACTION_HASH = {
    0: action_reduce_445_1,
    91: action_reduce_445_1,
}


def status_445(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_445_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_446_TERMINAL_ACTION_HASH = {
    0: action_reduce_446_1,
    91: action_reduce_446_1,
}


def status_446(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_446_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_447_TERMINAL_ACTION_HASH = {
    0: action_reduce_447_1,
    91: action_reduce_447_1,
}


def status_447(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_447_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_448_TERMINAL_ACTION_HASH = {
    0: action_reduce_448_1,
    91: action_reduce_448_1,
}


def status_448(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_448_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_449_TERMINAL_ACTION_HASH = {
    0: action_reduce_449_1,
    91: action_reduce_449_1,
}


def status_449(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_449_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_450_TERMINAL_ACTION_HASH = {
    0: action_reduce_450_1,
    91: action_reduce_450_1,
}


def status_450(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_450_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_451_TERMINAL_ACTION_HASH = {
    0: action_reduce_451_1,
    91: action_reduce_451_1,
}


def status_451(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_451_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_452_TERMINAL_ACTION_HASH = {
    0: action_reduce_452_1,
    91: action_reduce_452_1,
}


def status_452(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_452_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_453_TERMINAL_ACTION_HASH = {
    0: action_reduce_453_1,
    91: action_reduce_453_1,
}


def status_453(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_453_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_454_TERMINAL_ACTION_HASH = {
    0: action_reduce_454_1,
    91: action_reduce_454_1,
}


def status_454(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_454_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_455_TERMINAL_ACTION_HASH = {
    0: action_reduce_455_1,
    91: action_reduce_455_1,
}


def status_455(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_455_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_456_TERMINAL_ACTION_HASH = {
    0: action_reduce_456_1,
    91: action_reduce_456_1,
}


def status_456(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_456_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_457_TERMINAL_ACTION_HASH = {
    0: action_reduce_457_1,
    91: action_reduce_457_1,
}


def status_457(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_457_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_458_TERMINAL_ACTION_HASH = {
    0: action_reduce_458_1,
    91: action_reduce_458_1,
}


def status_458(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_458_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_459_TERMINAL_ACTION_HASH = {
    0: action_reduce_459_1,
    91: action_reduce_459_1,
}


def status_459(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_459_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_460_TERMINAL_ACTION_HASH = {
    0: action_reduce_460_1,
    91: action_reduce_460_1,
}


def status_460(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_460_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_461_TERMINAL_ACTION_HASH = {
    0: action_reduce_461_1,
    91: action_reduce_461_1,
}


def status_461(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_461_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_462_TERMINAL_ACTION_HASH = {
    0: action_reduce_462_1,
    91: action_reduce_462_1,
}


def status_462(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_462_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_463_TERMINAL_ACTION_HASH = {
    0: action_reduce_463_1,
    91: action_reduce_463_1,
}


def status_463(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_463_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_464_TERMINAL_ACTION_HASH = {
    0: action_reduce_464_1,
    91: action_reduce_464_1,
}


def status_464(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_464_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_465_TERMINAL_ACTION_HASH = {
    0: action_reduce_465_1,
    91: action_reduce_465_1,
}


def status_465(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_465_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_466_TERMINAL_ACTION_HASH = {
    0: action_reduce_466_1,
    91: action_reduce_466_1,
}


def status_466(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_466_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_467_TERMINAL_ACTION_HASH = {
    0: action_reduce_467_1,
    91: action_reduce_467_1,
}


def status_467(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_467_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_468_TERMINAL_ACTION_HASH = {
    0: action_reduce_468_1,
    91: action_reduce_468_1,
}


def status_468(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_468_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_469_TERMINAL_ACTION_HASH = {
    0: action_reduce_469_1,
    91: action_reduce_469_1,
}


def status_469(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_469_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_470_TERMINAL_ACTION_HASH = {
    0: action_reduce_470_1,
    91: action_reduce_470_1,
}


def status_470(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_470_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_471_TERMINAL_ACTION_HASH = {
    0: action_reduce_471_1,
    91: action_reduce_471_1,
}


def status_471(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_471_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_472_TERMINAL_ACTION_HASH = {
    0: action_reduce_472_1,
    91: action_reduce_472_1,
}


def status_472(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_472_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_473_TERMINAL_ACTION_HASH = {
    0: action_reduce_473_1,
    91: action_reduce_473_1,
}


def status_473(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_473_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_474_TERMINAL_ACTION_HASH = {
    0: action_reduce_474_1,
    91: action_reduce_474_1,
}


def status_474(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_474_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_475_TERMINAL_ACTION_HASH = {
    0: action_reduce_475_1,
    91: action_reduce_475_1,
}


def status_475(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_475_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_476_TERMINAL_ACTION_HASH = {
    0: action_reduce_476_1,
    91: action_reduce_476_1,
}


def status_476(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_476_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_477_TERMINAL_ACTION_HASH = {
    0: action_reduce_477_1,
    91: action_reduce_477_1,
}


def status_477(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_477_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_478_TERMINAL_ACTION_HASH = {
    0: action_reduce_478_1,
    91: action_reduce_478_1,
}


def status_478(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_478_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_479_TERMINAL_ACTION_HASH = {
    0: action_reduce_479_1,
    91: action_reduce_479_1,
}


def status_479(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_479_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_480_TERMINAL_ACTION_HASH = {
    0: action_reduce_480_1,
    91: action_reduce_480_1,
}


def status_480(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_480_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_481_TERMINAL_ACTION_HASH = {
    0: action_reduce_481_1,
    91: action_reduce_481_1,
}


def status_481(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_481_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_482_TERMINAL_ACTION_HASH = {
    0: action_reduce_482_1,
    91: action_reduce_482_1,
}


def status_482(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_482_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_483_TERMINAL_ACTION_HASH = {
    0: action_reduce_483_1,
    91: action_reduce_483_1,
}


def status_483(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_483_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_484_TERMINAL_ACTION_HASH = {
    0: action_reduce_484_1,
    91: action_reduce_484_1,
}


def status_484(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_484_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_485_TERMINAL_ACTION_HASH = {
    0: action_reduce_485_1,
    91: action_reduce_485_1,
}


def status_485(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_485_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_486_TERMINAL_ACTION_HASH = {
    0: action_reduce_486_1,
    91: action_reduce_486_1,
}


def status_486(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_486_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_487_TERMINAL_ACTION_HASH = {
    0: action_reduce_487_1,
    91: action_reduce_487_1,
}


def status_487(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_487_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_488_TERMINAL_ACTION_HASH = {
    0: action_reduce_488_1,
    91: action_reduce_488_1,
}


def status_488(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_488_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_489_TERMINAL_ACTION_HASH = {
    0: action_reduce_489_1,
    91: action_reduce_489_1,
}


def status_489(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_489_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_490_TERMINAL_ACTION_HASH = {
    0: action_reduce_490_1,
    91: action_reduce_490_1,
}


def status_490(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_490_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_491_TERMINAL_ACTION_HASH = {
    0: action_reduce_491_1,
    91: action_reduce_491_1,
}


def status_491(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_491_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_492_TERMINAL_ACTION_HASH = {
    0: action_reduce_492_1,
    91: action_reduce_492_1,
}


def status_492(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_492_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_493_TERMINAL_ACTION_HASH = {
    0: action_reduce_493_1,
    91: action_reduce_493_1,
}


def status_493(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_493_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_494_TERMINAL_ACTION_HASH = {
    0: action_reduce_494_1,
    91: action_reduce_494_1,
}


def status_494(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_494_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_495_TERMINAL_ACTION_HASH = {
    0: action_reduce_495_1,
    91: action_reduce_495_1,
}


def status_495(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_495_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_496_TERMINAL_ACTION_HASH = {
    0: action_reduce_496_1,
    91: action_reduce_496_1,
}


def status_496(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_496_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_497_TERMINAL_ACTION_HASH = {
    0: action_reduce_497_1,
    91: action_reduce_497_1,
}


def status_497(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_497_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_498_TERMINAL_ACTION_HASH = {
    0: action_reduce_498_1,
    91: action_reduce_498_1,
}


def status_498(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_498_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_499_TERMINAL_ACTION_HASH = {
    0: action_reduce_499_1,
    91: action_reduce_499_1,
}


def status_499(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_499_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_500_TERMINAL_ACTION_HASH = {
    0: action_reduce_500_1,
    91: action_reduce_500_1,
}


def status_500(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_500_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_501_TERMINAL_ACTION_HASH = {
    0: action_reduce_501_1,
    91: action_reduce_501_1,
}


def status_501(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_501_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_502_TERMINAL_ACTION_HASH = {
    0: action_reduce_502_1,
    91: action_reduce_502_1,
}


def status_502(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_502_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_503_TERMINAL_ACTION_HASH = {
    0: action_reduce_503_1,
    91: action_reduce_503_1,
}


def status_503(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_503_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_504_TERMINAL_ACTION_HASH = {
    0: action_reduce_504_1,
    91: action_reduce_504_1,
}


def status_504(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_504_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_505_TERMINAL_ACTION_HASH = {
    0: action_reduce_505_1,
    91: action_reduce_505_1,
}


def status_505(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_505_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_506_TERMINAL_ACTION_HASH = {
    0: action_reduce_506_1,
    91: action_reduce_506_1,
}


def status_506(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_506_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_507_TERMINAL_ACTION_HASH = {
    0: action_reduce_507_1,
    91: action_reduce_507_1,
}


def status_507(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_507_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_508_TERMINAL_ACTION_HASH = {
    0: action_reduce_508_1,
    91: action_reduce_508_1,
}


def status_508(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_508_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_509_TERMINAL_ACTION_HASH = {
    0: action_reduce_509_1,
    91: action_reduce_509_1,
}


def status_509(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_509_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_510_TERMINAL_ACTION_HASH = {
    0: action_reduce_510_1,
    91: action_reduce_510_1,
}


def status_510(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_510_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_511_TERMINAL_ACTION_HASH = {
    0: action_reduce_511_1,
    91: action_reduce_511_1,
}


def status_511(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_511_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_512_TERMINAL_ACTION_HASH = {
    0: action_reduce_512_1,
    91: action_reduce_512_1,
}


def status_512(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_512_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_513_TERMINAL_ACTION_HASH = {
    0: action_reduce_513_1,
    91: action_reduce_513_1,
}


def status_513(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_513_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_514_TERMINAL_ACTION_HASH = {
    0: action_reduce_514_1,
    91: action_reduce_514_1,
}


def status_514(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_514_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_515_TERMINAL_ACTION_HASH = {
    0: action_reduce_515_1,
    91: action_reduce_515_1,
}


def status_515(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_515_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_516_TERMINAL_ACTION_HASH = {
    0: action_reduce_516_1,
    91: action_reduce_516_1,
}


def status_516(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_516_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_517_TERMINAL_ACTION_HASH = {
    0: action_reduce_517_1,
    91: action_reduce_517_1,
}


def status_517(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_517_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_518_TERMINAL_ACTION_HASH = {
    0: action_reduce_518_1,
    91: action_reduce_518_1,
}


def status_518(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_518_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_519_TERMINAL_ACTION_HASH = {
    0: action_reduce_519_1,
    91: action_reduce_519_1,
}


def status_519(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_519_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_520_TERMINAL_ACTION_HASH = {
    0: action_reduce_520_1,
    91: action_reduce_520_1,
}


def status_520(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_520_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_521_TERMINAL_ACTION_HASH = {
    0: action_reduce_521_1,
    91: action_reduce_521_1,
}


def status_521(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_521_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_522_TERMINAL_ACTION_HASH = {
    0: action_reduce_522_1,
    91: action_reduce_522_1,
}


def status_522(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_522_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_523_TERMINAL_ACTION_HASH = {
    0: action_reduce_523_1,
    91: action_reduce_523_1,
}


def status_523(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_523_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_524_TERMINAL_ACTION_HASH = {
    0: action_reduce_524_1,
    91: action_reduce_524_1,
}


def status_524(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_524_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_525_TERMINAL_ACTION_HASH = {
    0: action_reduce_525_1,
    91: action_reduce_525_1,
}


def status_525(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_525_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_526_TERMINAL_ACTION_HASH = {
    0: action_reduce_526_1,
    91: action_reduce_526_1,
}


def status_526(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_526_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_527_TERMINAL_ACTION_HASH = {
    0: action_reduce_527_1,
    91: action_reduce_527_1,
}


def status_527(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_527_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_528_TERMINAL_ACTION_HASH = {
    0: action_reduce_528_1,
    91: action_reduce_528_1,
}


def status_528(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_528_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_529_TERMINAL_ACTION_HASH = {
    0: action_reduce_529_1,
    91: action_reduce_529_1,
}


def status_529(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_529_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_530_TERMINAL_ACTION_HASH = {
    0: action_reduce_530_1,
    91: action_reduce_530_1,
}


def status_530(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_530_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_531_TERMINAL_ACTION_HASH = {
    0: action_reduce_531_1,
    91: action_reduce_531_1,
}


def status_531(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_531_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_532_TERMINAL_ACTION_HASH = {
    0: action_reduce_532_1,
    91: action_reduce_532_1,
}


def status_532(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_532_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_533_TERMINAL_ACTION_HASH = {
    0: action_reduce_533_1,
    91: action_reduce_533_1,
}


def status_533(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_533_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_534_TERMINAL_ACTION_HASH = {
    0: action_reduce_534_1,
    91: action_reduce_534_1,
}


def status_534(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_534_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_535_TERMINAL_ACTION_HASH = {
    0: action_reduce_535_1,
    91: action_reduce_535_1,
}


def status_535(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_535_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_536_TERMINAL_ACTION_HASH = {
    0: action_reduce_536_1,
    91: action_reduce_536_1,
}


def status_536(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_536_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_537_TERMINAL_ACTION_HASH = {
    0: action_reduce_537_1,
    91: action_reduce_537_1,
}


def status_537(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_537_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_538_TERMINAL_ACTION_HASH = {
    0: action_reduce_538_1,
    91: action_reduce_538_1,
}


def status_538(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_538_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_539_TERMINAL_ACTION_HASH = {
    0: action_reduce_539_1,
    91: action_reduce_539_1,
}


def status_539(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_539_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_540_TERMINAL_ACTION_HASH = {
    0: action_reduce_540_1,
    91: action_reduce_540_1,
}


def status_540(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_540_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_541_TERMINAL_ACTION_HASH = {
    0: action_reduce_541_1,
    91: action_reduce_541_1,
}


def status_541(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_541_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_542_TERMINAL_ACTION_HASH = {
    0: action_reduce_542_1,
    91: action_reduce_542_1,
}


def status_542(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_542_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_543_TERMINAL_ACTION_HASH = {
    0: action_reduce_543_1,
    91: action_reduce_543_1,
}


def status_543(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_543_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_544_TERMINAL_ACTION_HASH = {
    0: action_reduce_544_1,
    91: action_reduce_544_1,
}


def status_544(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_544_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_545_TERMINAL_ACTION_HASH = {
    0: action_reduce_545_1,
    91: action_reduce_545_1,
}


def status_545(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_545_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_546_TERMINAL_ACTION_HASH = {
    0: action_reduce_546_1,
    91: action_reduce_546_1,
}


def status_546(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_546_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_547_TERMINAL_ACTION_HASH = {
    0: action_reduce_547_1,
    91: action_reduce_547_1,
}


def status_547(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_547_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_548_TERMINAL_ACTION_HASH = {
    0: action_reduce_548_1,
    91: action_reduce_548_1,
}


def status_548(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_548_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_549_TERMINAL_ACTION_HASH = {
    0: action_reduce_549_1,
    91: action_reduce_549_1,
}


def status_549(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_549_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_550_TERMINAL_ACTION_HASH = {
    0: action_reduce_550_1,
    91: action_reduce_550_1,
}


def status_550(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_550_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_551_TERMINAL_ACTION_HASH = {
    0: action_reduce_551_1,
    91: action_reduce_551_1,
}


def status_551(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_551_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_552_TERMINAL_ACTION_HASH = {
    0: action_reduce_552_1,
    91: action_reduce_552_1,
}


def status_552(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_552_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_553_TERMINAL_ACTION_HASH = {
    0: action_reduce_553_1,
    91: action_reduce_553_1,
}


def status_553(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_553_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_554_TERMINAL_ACTION_HASH = {
    0: action_reduce_554_1,
    91: action_reduce_554_1,
}


def status_554(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_554_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_555_TERMINAL_ACTION_HASH = {
    0: action_reduce_555_1,
    91: action_reduce_555_1,
}


def status_555(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_555_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_556_TERMINAL_ACTION_HASH = {
    0: action_reduce_556_1,
    91: action_reduce_556_1,
}


def status_556(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_556_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_557_TERMINAL_ACTION_HASH = {
    0: action_reduce_557_1,
    91: action_reduce_557_1,
}


def status_557(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_557_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_558_TERMINAL_ACTION_HASH = {
    0: action_reduce_558_1,
    91: action_reduce_558_1,
}


def status_558(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_558_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_559_TERMINAL_ACTION_HASH = {
    0: action_reduce_559_1,
    91: action_reduce_559_1,
}


def status_559(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_559_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_560_TERMINAL_ACTION_HASH = {
    0: action_reduce_560_1,
    91: action_reduce_560_1,
}


def status_560(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_560_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_561_TERMINAL_ACTION_HASH = {
    0: action_reduce_561_1,
    91: action_reduce_561_1,
}


def status_561(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_561_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_562_TERMINAL_ACTION_HASH = {
    0: action_reduce_562_1,
    91: action_reduce_562_1,
}


def status_562(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_562_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_563_TERMINAL_ACTION_HASH = {
    0: action_reduce_563_1,
    91: action_reduce_563_1,
}


def status_563(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_563_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_564_TERMINAL_ACTION_HASH = {
    0: action_reduce_564_1,
    91: action_reduce_564_1,
}


def status_564(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_564_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_565_TERMINAL_ACTION_HASH = {
    0: action_reduce_565_1,
    91: action_reduce_565_1,
}


def status_565(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_565_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_566_TERMINAL_ACTION_HASH = {
    0: action_reduce_566_1,
    91: action_reduce_566_1,
}


def status_566(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_566_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_567_TERMINAL_ACTION_HASH = {
    0: action_reduce_567_1,
    91: action_reduce_567_1,
}


def status_567(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_567_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_568_TERMINAL_ACTION_HASH = {
    0: action_reduce_568_1,
    91: action_reduce_568_1,
}


def status_568(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_568_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_569_TERMINAL_ACTION_HASH = {
    0: action_reduce_569_1,
    91: action_reduce_569_1,
}


def status_569(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_569_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_570_TERMINAL_ACTION_HASH = {
    0: action_reduce_570_1,
    91: action_reduce_570_1,
}


def status_570(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_570_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_571_TERMINAL_ACTION_HASH = {
    0: action_reduce_571_1,
    91: action_reduce_571_1,
}


def status_571(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_571_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_572_TERMINAL_ACTION_HASH = {
    0: action_reduce_572_1,
    91: action_reduce_572_1,
}


def status_572(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_572_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_573_TERMINAL_ACTION_HASH = {
    0: action_reduce_573_1,
    91: action_reduce_573_1,
}


def status_573(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_573_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_574_TERMINAL_ACTION_HASH = {
    0: action_reduce_574_1,
    91: action_reduce_574_1,
}


def status_574(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_574_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_575_TERMINAL_ACTION_HASH = {
    0: action_reduce_575_1,
    91: action_reduce_575_1,
}


def status_575(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_575_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_576_TERMINAL_ACTION_HASH = {
    0: action_reduce_576_1,
    91: action_reduce_576_1,
}


def status_576(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_576_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_577_TERMINAL_ACTION_HASH = {
    0: action_reduce_577_1,
    91: action_reduce_577_1,
}


def status_577(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_577_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_578_TERMINAL_ACTION_HASH = {
    0: action_reduce_578_1,
    91: action_reduce_578_1,
}


def status_578(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_578_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_579_TERMINAL_ACTION_HASH = {
    0: action_reduce_579_1,
    91: action_reduce_579_1,
}


def status_579(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_579_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_580_TERMINAL_ACTION_HASH = {
    0: action_reduce_580_1,
    91: action_reduce_580_1,
}


def status_580(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_580_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_581_TERMINAL_ACTION_HASH = {
    0: action_reduce_581_1,
    91: action_reduce_581_1,
}


def status_581(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_581_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_582_TERMINAL_ACTION_HASH = {
    0: action_reduce_582_1,
    91: action_reduce_582_1,
}


def status_582(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_582_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_583_TERMINAL_ACTION_HASH = {
    0: action_reduce_583_1,
    91: action_reduce_583_1,
}


def status_583(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_583_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_584_TERMINAL_ACTION_HASH = {
    0: action_reduce_584_1,
    91: action_reduce_584_1,
}


def status_584(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_584_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_585_TERMINAL_ACTION_HASH = {
    0: action_reduce_585_1,
    91: action_reduce_585_1,
}


def status_585(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_585_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_586_TERMINAL_ACTION_HASH = {
    0: action_reduce_586_1,
    91: action_reduce_586_1,
}


def status_586(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_586_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_587_TERMINAL_ACTION_HASH = {
    0: action_reduce_587_1,
    91: action_reduce_587_1,
}


def status_587(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_587_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_588_TERMINAL_ACTION_HASH = {
    0: action_reduce_588_1,
    91: action_reduce_588_1,
}


def status_588(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_588_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_589_TERMINAL_ACTION_HASH = {
    0: action_reduce_589_1,
    91: action_reduce_589_1,
}


def status_589(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_589_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_590_TERMINAL_ACTION_HASH = {
    0: action_reduce_590_1,
    91: action_reduce_590_1,
}


def status_590(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_590_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_591_TERMINAL_ACTION_HASH = {
    0: action_reduce_591_1,
    91: action_reduce_591_1,
}


def status_591(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_591_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_592_TERMINAL_ACTION_HASH = {
    0: action_reduce_592_1,
    91: action_reduce_592_1,
}


def status_592(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_592_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_593_TERMINAL_ACTION_HASH = {
    0: action_reduce_593_1,
    91: action_reduce_593_1,
}


def status_593(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_593_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_594_TERMINAL_ACTION_HASH = {
    0: action_reduce_594_1,
    91: action_reduce_594_1,
}


def status_594(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_594_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_595_TERMINAL_ACTION_HASH = {
    0: action_reduce_595_1,
    91: action_reduce_595_1,
}


def status_595(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_595_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_596_TERMINAL_ACTION_HASH = {
    0: action_reduce_596_1,
    91: action_reduce_596_1,
}


def status_596(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_596_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_597_TERMINAL_ACTION_HASH = {
    0: action_reduce_597_1,
    91: action_reduce_597_1,
}


def status_597(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_597_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_598_TERMINAL_ACTION_HASH = {
    0: action_reduce_598_1,
    91: action_reduce_598_1,
}


def status_598(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_598_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_599_TERMINAL_ACTION_HASH = {
    0: action_reduce_599_1,
    91: action_reduce_599_1,
}


def status_599(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_599_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_600_TERMINAL_ACTION_HASH = {
    0: action_reduce_600_1,
    91: action_reduce_600_1,
}


def status_600(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_600_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_601_TERMINAL_ACTION_HASH = {
    0: action_reduce_601_1,
    91: action_reduce_601_1,
}


def status_601(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_601_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_602_TERMINAL_ACTION_HASH = {
    0: action_reduce_602_1,
    91: action_reduce_602_1,
}


def status_602(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_602_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_603_TERMINAL_ACTION_HASH = {
    0: action_reduce_603_1,
    91: action_reduce_603_1,
}


def status_603(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_603_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_604_TERMINAL_ACTION_HASH = {
    0: action_reduce_604_1,
    91: action_reduce_604_1,
}


def status_604(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_604_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_605_TERMINAL_ACTION_HASH = {
    0: action_reduce_605_1,
    91: action_reduce_605_1,
}


def status_605(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_605_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_606_TERMINAL_ACTION_HASH = {
    0: action_reduce_606_1,
    91: action_reduce_606_1,
}


def status_606(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_606_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_607_TERMINAL_ACTION_HASH = {
    0: action_reduce_607_1,
    91: action_reduce_607_1,
}


def status_607(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_607_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_608_TERMINAL_ACTION_HASH = {
    0: action_reduce_608_1,
    91: action_reduce_608_1,
}


def status_608(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_608_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_609_TERMINAL_ACTION_HASH = {
    0: action_reduce_609_1,
    91: action_reduce_609_1,
}


def status_609(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_609_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_610_TERMINAL_ACTION_HASH = {
    0: action_reduce_610_1,
    91: action_reduce_610_1,
}


def status_610(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_610_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_611_TERMINAL_ACTION_HASH = {
    0: action_reduce_611_1,
    91: action_reduce_611_1,
}


def status_611(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_611_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_612_TERMINAL_ACTION_HASH = {
    0: action_reduce_612_1,
    91: action_reduce_612_1,
}


def status_612(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_612_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_613_TERMINAL_ACTION_HASH = {
    0: action_reduce_613_1,
    91: action_reduce_613_1,
}


def status_613(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_613_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_614_TERMINAL_ACTION_HASH = {
    0: action_reduce_614_1,
    91: action_reduce_614_1,
}


def status_614(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_614_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_615_TERMINAL_ACTION_HASH = {
    0: action_reduce_615_1,
    91: action_reduce_615_1,
}


def status_615(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_615_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_616_TERMINAL_ACTION_HASH = {
    0: action_reduce_616_1,
    91: action_reduce_616_1,
}


def status_616(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_616_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_617_TERMINAL_ACTION_HASH = {
    0: action_reduce_617_1,
    91: action_reduce_617_1,
}


def status_617(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_617_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_618_TERMINAL_ACTION_HASH = {
    0: action_reduce_618_1,
    91: action_reduce_618_1,
}


def status_618(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_618_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_619_TERMINAL_ACTION_HASH = {
    0: action_reduce_619_1,
    91: action_reduce_619_1,
}


def status_619(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_619_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_620_TERMINAL_ACTION_HASH = {
    0: action_reduce_620_1,
    91: action_reduce_620_1,
}


def status_620(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_620_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_621_TERMINAL_ACTION_HASH = {
    0: action_reduce_621_1,
    91: action_reduce_621_1,
}


def status_621(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_621_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_622_TERMINAL_ACTION_HASH = {
    0: action_reduce_622_1,
    91: action_reduce_622_1,
}


def status_622(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_622_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_623_TERMINAL_ACTION_HASH = {
    0: action_reduce_623_1,
    91: action_reduce_623_1,
}


def status_623(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_623_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_624_TERMINAL_ACTION_HASH = {
    0: action_reduce_624_1,
    91: action_reduce_624_1,
}


def status_624(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_624_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_625_TERMINAL_ACTION_HASH = {
    0: action_reduce_625_1,
    91: action_reduce_625_1,
}


def status_625(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_625_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_626_TERMINAL_ACTION_HASH = {
    0: action_reduce_626_1,
    91: action_reduce_626_1,
}


def status_626(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_626_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_627_TERMINAL_ACTION_HASH = {
    0: action_reduce_627_1,
    91: action_reduce_627_1,
}


def status_627(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_627_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_628_TERMINAL_ACTION_HASH = {
    0: action_reduce_628_1,
    91: action_reduce_628_1,
}


def status_628(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_628_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_629_TERMINAL_ACTION_HASH = {
    0: action_reduce_629_1,
    91: action_reduce_629_1,
}


def status_629(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_629_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_630_TERMINAL_ACTION_HASH = {
    0: action_reduce_630_1,
    91: action_reduce_630_1,
}


def status_630(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_630_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_631_TERMINAL_ACTION_HASH = {
    0: action_reduce_631_1,
    91: action_reduce_631_1,
}


def status_631(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_631_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_632_TERMINAL_ACTION_HASH = {
    0: action_reduce_632_1,
    91: action_reduce_632_1,
}


def status_632(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_632_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_633_TERMINAL_ACTION_HASH = {
    0: action_reduce_633_1,
    91: action_reduce_633_1,
}


def status_633(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_633_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_634_TERMINAL_ACTION_HASH = {
    0: action_reduce_634_1,
    91: action_reduce_634_1,
}


def status_634(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_634_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_635_TERMINAL_ACTION_HASH = {
    0: action_reduce_635_1,
    91: action_reduce_635_1,
}


def status_635(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_635_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_636_TERMINAL_ACTION_HASH = {
    0: action_reduce_636_1,
    91: action_reduce_636_1,
}


def status_636(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_636_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_637_TERMINAL_ACTION_HASH = {
    0: action_reduce_637_1,
    91: action_reduce_637_1,
}


def status_637(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_637_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_638_TERMINAL_ACTION_HASH = {
    0: action_reduce_638_1,
    91: action_reduce_638_1,
}


def status_638(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_638_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_639_TERMINAL_ACTION_HASH = {
    0: action_reduce_639_1,
    91: action_reduce_639_1,
}


def status_639(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_639_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_640_TERMINAL_ACTION_HASH = {
    0: action_reduce_640_1,
    91: action_reduce_640_1,
}


def status_640(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_640_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_641_TERMINAL_ACTION_HASH = {
    0: action_reduce_641_1,
    91: action_reduce_641_1,
}


def status_641(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_641_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_642_TERMINAL_ACTION_HASH = {
    0: action_reduce_642_1,
    91: action_reduce_642_1,
}


def status_642(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_642_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_643_TERMINAL_ACTION_HASH = {
    0: action_reduce_643_1,
    91: action_reduce_643_1,
}


def status_643(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_643_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_644_TERMINAL_ACTION_HASH = {
    0: action_reduce_644_1,
    91: action_reduce_644_1,
}


def status_644(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_644_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_645_TERMINAL_ACTION_HASH = {
    0: action_reduce_645_1,
    91: action_reduce_645_1,
}


def status_645(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_645_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_646_TERMINAL_ACTION_HASH = {
    0: action_reduce_646_1,
    91: action_reduce_646_1,
}


def status_646(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_646_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_647_TERMINAL_ACTION_HASH = {
    0: action_reduce_647_1,
    91: action_reduce_647_1,
}


def status_647(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_647_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_648_TERMINAL_ACTION_HASH = {
    0: action_reduce_648_1,
    91: action_reduce_648_1,
}


def status_648(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_648_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_649_TERMINAL_ACTION_HASH = {
    0: action_reduce_649_1,
    91: action_reduce_649_1,
}


def status_649(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_649_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_650_TERMINAL_ACTION_HASH = {
    0: action_reduce_650_1,
    91: action_reduce_650_1,
}


def status_650(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_650_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_651_TERMINAL_ACTION_HASH = {
    0: action_reduce_651_1,
    91: action_reduce_651_1,
}


def status_651(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_651_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_652_TERMINAL_ACTION_HASH = {
    0: action_reduce_652_1,
    91: action_reduce_652_1,
}


def status_652(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_652_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_653_TERMINAL_ACTION_HASH = {
    0: action_reduce_653_1,
    91: action_reduce_653_1,
}


def status_653(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_653_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_654_TERMINAL_ACTION_HASH = {
    0: action_reduce_654_1,
    91: action_reduce_654_1,
}


def status_654(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_654_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_655_TERMINAL_ACTION_HASH = {
    0: action_reduce_655_1,
    91: action_reduce_655_1,
}


def status_655(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_655_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_656_TERMINAL_ACTION_HASH = {
    0: action_reduce_656_1,
    91: action_reduce_656_1,
}


def status_656(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_656_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_657_TERMINAL_ACTION_HASH = {
    0: action_reduce_656_1,
    91: action_reduce_656_1,
}


def status_657(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_657_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_658_TERMINAL_ACTION_HASH = {
    0: action_reduce_656_1,
    91: action_reduce_656_1,
}


def status_658(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_658_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_659_TERMINAL_ACTION_HASH = {
    0: action_reduce_656_1,
    91: action_reduce_656_1,
}


def status_659(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_659_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_660_TERMINAL_ACTION_HASH = {
    0: action_reduce_656_1,
    91: action_reduce_656_1,
}


def status_660(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_660_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_661_TERMINAL_ACTION_HASH = {
    0: action_reduce_661_1,
    91: action_reduce_661_1,
}


def status_661(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_661_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_662_TERMINAL_ACTION_HASH = {
    0: action_reduce_661_1,
    91: action_reduce_661_1,
}


def status_662(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_662_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_663_TERMINAL_ACTION_HASH = {
    0: action_accept,
}


def status_663(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_663_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_664_TERMINAL_ACTION_HASH = {
    90: action_shift_166,
    91: action_shift_168,
    93: action_shift_170,
    94: action_shift_172,
    96: action_shift_173,
    97: action_shift_174,
    115: action_shift_9,
    169: action_shift_74,
    170: action_shift_76,
    178: action_shift_79,
    201: action_shift_85,
    220: action_shift_89,
    253: action_shift_92,
    254: action_shift_95,
    273: action_shift_96,
    274: action_shift_97,
    321: action_shift_100,
    343: action_shift_101,
    367: action_shift_102,
    379: action_shift_107,
    380: action_shift_108,
    381: action_shift_110,
    421: action_shift_111,
    422: action_shift_114,
    423: action_shift_116,
    440: action_shift_117,
    441: action_shift_118,
    442: action_shift_119,
    447: action_shift_6,
    449: action_shift_7,
    470: action_shift_122,
    471: action_shift_15,
    517: action_shift_123,
    518: action_shift_124,
    547: action_shift_127,
    629: action_shift_128,
    633: action_shift_132,
    643: action_shift_135,
    735: action_shift_138,
    740: action_shift_140,
    741: action_shift_142,
    744: action_shift_143,
    745: action_shift_146,
    746: action_shift_148,
    787: action_shift_150,
    788: action_shift_10,
    814: action_shift_153,
}


def status_664(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_664_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_SYMBOL_GOTO_HASH = {
    (9, 846): 44, 
    (9, 865): 45, 
    (9, 866): 46, 
    (9, 867): 71, 
    (9, 868): 73, 
    (26, 858): 25, 
    (37, 846): 48, 
    (44, 850): 30, 
    (44, 863): 32, 
    (44, 864): 43, 
    (44, 891): 661, 
    (44, 892): 656, 
    (44, 893): 657, 
    (44, 894): 658, 
    (44, 895): 659, 
    (44, 896): 660, 
    (44, 897): 662, 
    (44, 901): 31, 
    (48, 850): 30, 
    (48, 863): 32, 
    (48, 864): 47, 
    (48, 891): 661, 
    (48, 892): 656, 
    (48, 893): 657, 
    (48, 894): 658, 
    (48, 895): 659, 
    (48, 896): 660, 
    (48, 897): 662, 
    (48, 901): 31, 
    (51, 851): 20, 
    (51, 852): 50, 
    (55, 851): 20, 
    (55, 852): 54, 
    (57, 851): 20, 
    (57, 852): 56, 
    (62, 851): 20, 
    (62, 852): 61, 
    (64, 851): 20, 
    (64, 852): 63, 
    (70, 875): 69, 
    (73, 846): 44, 
    (73, 865): 45, 
    (73, 866): 46, 
    (73, 867): 72, 
    (76, 868): 75, 
    (78, 875): 68, 
    (78, 876): 70, 
    (78, 877): 77, 
    (79, 873): 78, 
    (81, 875): 68, 
    (81, 876): 70, 
    (81, 877): 80, 
    (82, 870): 58, 
    (82, 871): 81, 
    (84, 875): 68, 
    (84, 876): 70, 
    (84, 877): 83, 
    (85, 870): 58, 
    (85, 871): 84, 
    (87, 846): 44, 
    (87, 865): 45, 
    (87, 866): 46, 
    (87, 867): 86, 
    (88, 858): 24, 
    (88, 859): 27, 
    (91, 875): 68, 
    (91, 876): 70, 
    (91, 877): 90, 
    (92, 873): 91, 
    (94, 875): 68, 
    (94, 876): 70, 
    (94, 877): 93, 
    (95, 873): 94, 
    (99, 875): 68, 
    (99, 876): 70, 
    (99, 877): 98, 
    (100, 868): 52, 
    (100, 869): 99, 
    (105, 846): 44, 
    (105, 865): 45, 
    (105, 866): 46, 
    (105, 867): 104, 
    (107, 846): 44, 
    (107, 848): 105, 
    (107, 865): 45, 
    (107, 866): 46, 
    (107, 867): 106, 
    (110, 846): 44, 
    (110, 865): 45, 
    (110, 866): 46, 
    (110, 867): 109, 
    (113, 875): 68, 
    (113, 876): 70, 
    (113, 877): 112, 
    (114, 868): 52, 
    (114, 869): 113, 
    (116, 846): 44, 
    (116, 865): 45, 
    (116, 866): 46, 
    (116, 867): 115, 
    (121, 875): 68, 
    (121, 876): 70, 
    (121, 877): 120, 
    (122, 873): 121, 
    (126, 875): 68, 
    (126, 876): 70, 
    (126, 877): 125, 
    (127, 870): 58, 
    (127, 871): 126, 
    (130, 846): 44, 
    (130, 865): 45, 
    (130, 866): 46, 
    (130, 867): 129, 
    (131, 858): 24, 
    (131, 859): 28, 
    (134, 875): 68, 
    (134, 876): 70, 
    (134, 877): 133, 
    (135, 868): 52, 
    (135, 869): 134, 
    (137, 846): 44, 
    (137, 865): 45, 
    (137, 866): 46, 
    (137, 867): 136, 
    (138, 868): 52, 
    (138, 869): 137, 
    (140, 868): 139, 
    (142, 868): 141, 
    (145, 875): 68, 
    (145, 876): 70, 
    (145, 877): 144, 
    (146, 868): 52, 
    (146, 869): 145, 
    (148, 846): 44, 
    (148, 865): 45, 
    (148, 866): 46, 
    (148, 867): 147, 
    (150, 868): 149, 
    (152, 875): 68, 
    (152, 876): 70, 
    (152, 877): 151, 
    (153, 868): 52, 
    (153, 869): 152, 
    (157, 868): 155, 
    (159, 846): 44, 
    (159, 865): 45, 
    (159, 866): 46, 
    (159, 867): 158, 
    (160, 868): 159, 
    (163, 868): 162, 
    (165, 875): 68, 
    (165, 876): 70, 
    (165, 877): 164, 
    (166, 868): 52, 
    (166, 869): 165, 
    (168, 868): 167, 
    (170, 868): 169, 
    (172, 868): 52, 
    (172, 869): 171, 
    (664, 843): 663, 
    (664, 847): 157, 
    (664, 848): 160, 
    (664, 849): 163, 
    (664, 878): 0, 
}


# 状态 > 状态函数的字典
STATUS_HASH = {
    0: status_0,
    1: status_1,
    2: status_2,
    3: status_3,
    4: status_4,
    5: status_5,
    6: status_6,
    7: status_7,
    8: status_8,
    9: status_9,
    10: status_10,
    11: status_11,
    12: status_12,
    13: status_13,
    14: status_14,
    15: status_15,
    16: status_16,
    17: status_17,
    18: status_18,
    19: status_19,
    20: status_20,
    21: status_21,
    22: status_22,
    23: status_23,
    24: status_24,
    25: status_25,
    26: status_26,
    27: status_27,
    28: status_28,
    29: status_29,
    30: status_30,
    31: status_31,
    32: status_32,
    33: status_33,
    34: status_34,
    35: status_35,
    36: status_36,
    37: status_37,
    38: status_38,
    39: status_39,
    40: status_40,
    41: status_41,
    42: status_42,
    43: status_43,
    44: status_44,
    45: status_45,
    46: status_46,
    47: status_47,
    48: status_48,
    49: status_49,
    50: status_50,
    51: status_51,
    52: status_52,
    53: status_53,
    54: status_54,
    55: status_55,
    56: status_56,
    57: status_57,
    58: status_58,
    59: status_59,
    60: status_60,
    61: status_61,
    62: status_62,
    63: status_63,
    64: status_64,
    65: status_65,
    66: status_66,
    67: status_67,
    68: status_68,
    69: status_69,
    70: status_70,
    71: status_71,
    72: status_72,
    73: status_73,
    74: status_74,
    75: status_75,
    76: status_76,
    77: status_77,
    78: status_78,
    79: status_79,
    80: status_80,
    81: status_81,
    82: status_82,
    83: status_83,
    84: status_84,
    85: status_85,
    86: status_86,
    87: status_87,
    88: status_88,
    89: status_89,
    90: status_90,
    91: status_91,
    92: status_92,
    93: status_93,
    94: status_94,
    95: status_95,
    96: status_96,
    97: status_97,
    98: status_98,
    99: status_99,
    100: status_100,
    101: status_101,
    102: status_102,
    103: status_103,
    104: status_104,
    105: status_105,
    106: status_106,
    107: status_107,
    108: status_108,
    109: status_109,
    110: status_110,
    111: status_111,
    112: status_112,
    113: status_113,
    114: status_114,
    115: status_115,
    116: status_116,
    117: status_117,
    118: status_118,
    119: status_119,
    120: status_120,
    121: status_121,
    122: status_122,
    123: status_123,
    124: status_124,
    125: status_125,
    126: status_126,
    127: status_127,
    128: status_128,
    129: status_129,
    130: status_130,
    131: status_131,
    132: status_132,
    133: status_133,
    134: status_134,
    135: status_135,
    136: status_136,
    137: status_137,
    138: status_138,
    139: status_139,
    140: status_140,
    141: status_141,
    142: status_142,
    143: status_143,
    144: status_144,
    145: status_145,
    146: status_146,
    147: status_147,
    148: status_148,
    149: status_149,
    150: status_150,
    151: status_151,
    152: status_152,
    153: status_153,
    154: status_154,
    155: status_155,
    156: status_156,
    157: status_157,
    158: status_158,
    159: status_159,
    160: status_160,
    161: status_161,
    162: status_162,
    163: status_163,
    164: status_164,
    165: status_165,
    166: status_166,
    167: status_167,
    168: status_168,
    169: status_169,
    170: status_170,
    171: status_171,
    172: status_172,
    173: status_173,
    174: status_174,
    175: status_175,
    176: status_176,
    177: status_177,
    178: status_178,
    179: status_179,
    180: status_180,
    181: status_181,
    182: status_182,
    183: status_183,
    184: status_184,
    185: status_185,
    186: status_186,
    187: status_187,
    188: status_188,
    189: status_189,
    190: status_190,
    191: status_191,
    192: status_192,
    193: status_193,
    194: status_194,
    195: status_195,
    196: status_196,
    197: status_197,
    198: status_198,
    199: status_199,
    200: status_200,
    201: status_201,
    202: status_202,
    203: status_203,
    204: status_204,
    205: status_205,
    206: status_206,
    207: status_207,
    208: status_208,
    209: status_209,
    210: status_210,
    211: status_211,
    212: status_212,
    213: status_213,
    214: status_214,
    215: status_215,
    216: status_216,
    217: status_217,
    218: status_218,
    219: status_219,
    220: status_220,
    221: status_221,
    222: status_222,
    223: status_223,
    224: status_224,
    225: status_225,
    226: status_226,
    227: status_227,
    228: status_228,
    229: status_229,
    230: status_230,
    231: status_231,
    232: status_232,
    233: status_233,
    234: status_234,
    235: status_235,
    236: status_236,
    237: status_237,
    238: status_238,
    239: status_239,
    240: status_240,
    241: status_241,
    242: status_242,
    243: status_243,
    244: status_244,
    245: status_245,
    246: status_246,
    247: status_247,
    248: status_248,
    249: status_249,
    250: status_250,
    251: status_251,
    252: status_252,
    253: status_253,
    254: status_254,
    255: status_255,
    256: status_256,
    257: status_257,
    258: status_258,
    259: status_259,
    260: status_260,
    261: status_261,
    262: status_262,
    263: status_263,
    264: status_264,
    265: status_265,
    266: status_266,
    267: status_267,
    268: status_268,
    269: status_269,
    270: status_270,
    271: status_271,
    272: status_272,
    273: status_273,
    274: status_274,
    275: status_275,
    276: status_276,
    277: status_277,
    278: status_278,
    279: status_279,
    280: status_280,
    281: status_281,
    282: status_282,
    283: status_283,
    284: status_284,
    285: status_285,
    286: status_286,
    287: status_287,
    288: status_288,
    289: status_289,
    290: status_290,
    291: status_291,
    292: status_292,
    293: status_293,
    294: status_294,
    295: status_295,
    296: status_296,
    297: status_297,
    298: status_298,
    299: status_299,
    300: status_300,
    301: status_301,
    302: status_302,
    303: status_303,
    304: status_304,
    305: status_305,
    306: status_306,
    307: status_307,
    308: status_308,
    309: status_309,
    310: status_310,
    311: status_311,
    312: status_312,
    313: status_313,
    314: status_314,
    315: status_315,
    316: status_316,
    317: status_317,
    318: status_318,
    319: status_319,
    320: status_320,
    321: status_321,
    322: status_322,
    323: status_323,
    324: status_324,
    325: status_325,
    326: status_326,
    327: status_327,
    328: status_328,
    329: status_329,
    330: status_330,
    331: status_331,
    332: status_332,
    333: status_333,
    334: status_334,
    335: status_335,
    336: status_336,
    337: status_337,
    338: status_338,
    339: status_339,
    340: status_340,
    341: status_341,
    342: status_342,
    343: status_343,
    344: status_344,
    345: status_345,
    346: status_346,
    347: status_347,
    348: status_348,
    349: status_349,
    350: status_350,
    351: status_351,
    352: status_352,
    353: status_353,
    354: status_354,
    355: status_355,
    356: status_356,
    357: status_357,
    358: status_358,
    359: status_359,
    360: status_360,
    361: status_361,
    362: status_362,
    363: status_363,
    364: status_364,
    365: status_365,
    366: status_366,
    367: status_367,
    368: status_368,
    369: status_369,
    370: status_370,
    371: status_371,
    372: status_372,
    373: status_373,
    374: status_374,
    375: status_375,
    376: status_376,
    377: status_377,
    378: status_378,
    379: status_379,
    380: status_380,
    381: status_381,
    382: status_382,
    383: status_383,
    384: status_384,
    385: status_385,
    386: status_386,
    387: status_387,
    388: status_388,
    389: status_389,
    390: status_390,
    391: status_391,
    392: status_392,
    393: status_393,
    394: status_394,
    395: status_395,
    396: status_396,
    397: status_397,
    398: status_398,
    399: status_399,
    400: status_400,
    401: status_401,
    402: status_402,
    403: status_403,
    404: status_404,
    405: status_405,
    406: status_406,
    407: status_407,
    408: status_408,
    409: status_409,
    410: status_410,
    411: status_411,
    412: status_412,
    413: status_413,
    414: status_414,
    415: status_415,
    416: status_416,
    417: status_417,
    418: status_418,
    419: status_419,
    420: status_420,
    421: status_421,
    422: status_422,
    423: status_423,
    424: status_424,
    425: status_425,
    426: status_426,
    427: status_427,
    428: status_428,
    429: status_429,
    430: status_430,
    431: status_431,
    432: status_432,
    433: status_433,
    434: status_434,
    435: status_435,
    436: status_436,
    437: status_437,
    438: status_438,
    439: status_439,
    440: status_440,
    441: status_441,
    442: status_442,
    443: status_443,
    444: status_444,
    445: status_445,
    446: status_446,
    447: status_447,
    448: status_448,
    449: status_449,
    450: status_450,
    451: status_451,
    452: status_452,
    453: status_453,
    454: status_454,
    455: status_455,
    456: status_456,
    457: status_457,
    458: status_458,
    459: status_459,
    460: status_460,
    461: status_461,
    462: status_462,
    463: status_463,
    464: status_464,
    465: status_465,
    466: status_466,
    467: status_467,
    468: status_468,
    469: status_469,
    470: status_470,
    471: status_471,
    472: status_472,
    473: status_473,
    474: status_474,
    475: status_475,
    476: status_476,
    477: status_477,
    478: status_478,
    479: status_479,
    480: status_480,
    481: status_481,
    482: status_482,
    483: status_483,
    484: status_484,
    485: status_485,
    486: status_486,
    487: status_487,
    488: status_488,
    489: status_489,
    490: status_490,
    491: status_491,
    492: status_492,
    493: status_493,
    494: status_494,
    495: status_495,
    496: status_496,
    497: status_497,
    498: status_498,
    499: status_499,
    500: status_500,
    501: status_501,
    502: status_502,
    503: status_503,
    504: status_504,
    505: status_505,
    506: status_506,
    507: status_507,
    508: status_508,
    509: status_509,
    510: status_510,
    511: status_511,
    512: status_512,
    513: status_513,
    514: status_514,
    515: status_515,
    516: status_516,
    517: status_517,
    518: status_518,
    519: status_519,
    520: status_520,
    521: status_521,
    522: status_522,
    523: status_523,
    524: status_524,
    525: status_525,
    526: status_526,
    527: status_527,
    528: status_528,
    529: status_529,
    530: status_530,
    531: status_531,
    532: status_532,
    533: status_533,
    534: status_534,
    535: status_535,
    536: status_536,
    537: status_537,
    538: status_538,
    539: status_539,
    540: status_540,
    541: status_541,
    542: status_542,
    543: status_543,
    544: status_544,
    545: status_545,
    546: status_546,
    547: status_547,
    548: status_548,
    549: status_549,
    550: status_550,
    551: status_551,
    552: status_552,
    553: status_553,
    554: status_554,
    555: status_555,
    556: status_556,
    557: status_557,
    558: status_558,
    559: status_559,
    560: status_560,
    561: status_561,
    562: status_562,
    563: status_563,
    564: status_564,
    565: status_565,
    566: status_566,
    567: status_567,
    568: status_568,
    569: status_569,
    570: status_570,
    571: status_571,
    572: status_572,
    573: status_573,
    574: status_574,
    575: status_575,
    576: status_576,
    577: status_577,
    578: status_578,
    579: status_579,
    580: status_580,
    581: status_581,
    582: status_582,
    583: status_583,
    584: status_584,
    585: status_585,
    586: status_586,
    587: status_587,
    588: status_588,
    589: status_589,
    590: status_590,
    591: status_591,
    592: status_592,
    593: status_593,
    594: status_594,
    595: status_595,
    596: status_596,
    597: status_597,
    598: status_598,
    599: status_599,
    600: status_600,
    601: status_601,
    602: status_602,
    603: status_603,
    604: status_604,
    605: status_605,
    606: status_606,
    607: status_607,
    608: status_608,
    609: status_609,
    610: status_610,
    611: status_611,
    612: status_612,
    613: status_613,
    614: status_614,
    615: status_615,
    616: status_616,
    617: status_617,
    618: status_618,
    619: status_619,
    620: status_620,
    621: status_621,
    622: status_622,
    623: status_623,
    624: status_624,
    625: status_625,
    626: status_626,
    627: status_627,
    628: status_628,
    629: status_629,
    630: status_630,
    631: status_631,
    632: status_632,
    633: status_633,
    634: status_634,
    635: status_635,
    636: status_636,
    637: status_637,
    638: status_638,
    639: status_639,
    640: status_640,
    641: status_641,
    642: status_642,
    643: status_643,
    644: status_644,
    645: status_645,
    646: status_646,
    647: status_647,
    648: status_648,
    649: status_649,
    650: status_650,
    651: status_651,
    652: status_652,
    653: status_653,
    654: status_654,
    655: status_655,
    656: status_656,
    657: status_657,
    658: status_658,
    659: status_659,
    660: status_660,
    661: status_661,
    662: status_662,
    663: status_663,
    664: status_664,
}


def parse(lexical_iterator: ms_parser.lexical.LexicalBase):
    status_stack = [664]  # 初始化状态栈
    symbol_stack = []  # 初始化对象栈

    action = status_664  # 初始化状态函数
    terminal = lexical_iterator.lex()  # 词法解析出下一个终结符
    next_terminal = False
    try:
        while action:
            if next_terminal is True:
                terminal = lexical_iterator.lex()  # 词法解析出下一个终结符
            action, next_terminal = action(status_stack, symbol_stack, terminal)  # 调用状态函数
    except KeyError as e:
        next_terminal_list = []
        for _ in range(10):
            if terminal.is_end:
                break
            next_terminal_list.append(terminal.symbol_value)
            terminal = lexical_iterator.lex()
        next_terminal_text = "".join(next_terminal_list)
        raise KeyError("解析失败:", next_terminal_text) from e

    return symbol_stack[0]  # 返回最终结果

