"""
SYSTEM_END_OF_INPUT(0): 终结符
SYSTEM_ABORT(1): 终结符
KEYWORD_USED_AS_IDENT(2): 终结符
KEYWORD_USED_AS_KEYWORD(3): 终结符
CONDITIONLESS_JOIN(4): 终结符
STRAIGHT_JOIN(5): 终结符
NEG(6): 终结符
SUBQUERY_AS_EXPR(7): 终结符
EMPTY_FROM_CLAUSE(8): 终结符
OPERATOR_PLUS(9): 终结符
OPERATOR_CARET(10): 终结符
OPERATOR_TILDE(11): 终结符
OPERATOR_PERCENT(12): 终结符
OPERATOR_SUB(13): 终结符
OPERATOR_LT(14): 终结符
OPERATOR_GT(15): 终结符
OPERATOR_EQ(16): 终结符
OPERATOR_STAR(17): 终结符
OPERATOR_SLASH(18): 终结符
OPERATOR_BANG(19): 终结符
OPERATOR_AMP(20): 终结符
OPERATOR_BAR(21): 终结符
OPERATOR_COLON(22): 终结符
OPERATOR_LPAREN(23): 终结符
OPERATOR_RPAREN(24): 终结符
OPERATOR_COMMA(25): 终结符
OPERATOR_LBRACE(26): 终结符
OPERATOR_RBRACE(27): 终结符
OPERATOR_DOT(28): 终结符
OPERATOR_AT(29): 终结符
OPERATOR_SEMICOLON(30): 终结符
OPERATOR_DOLLAR(31): 终结符
OPERATOR_AMP_AMP(32): 终结符
OPERATOR_LT_EQ_GT(33): 终结符
OPERATOR_GT_EQ(34): 终结符
OPERATOR_LT_EQ(35): 终结符
OPERATOR_BANG_EQ(36): 终结符
OPERATOR_BAR_BAR(37): 终结符
OPERATOR_LT_LT(38): 终结符
OPERATOR_GT_GT(39): 终结符
OPERATOR_SUB_GT(40): 终结符
OPERATOR_SUB_GT_GT(41): 终结符
OPERATOR_COLON_EQ(42): 终结符
LITERAL_BIN_NUM(43): 终结符
LITERAL_HEX_NUM(44): 终结符
LITERAL_DECIMAL_NUM(45): 终结符
LITERAL_FLOAT_NUM(46): 终结符
LITERAL_INT_NUM(47): 终结符
LITERAL_NCHAR_STRING(48): 终结符
LITERAL_TEXT_STRING(49): 终结符
LITERAL_UNDERSCORE_CHARSET(50): 终结符
IDENT(51): 终结符
IDENT_QUOTED(52): 终结符
LEX_HOSTNAME(53): 终结符
PARAM_MARKER(54): 终结符
KEYWORD_ACCESSIBLE(55): 终结符
KEYWORD_ACCOUNT(56): 终结符
KEYWORD_ACTION(57): 终结符
KEYWORD_ACTIVE(58): 终结符
KEYWORD_ADD(59): 终结符
KEYWORD_ADDDATE(60): 终结符
KEYWORD_ADMIN(61): 终结符
KEYWORD_AFTER(62): 终结符
KEYWORD_AGAINST(63): 终结符
KEYWORD_AGGREGATE(64): 终结符
KEYWORD_ALGORITHM(65): 终结符
KEYWORD_ALL(66): 终结符
KEYWORD_ALTER(67): 终结符
KEYWORD_ALWAYS(68): 终结符
KEYWORD_ANALYZE(69): 终结符
KEYWORD_AND(70): 终结符
KEYWORD_ANY(71): 终结符
KEYWORD_ARRAY(72): 终结符
KEYWORD_AS(73): 终结符
KEYWORD_ASC(74): 终结符
KEYWORD_ASCII(75): 终结符
KEYWORD_ASENSITIVE(76): 终结符
KEYWORD_AT(77): 终结符
KEYWORD_ATTRIBUTE(78): 终结符
KEYWORD_AUTHENTICATION(79): 终结符
KEYWORD_AUTO_INC(80): 终结符
KEYWORD_AUTOEXTEND_SIZE(81): 终结符
KEYWORD_AUTO_INCREMENT(82): 终结符
KEYWORD_AVG(83): 终结符
KEYWORD_AVG_ROW_LENGTH(84): 终结符
KEYWORD_BACKUP(85): 终结符
KEYWORD_BEFORE(86): 终结符
KEYWORD_BEGIN(87): 终结符
KEYWORD_BERNOULLI(88): 终结符
KEYWORD_BETWEEN(89): 终结符
KEYWORD_BIGINT(90): 终结符
KEYWORD_BINARY(91): 终结符
KEYWORD_BINLOG(92): 终结符
KEYWORD_BIT(93): 终结符
KEYWORD_BLOB(94): 终结符
KEYWORD_BLOCK(95): 终结符
KEYWORD_BOOL(96): 终结符
KEYWORD_BOOLEAN(97): 终结符
KEYWORD_BOTH(98): 终结符
KEYWORD_BTREE(99): 终结符
KEYWORD_BUCKETS(100): 终结符
KEYWORD_BULK(101): 终结符
KEYWORD_BY(102): 终结符
KEYWORD_BYTE(103): 终结符
KEYWORD_CACHE(104): 终结符
KEYWORD_CALL(105): 终结符
KEYWORD_CASCADE(106): 终结符
KEYWORD_CASCADED(107): 终结符
KEYWORD_CASE(108): 终结符
KEYWORD_CATALOG_NAME(109): 终结符
KEYWORD_CHAIN(110): 终结符
KEYWORD_CHALLENGE_RESPONSE(111): 终结符
KEYWORD_CHANGE(112): 终结符
KEYWORD_CHANGED(113): 终结符
KEYWORD_CHANNEL(114): 终结符
KEYWORD_CHAR(115): 终结符
KEYWORD_CHARACTER(116): 终结符
KEYWORD_CHARSET(117): 终结符
KEYWORD_CHECK(118): 终结符
KEYWORD_CHECKSUM(119): 终结符
KEYWORD_CIPHER(120): 终结符
KEYWORD_CLASS_ORIGIN(121): 终结符
KEYWORD_CLIENT(122): 终结符
KEYWORD_CLONE(123): 终结符
KEYWORD_CLOSE(124): 终结符
KEYWORD_COALESCE(125): 终结符
KEYWORD_CODE(126): 终结符
KEYWORD_COLLATE(127): 终结符
KEYWORD_COLLATION(128): 终结符
KEYWORD_COLUMN(129): 终结符
KEYWORD_COLUMNS(130): 终结符
KEYWORD_COLUMN_FORMAT(131): 终结符
KEYWORD_COLUMN_NAME(132): 终结符
KEYWORD_COMMENT(133): 终结符
KEYWORD_COMMIT(134): 终结符
KEYWORD_COMMITTED(135): 终结符
KEYWORD_COMPACT(136): 终结符
KEYWORD_COMPLETION(137): 终结符
KEYWORD_COMPONENT(138): 终结符
KEYWORD_COMPRESSED(139): 终结符
KEYWORD_COMPRESSION(140): 终结符
KEYWORD_CONCURRENT(141): 终结符
KEYWORD_CONDITION(142): 终结符
KEYWORD_CONNECTION(143): 终结符
KEYWORD_CONSISTENT(144): 终结符
KEYWORD_CONSTRAINT(145): 终结符
KEYWORD_CONSTRAINT_CATALOG(146): 终结符
KEYWORD_CONSTRAINT_NAME(147): 终结符
KEYWORD_CONSTRAINT_SCHEMA(148): 终结符
KEYWORD_CONTAINS(149): 终结符
KEYWORD_CONTEXT(150): 终结符
KEYWORD_CONTINUE(151): 终结符
KEYWORD_CONVERT(152): 终结符
KEYWORD_CPU(153): 终结符
KEYWORD_CREATE(154): 终结符
KEYWORD_CROSS(155): 终结符
KEYWORD_CUBE(156): 终结符
KEYWORD_CUME_DIST(157): 终结符
KEYWORD_CURRENT(158): 终结符
KEYWORD_CURRENT_DATE(159): 终结符
KEYWORD_CURRENT_TIME(160): 终结符
KEYWORD_CURRENT_TIMESTAMP(161): 终结符
KEYWORD_CURRENT_USER(162): 终结符
KEYWORD_CURSOR(163): 终结符
KEYWORD_CURSOR_NAME(164): 终结符
KEYWORD_DATA(165): 终结符
KEYWORD_DATABASE(166): 终结符
KEYWORD_DATABASES(167): 终结符
KEYWORD_DATAFILE(168): 终结符
KEYWORD_DATE(169): 终结符
KEYWORD_DATETIME(170): 终结符
KEYWORD_DAY(171): 终结符
KEYWORD_DAY_HOUR(172): 终结符
KEYWORD_DAY_MICROSECOND(173): 终结符
KEYWORD_DAY_MINUTE(174): 终结符
KEYWORD_DAY_SECOND(175): 终结符
KEYWORD_DEALLOCATE(176): 终结符
KEYWORD_DEC(177): 终结符
KEYWORD_DECIMAL(178): 终结符
KEYWORD_DECLARE(179): 终结符
KEYWORD_DEFAULT(180): 终结符
KEYWORD_DEFAULT_AUTH(181): 终结符
KEYWORD_DEFINER(182): 终结符
KEYWORD_DEFINITION(183): 终结符
KEYWORD_DELAYED(184): 终结符
KEYWORD_DELAY_KEY_WRITE(185): 终结符
KEYWORD_DELETE(186): 终结符
KEYWORD_DENSE_RANK(187): 终结符
KEYWORD_DESC(188): 终结符
KEYWORD_DESCRIBE(189): 终结符
KEYWORD_DESCRIPTION(190): 终结符
KEYWORD_DETERMINISTIC(191): 终结符
KEYWORD_DIAGNOSTICS(192): 终结符
KEYWORD_DIRECTORY(193): 终结符
KEYWORD_DISABLE(194): 终结符
KEYWORD_DISCARD(195): 终结符
KEYWORD_DISK(196): 终结符
KEYWORD_DISTINCT(197): 终结符
KEYWORD_DISTINCTROW(198): 终结符
KEYWORD_DIV(199): 终结符
KEYWORD_DO(200): 终结符
KEYWORD_DOUBLE(201): 终结符
KEYWORD_DROP(202): 终结符
KEYWORD_DUAL(203): 终结符
KEYWORD_DUMPFILE(204): 终结符
KEYWORD_DUPLICATE(205): 终结符
KEYWORD_DYNAMIC(206): 终结符
KEYWORD_EACH(207): 终结符
KEYWORD_ELSE(208): 终结符
KEYWORD_ELSEIF(209): 终结符
KEYWORD_EMPTY(210): 终结符
KEYWORD_ENABLE(211): 终结符
KEYWORD_ENCLOSED(212): 终结符
KEYWORD_ENCRYPTION(213): 终结符
KEYWORD_END(214): 终结符
KEYWORD_ENDS(215): 终结符
KEYWORD_ENFORCED(216): 终结符
KEYWORD_ENGINE(217): 终结符
KEYWORD_ENGINES(218): 终结符
KEYWORD_ENGINE_ATTRIBUTE(219): 终结符
KEYWORD_ENUM(220): 终结符
KEYWORD_ERROR(221): 终结符
KEYWORD_ERRORS(222): 终结符
KEYWORD_ESCAPE(223): 终结符
KEYWORD_ESCAPED(224): 终结符
KEYWORD_EVENT(225): 终结符
KEYWORD_EVENTS(226): 终结符
KEYWORD_EVERY(227): 终结符
KEYWORD_EXCEPT(228): 终结符
KEYWORD_EXCHANGE(229): 终结符
KEYWORD_EXCLUDE(230): 终结符
KEYWORD_EXECUTE(231): 终结符
KEYWORD_EXISTS(232): 终结符
KEYWORD_EXIT(233): 终结符
KEYWORD_EXPANSION(234): 终结符
KEYWORD_EXPIRE(235): 终结符
KEYWORD_EXPLAIN(236): 终结符
KEYWORD_EXPORT(237): 终结符
KEYWORD_EXTENDED(238): 终结符
KEYWORD_EXTENT_SIZE(239): 终结符
KEYWORD_FACTOR(240): 终结符
KEYWORD_FAILED_LOGIN_ATTEMPTS(241): 终结符
KEYWORD_FALSE(242): 终结符
KEYWORD_FAST(243): 终结符
KEYWORD_FAULTS(244): 终结符
KEYWORD_FETCH(245): 终结符
KEYWORD_FIELDS(246): 终结符
KEYWORD_FILE(247): 终结符
KEYWORD_FILE_BLOCK_SIZE(248): 终结符
KEYWORD_FILTER(249): 终结符
KEYWORD_FINISH(250): 终结符
KEYWORD_FIRST(251): 终结符
KEYWORD_FIRST_VALUE(252): 终结符
KEYWORD_FIXED(253): 终结符
KEYWORD_FLOAT(254): 终结符
KEYWORD_FLOAT4(255): 终结符
KEYWORD_FLOAT8(256): 终结符
KEYWORD_FLUSH(257): 终结符
KEYWORD_FOLLOWING(258): 终结符
KEYWORD_FOLLOWS(259): 终结符
KEYWORD_FOR(260): 终结符
KEYWORD_FORCE(261): 终结符
KEYWORD_FOREIGN(262): 终结符
KEYWORD_FORMAT(263): 终结符
KEYWORD_FOUND(264): 终结符
KEYWORD_FROM(265): 终结符
KEYWORD_FULL(266): 终结符
KEYWORD_FULLTEXT(267): 终结符
KEYWORD_FUNCTION(268): 终结符
KEYWORD_GENERAL(269): 终结符
KEYWORD_GENERATE(270): 终结符
KEYWORD_GENERATED(271): 终结符
KEYWORD_GEOMCOLLECTION(272): 终结符
KEYWORD_GEOMETRY(273): 终结符
KEYWORD_GEOMETRYCOLLECTION(274): 终结符
KEYWORD_GET(275): 终结符
KEYWORD_GET_MASTER_PUBLIC_KEY(276): 终结符
KEYWORD_GET_FORMAT(277): 终结符
KEYWORD_GET_SOURCE_PUBLIC_KEY(278): 终结符
KEYWORD_GLOBAL(279): 终结符
KEYWORD_GRANT(280): 终结符
KEYWORD_GRANTS(281): 终结符
KEYWORD_GROUP(282): 终结符
KEYWORD_GROUPING(283): 终结符
KEYWORD_GROUPS(284): 终结符
KEYWORD_GROUP_REPLICATION(285): 终结符
KEYWORD_GTIDS(286): 终结符
KEYWORD_GTID_ONLY(287): 终结符
KEYWORD_HANDLER(288): 终结符
KEYWORD_HASH(289): 终结符
KEYWORD_HAVING(290): 终结符
KEYWORD_HELP(291): 终结符
KEYWORD_HIGH_PRIORITY(292): 终结符
KEYWORD_HISTOGRAM(293): 终结符
KEYWORD_HISTORY(294): 终结符
KEYWORD_HOST(295): 终结符
KEYWORD_HOSTS(296): 终结符
KEYWORD_HOUR(297): 终结符
KEYWORD_HOUR_MICROSECOND(298): 终结符
KEYWORD_HOUR_MINUTE(299): 终结符
KEYWORD_HOUR_SECOND(300): 终结符
KEYWORD_IDENTIFIED(301): 终结符
KEYWORD_IF(302): 终结符
KEYWORD_IGNORE(303): 终结符
KEYWORD_IGNORE_SERVER_IDS(304): 终结符
KEYWORD_IMPORT(305): 终结符
KEYWORD_IN(306): 终结符
KEYWORD_INACTIVE(307): 终结符
KEYWORD_INDEX(308): 终结符
KEYWORD_INDEXES(309): 终结符
KEYWORD_INFILE(310): 终结符
KEYWORD_INITIAL(311): 终结符
KEYWORD_INITIAL_SIZE(312): 终结符
KEYWORD_INITIATE(313): 终结符
KEYWORD_INNER(314): 终结符
KEYWORD_INOUT(315): 终结符
KEYWORD_INSENSITIVE(316): 终结符
KEYWORD_INSERT(317): 终结符
KEYWORD_INSERT_METHOD(318): 终结符
KEYWORD_INSTALL(319): 终结符
KEYWORD_INSTANCE(320): 终结符
KEYWORD_INT(321): 终结符
KEYWORD_INT1(322): 终结符
KEYWORD_INT2(323): 终结符
KEYWORD_INT3(324): 终结符
KEYWORD_INT4(325): 终结符
KEYWORD_INT8(326): 终结符
KEYWORD_INTEGER(327): 终结符
KEYWORD_INTERSECT(328): 终结符
KEYWORD_INTERVAL(329): 终结符
KEYWORD_INTO(330): 终结符
KEYWORD_INVISIBLE(331): 终结符
KEYWORD_INVOKER(332): 终结符
KEYWORD_IO(333): 终结符
KEYWORD_IO_AFTER_GTIDS(334): 终结符
KEYWORD_IO_BEFORE_GTIDS(335): 终结符
KEYWORD_IO_THREAD(336): 终结符
KEYWORD_IPC(337): 终结符
KEYWORD_IS(338): 终结符
KEYWORD_ISOLATION(339): 终结符
KEYWORD_ISSUER(340): 终结符
KEYWORD_ITERATE(341): 终结符
KEYWORD_JOIN(342): 终结符
KEYWORD_JSON(343): 终结符
KEYWORD_JSON_TABLE(344): 终结符
KEYWORD_JSON_VALUE(345): 终结符
KEYWORD_KEY(346): 终结符
KEYWORD_KEYRING(347): 终结符
KEYWORD_KEYS(348): 终结符
KEYWORD_KEY_BLOCK_SIZE(349): 终结符
KEYWORD_KILL(350): 终结符
KEYWORD_LAG(351): 终结符
KEYWORD_LANGUAGE(352): 终结符
KEYWORD_LAST(353): 终结符
KEYWORD_LAST_VALUE(354): 终结符
KEYWORD_LATERAL(355): 终结符
KEYWORD_LEAD(356): 终结符
KEYWORD_LEADING(357): 终结符
KEYWORD_LEAVE(358): 终结符
KEYWORD_LEAVES(359): 终结符
KEYWORD_LEFT(360): 终结符
KEYWORD_LESS(361): 终结符
KEYWORD_LEVEL(362): 终结符
KEYWORD_LIKE(363): 终结符
KEYWORD_LIMIT(364): 终结符
KEYWORD_LINEAR(365): 终结符
KEYWORD_LINES(366): 终结符
KEYWORD_LINESTRING(367): 终结符
KEYWORD_LIST(368): 终结符
KEYWORD_LOAD(369): 终结符
KEYWORD_LOCAL(370): 终结符
KEYWORD_LOCALTIME(371): 终结符
KEYWORD_LOCALTIMESTAMP(372): 终结符
KEYWORD_LOCK(373): 终结符
KEYWORD_LOCKED(374): 终结符
KEYWORD_LOCKS(375): 终结符
KEYWORD_LOG(376): 终结符
KEYWORD_LOGFILE(377): 终结符
KEYWORD_LOGS(378): 终结符
KEYWORD_LONG(379): 终结符
KEYWORD_LONGBLOB(380): 终结符
KEYWORD_LONGTEXT(381): 终结符
KEYWORD_LOOP(382): 终结符
KEYWORD_LOW_PRIORITY(383): 终结符
KEYWORD_MANUAL(384): 终结符
KEYWORD_MASTER(385): 终结符
KEYWORD_MASTER_AUTO_POSITION(386): 终结符
KEYWORD_MASTER_BIND(387): 终结符
KEYWORD_MASTER_COMPRESSION_ALGORITHM(388): 终结符
KEYWORD_MASTER_CONNECT_RETRY(389): 终结符
KEYWORD_MASTER_DELAY(390): 终结符
KEYWORD_MASTER_HEARTBEAT_PERIOD(391): 终结符
KEYWORD_MASTER_HOST(392): 终结符
KEYWORD_MASTER_LOG_FILE(393): 终结符
KEYWORD_MASTER_LOG_POS(394): 终结符
KEYWORD_MASTER_PASSWORD(395): 终结符
KEYWORD_MASTER_PORT(396): 终结符
KEYWORD_MASTER_PUBLIC_KEY_PATH(397): 终结符
KEYWORD_MASTER_RETRY_COUNT(398): 终结符
KEYWORD_MASTER_SSL(399): 终结符
KEYWORD_MASTER_SSL_CA(400): 终结符
KEYWORD_MASTER_SSL_CAPATH(401): 终结符
KEYWORD_MASTER_SSL_CERT(402): 终结符
KEYWORD_MASTER_SSL_CIPHER(403): 终结符
KEYWORD_MASTER_SSL_CRL(404): 终结符
KEYWORD_MASTER_SSL_CRLPATH(405): 终结符
KEYWORD_MASTER_SSL_KEY(406): 终结符
KEYWORD_MASTER_SSL_VERIFY_SERVER_CERT(407): 终结符
KEYWORD_MASTER_TLS_CIPHERSUITES(408): 终结符
KEYWORD_MASTER_TLS_VERSION(409): 终结符
KEYWORD_MASTER_USER(410): 终结符
KEYWORD_MASTER_ZSTD_COMPRESSION_LEVEL(411): 终结符
KEYWORD_MATCH(412): 终结符
KEYWORD_MAX_VALUE(413): 终结符
KEYWORD_MAX_CONNECTIONS_PER_HOUR(414): 终结符
KEYWORD_MAX_QUERIES_PER_HOUR(415): 终结符
KEYWORD_MAX_ROWS(416): 终结符
KEYWORD_MAX_SIZE(417): 终结符
KEYWORD_MAX_UPDATES_PER_HOUR(418): 终结符
KEYWORD_MAX_USER_CONNECTIONS(419): 终结符
KEYWORD_MEDIUM(420): 终结符
KEYWORD_MEDIUMBLOB(421): 终结符
KEYWORD_MEDIUMINT(422): 终结符
KEYWORD_MEDIUMTEXT(423): 终结符
KEYWORD_MEMBER(424): 终结符
KEYWORD_MEMORY(425): 终结符
KEYWORD_MERGE(426): 终结符
KEYWORD_MESSAGE_TEXT(427): 终结符
KEYWORD_MICROSECOND(428): 终结符
KEYWORD_MIDDLEINT(429): 终结符
KEYWORD_MIGRATE(430): 终结符
KEYWORD_MINUTE(431): 终结符
KEYWORD_MINUTE_MICROSECOND(432): 终结符
KEYWORD_MINUTE_SECOND(433): 终结符
KEYWORD_MIN_ROWS(434): 终结符
KEYWORD_MOD(435): 终结符
KEYWORD_MODE(436): 终结符
KEYWORD_MODIFIES(437): 终结符
KEYWORD_MODIFY(438): 终结符
KEYWORD_MONTH(439): 终结符
KEYWORD_MULTILINESTRING(440): 终结符
KEYWORD_MULTIPOINT(441): 终结符
KEYWORD_MULTIPOLYGON(442): 终结符
KEYWORD_MUTEX(443): 终结符
KEYWORD_MYSQL_ERRNO(444): 终结符
KEYWORD_NAME(445): 终结符
KEYWORD_NAMES(446): 终结符
KEYWORD_NATIONAL(447): 终结符
KEYWORD_NATURAL(448): 终结符
KEYWORD_NCHAR(449): 终结符
KEYWORD_NDB(450): 终结符
KEYWORD_NDBCLUSTER(451): 终结符
KEYWORD_NESTED(452): 终结符
KEYWORD_NETWORK_NAMESPACE(453): 终结符
KEYWORD_NEVER(454): 终结符
KEYWORD_NEW(455): 终结符
KEYWORD_NEXT(456): 终结符
KEYWORD_NO(457): 终结符
KEYWORD_NODEGROUP(458): 终结符
KEYWORD_NONE(459): 终结符
KEYWORD_NOT(460): 终结符
KEYWORD_NOT2(461): 终结符
KEYWORD_NOWAIT(462): 终结符
KEYWORD_NO_WAIT(463): 终结符
KEYWORD_NO_WRITE_TO_BINLOG(464): 终结符
KEYWORD_NTH_VALUE(465): 终结符
KEYWORD_NTILE(466): 终结符
KEYWORD_NULL(467): 终结符
KEYWORD_NULLS(468): 终结符
KEYWORD_NUMBER(469): 终结符
KEYWORD_NUMERIC(470): 终结符
KEYWORD_NVARCHAR(471): 终结符
KEYWORD_OF(472): 终结符
KEYWORD_OFF(473): 终结符
KEYWORD_OFFSET(474): 终结符
KEYWORD_OJ(475): 终结符
KEYWORD_OLD(476): 终结符
KEYWORD_ON(477): 终结符
KEYWORD_ONE(478): 终结符
KEYWORD_ONLY(479): 终结符
KEYWORD_OPEN(480): 终结符
KEYWORD_OPTIMIZE(481): 终结符
KEYWORD_OPTIMIZER_COSTS(482): 终结符
KEYWORD_OPTION(483): 终结符
KEYWORD_OPTIONAL(484): 终结符
KEYWORD_OPTIONALLY(485): 终结符
KEYWORD_OPTIONS(486): 终结符
KEYWORD_OR(487): 终结符
KEYWORD_OR2(488): 终结符
KEYWORD_ORDER(489): 终结符
KEYWORD_ORDINALITY(490): 终结符
KEYWORD_ORGANIZATION(491): 终结符
KEYWORD_OTHERS(492): 终结符
KEYWORD_OUT(493): 终结符
KEYWORD_OUTER(494): 终结符
KEYWORD_OUTFILE(495): 终结符
KEYWORD_OVER(496): 终结符
KEYWORD_OWNER(497): 终结符
KEYWORD_PACK_KEYS(498): 终结符
KEYWORD_PAGE(499): 终结符
KEYWORD_PARALLEL(500): 终结符
KEYWORD_PARSER(501): 终结符
KEYWORD_PARSE_TREE(502): 终结符
KEYWORD_PARTIAL(503): 终结符
KEYWORD_PARTITION(504): 终结符
KEYWORD_PARTITIONING(505): 终结符
KEYWORD_PARTITIONS(506): 终结符
KEYWORD_PASSWORD(507): 终结符
KEYWORD_PASSWORD_LOCK_TIME(508): 终结符
KEYWORD_PATH(509): 终结符
KEYWORD_PERCENT_RANK(510): 终结符
KEYWORD_PERSIST(511): 终结符
KEYWORD_PERSIST_ONLY(512): 终结符
KEYWORD_PHASE(513): 终结符
KEYWORD_PLUGIN(514): 终结符
KEYWORD_PLUGINS(515): 终结符
KEYWORD_PLUGIN_DIR(516): 终结符
KEYWORD_POINT(517): 终结符
KEYWORD_POLYGON(518): 终结符
KEYWORD_PORT(519): 终结符
KEYWORD_PRECEDES(520): 终结符
KEYWORD_PRECEDING(521): 终结符
KEYWORD_PRECISION(522): 终结符
KEYWORD_PREPARE(523): 终结符
KEYWORD_PRESERVE(524): 终结符
KEYWORD_PREV(525): 终结符
KEYWORD_PRIMARY(526): 终结符
KEYWORD_PRIVILEGES(527): 终结符
KEYWORD_PRIVILEGE_CHECKS_USER(528): 终结符
KEYWORD_PROCEDURE(529): 终结符
KEYWORD_PROCESS(530): 终结符
KEYWORD_PROCESSLIST(531): 终结符
KEYWORD_PROFILE(532): 终结符
KEYWORD_PROFILES(533): 终结符
KEYWORD_PROXY(534): 终结符
KEYWORD_PURGE(535): 终结符
KEYWORD_QUALIFY(536): 终结符
KEYWORD_QUARTER(537): 终结符
KEYWORD_QUERY(538): 终结符
KEYWORD_QUICK(539): 终结符
KEYWORD_RANDOM(540): 终结符
KEYWORD_RANGE(541): 终结符
KEYWORD_RANK(542): 终结符
KEYWORD_READ(543): 终结符
KEYWORD_READS(544): 终结符
KEYWORD_READ_ONLY(545): 终结符
KEYWORD_READ_WRITE(546): 终结符
KEYWORD_REAL(547): 终结符
KEYWORD_REBUILD(548): 终结符
KEYWORD_RECOVER(549): 终结符
KEYWORD_RECURSIVE(550): 终结符
KEYWORD_REDO_BUFFER_SIZE(551): 终结符
KEYWORD_REDUNDANT(552): 终结符
KEYWORD_REFERENCE(553): 终结符
KEYWORD_REFERENCES(554): 终结符
KEYWORD_REGEXP(555): 终结符
KEYWORD_REGISTRATION(556): 终结符
KEYWORD_RELAY(557): 终结符
KEYWORD_RELAYLOG(558): 终结符
KEYWORD_RELAY_LOG_FILE(559): 终结符
KEYWORD_RELAY_LOG_POS(560): 终结符
KEYWORD_RELAY_THREAD(561): 终结符
KEYWORD_RELEASE(562): 终结符
KEYWORD_RELOAD(563): 终结符
KEYWORD_REMOVE(564): 终结符
KEYWORD_RENAME(565): 终结符
KEYWORD_REORGANIZE(566): 终结符
KEYWORD_REPAIR(567): 终结符
KEYWORD_REPEAT(568): 终结符
KEYWORD_REPEATABLE(569): 终结符
KEYWORD_REPLACE(570): 终结符
KEYWORD_REPLICA(571): 终结符
KEYWORD_REPLICAS(572): 终结符
KEYWORD_REPLICATE_DO_DB(573): 终结符
KEYWORD_REPLICATE_DO_TABLE(574): 终结符
KEYWORD_REPLICATE_IGNORE_DB(575): 终结符
KEYWORD_REPLICATE_IGNORE_TABLE(576): 终结符
KEYWORD_REPLICATE_REWRITE_DB(577): 终结符
KEYWORD_REPLICATE_WILD_DO_TABLE(578): 终结符
KEYWORD_REPLICATE_WILD_IGNORE_TABLE(579): 终结符
KEYWORD_REPLICATION(580): 终结符
KEYWORD_REQUIRE(581): 终结符
KEYWORD_REQUIRE_ROW_FORMAT(582): 终结符
KEYWORD_RESET(583): 终结符
KEYWORD_RESIGNAL(584): 终结符
KEYWORD_RESOURCE(585): 终结符
KEYWORD_RESPECT(586): 终结符
KEYWORD_RESTART(587): 终结符
KEYWORD_RESTORE(588): 终结符
KEYWORD_RESTRICT(589): 终结符
KEYWORD_RESUME(590): 终结符
KEYWORD_RETAIN(591): 终结符
KEYWORD_RETURN(592): 终结符
KEYWORD_RETURNED_SQLSTATE(593): 终结符
KEYWORD_RETURNING(594): 终结符
KEYWORD_RETURNS(595): 终结符
KEYWORD_REUSE(596): 终结符
KEYWORD_REVERSE(597): 终结符
KEYWORD_REVOKE(598): 终结符
KEYWORD_RIGHT(599): 终结符
KEYWORD_RLIKE(600): 终结符
KEYWORD_ROLE(601): 终结符
KEYWORD_ROLLBACK(602): 终结符
KEYWORD_ROLLUP(603): 终结符
KEYWORD_ROTATE(604): 终结符
KEYWORD_ROUTINE(605): 终结符
KEYWORD_ROW(606): 终结符
KEYWORD_ROWS(607): 终结符
KEYWORD_ROW_COUNT(608): 终结符
KEYWORD_ROW_FORMAT(609): 终结符
KEYWORD_ROW_NUMBER(610): 终结符
KEYWORD_RTREE(611): 终结符
KEYWORD_S3(612): 终结符
KEYWORD_SAVEPOINT(613): 终结符
KEYWORD_SCHEDULE(614): 终结符
KEYWORD_SCHEMA(615): 终结符
KEYWORD_SCHEMAS(616): 终结符
KEYWORD_SCHEMA_NAME(617): 终结符
KEYWORD_SECOND(618): 终结符
KEYWORD_SECONDARY(619): 终结符
KEYWORD_SECONDARY_ENGINE(620): 终结符
KEYWORD_SECONDARY_ENGINE_ATTRIBUTE(621): 终结符
KEYWORD_SECONDARY_LOAD(622): 终结符
KEYWORD_SECONDARY_UNLOAD(623): 终结符
KEYWORD_SECOND_MICROSECOND(624): 终结符
KEYWORD_SECURITY(625): 终结符
KEYWORD_SELECT(626): 终结符
KEYWORD_SENSITIVE(627): 终结符
KEYWORD_SEPARATOR(628): 终结符
KEYWORD_SERIAL(629): 终结符
KEYWORD_SERIALIZABLE(630): 终结符
KEYWORD_SERVER(631): 终结符
KEYWORD_SESSION(632): 终结符
KEYWORD_SET(633): 终结符
KEYWORD_SHARE(634): 终结符
KEYWORD_SHOW(635): 终结符
KEYWORD_SHUTDOWN(636): 终结符
KEYWORD_SIGNAL(637): 终结符
KEYWORD_SIGNED(638): 终结符
KEYWORD_SIMPLE(639): 终结符
KEYWORD_SKIP(640): 终结符
KEYWORD_SLAVE(641): 终结符
KEYWORD_SLOW(642): 终结符
KEYWORD_SMALLINT(643): 终结符
KEYWORD_SNAPSHOT(644): 终结符
KEYWORD_SOCKET(645): 终结符
KEYWORD_SOME(646): 终结符
KEYWORD_SONAME(647): 终结符
KEYWORD_SOUNDS(648): 终结符
KEYWORD_SOURCE(649): 终结符
KEYWORD_SOURCE_AUTO_POSITION(650): 终结符
KEYWORD_SOURCE_BIND(651): 终结符
KEYWORD_SOURCE_COMPRESSION_ALGORITHM(652): 终结符
KEYWORD_SOURCE_CONNECT_RETRY(653): 终结符
KEYWORD_SOURCE_DELAY(654): 终结符
KEYWORD_SOURCE_HEARTBEAT_PERIOD(655): 终结符
KEYWORD_SOURCE_HOST(656): 终结符
KEYWORD_SOURCE_LOG_FILE(657): 终结符
KEYWORD_SOURCE_LOG_POS(658): 终结符
KEYWORD_SOURCE_PASSWORD(659): 终结符
KEYWORD_SOURCE_PORT(660): 终结符
KEYWORD_SOURCE_PUBLIC_KEY_PATH(661): 终结符
KEYWORD_SOURCE_RETRY_COUNT(662): 终结符
KEYWORD_SOURCE_SSL(663): 终结符
KEYWORD_SOURCE_SSL_CA(664): 终结符
KEYWORD_SOURCE_SSL_CAPATH(665): 终结符
KEYWORD_SOURCE_SSL_CERT(666): 终结符
KEYWORD_SOURCE_SSL_CIPHER(667): 终结符
KEYWORD_SOURCE_SSL_CRL(668): 终结符
KEYWORD_SOURCE_SSL_CRLPATH(669): 终结符
KEYWORD_SOURCE_SSL_KEY(670): 终结符
KEYWORD_SOURCE_SSL_VERIFY_SERVER_CERT(671): 终结符
KEYWORD_SOURCE_TLS_CIPHERSUITES(672): 终结符
KEYWORD_SOURCE_TLS_VERSION(673): 终结符
KEYWORD_SOURCE_USER(674): 终结符
KEYWORD_SOURCE_ZSTD_COMPRESSION_LEVEL(675): 终结符
KEYWORD_SPATIAL(676): 终结符
KEYWORD_SPECIFIC(677): 终结符
KEYWORD_SQL(678): 终结符
KEYWORD_SQLEXCEPTION(679): 终结符
KEYWORD_SQLSTATE(680): 终结符
KEYWORD_SQLWARNING(681): 终结符
KEYWORD_SQL_AFTER_GTIDS(682): 终结符
KEYWORD_SQL_AFTER_MTS_GAPS(683): 终结符
KEYWORD_SQL_BEFORE_GTIDS(684): 终结符
KEYWORD_SQL_BIG_RESULT(685): 终结符
KEYWORD_SQL_BUFFER_RESULT(686): 终结符
KEYWORD_SQL_CALC_FOUND_ROWS(687): 终结符
KEYWORD_SQL_NO_CACHE(688): 终结符
KEYWORD_SQL_SMALL_RESULT(689): 终结符
KEYWORD_SQL_THREAD(690): 终结符
KEYWORD_SQL_TSI_DAY(691): 终结符
KEYWORD_SQL_TSI_HOUR(692): 终结符
KEYWORD_SQL_TSI_MINUTE(693): 终结符
KEYWORD_SQL_TSI_MONTH(694): 终结符
KEYWORD_SQL_TSI_QUARTER(695): 终结符
KEYWORD_SQL_TSI_SECOND(696): 终结符
KEYWORD_SQL_TSI_WEEK(697): 终结符
KEYWORD_SQL_TSI_YEAR(698): 终结符
KEYWORD_SRID(699): 终结符
KEYWORD_SSL(700): 终结符
KEYWORD_ST_COLLECT(701): 终结符
KEYWORD_STACKED(702): 终结符
KEYWORD_START(703): 终结符
KEYWORD_STARTING(704): 终结符
KEYWORD_STARTS(705): 终结符
KEYWORD_STATS_AUTO_RECALC(706): 终结符
KEYWORD_STATS_PERSISTENT(707): 终结符
KEYWORD_STATS_SAMPLE_PAGES(708): 终结符
KEYWORD_STATUS(709): 终结符
KEYWORD_STOP(710): 终结符
KEYWORD_STORAGE(711): 终结符
KEYWORD_STORED(712): 终结符
KEYWORD_STRAIGHT_JOIN(713): 终结符
KEYWORD_STREAM(714): 终结符
KEYWORD_STRING(715): 终结符
KEYWORD_SUBCLASS_ORIGIN(716): 终结符
KEYWORD_SUBJECT(717): 终结符
KEYWORD_SUBPARTITION(718): 终结符
KEYWORD_SUBPARTITIONS(719): 终结符
KEYWORD_SUBDATE(720): 终结符
KEYWORD_SUPER(721): 终结符
KEYWORD_SUSPEND(722): 终结符
KEYWORD_SWAPS(723): 终结符
KEYWORD_SWITCHES(724): 终结符
KEYWORD_SYSTEM(725): 终结符
KEYWORD_TABLE(726): 终结符
KEYWORD_TABLES(727): 终结符
KEYWORD_TABLESAMPLE(728): 终结符
KEYWORD_TABLESPACE(729): 终结符
KEYWORD_TABLE_CHECKSUM(730): 终结符
KEYWORD_TABLE_NAME(731): 终结符
KEYWORD_TEMPORARY(732): 终结符
KEYWORD_TEMPTABLE(733): 终结符
KEYWORD_TERMINATED(734): 终结符
KEYWORD_TEXT(735): 终结符
KEYWORD_THAN(736): 终结符
KEYWORD_THEN(737): 终结符
KEYWORD_THREAD_PRIORITY(738): 终结符
KEYWORD_TIES(739): 终结符
KEYWORD_TIME(740): 终结符
KEYWORD_TIMESTAMP(741): 终结符
KEYWORD_TIMESTAMP_ADD(742): 终结符
KEYWORD_TIMESTAMP_DIFF(743): 终结符
KEYWORD_TINYBLOB(744): 终结符
KEYWORD_TINYINT(745): 终结符
KEYWORD_TINYTEXT(746): 终结符
KEYWORD_TLS(747): 终结符
KEYWORD_TO(748): 终结符
KEYWORD_TRAILING(749): 终结符
KEYWORD_TRANSACTION(750): 终结符
KEYWORD_TRIGGER(751): 终结符
KEYWORD_TRIGGERS(752): 终结符
KEYWORD_TRUE(753): 终结符
KEYWORD_TRUNCATE(754): 终结符
KEYWORD_TYPE(755): 终结符
KEYWORD_TYPES(756): 终结符
KEYWORD_UNBOUNDED(757): 终结符
KEYWORD_UNCOMMITTED(758): 终结符
KEYWORD_UNDEFINED(759): 终结符
KEYWORD_UNDO(760): 终结符
KEYWORD_UNDOFILE(761): 终结符
KEYWORD_UNDO_BUFFER_SIZE(762): 终结符
KEYWORD_UNICODE(763): 终结符
KEYWORD_UNINSTALL(764): 终结符
KEYWORD_UNION(765): 终结符
KEYWORD_UNIQUE(766): 终结符
KEYWORD_UNKNOWN(767): 终结符
KEYWORD_UNLOCK(768): 终结符
KEYWORD_UNREGISTER(769): 终结符
KEYWORD_UNSIGNED(770): 终结符
KEYWORD_UNTIL(771): 终结符
KEYWORD_UPDATE(772): 终结符
KEYWORD_UPGRADE(773): 终结符
KEYWORD_URL(774): 终结符
KEYWORD_USAGE(775): 终结符
KEYWORD_USE(776): 终结符
KEYWORD_USER(777): 终结符
KEYWORD_USER_RESOURCES(778): 终结符
KEYWORD_USE_FRM(779): 终结符
KEYWORD_USING(780): 终结符
KEYWORD_UTC_DATE(781): 终结符
KEYWORD_UTC_TIME(782): 终结符
KEYWORD_UTC_TIMESTAMP(783): 终结符
KEYWORD_VALIDATION(784): 终结符
KEYWORD_VALUE(785): 终结符
KEYWORD_VALUES(786): 终结符
KEYWORD_VARBINARY(787): 终结符
KEYWORD_VARCHAR(788): 终结符
KEYWORD_VARCHARACTER(789): 终结符
KEYWORD_VARIABLES(790): 终结符
KEYWORD_VARYING(791): 终结符
KEYWORD_VCPU(792): 终结符
KEYWORD_VIEW(793): 终结符
KEYWORD_VIRTUAL(794): 终结符
KEYWORD_VISIBLE(795): 终结符
KEYWORD_WAIT(796): 终结符
KEYWORD_WARNINGS(797): 终结符
KEYWORD_WEEK(798): 终结符
KEYWORD_WEIGHT_STRING(799): 终结符
KEYWORD_WHEN(800): 终结符
KEYWORD_WHERE(801): 终结符
KEYWORD_WHILE(802): 终结符
KEYWORD_WINDOW(803): 终结符
KEYWORD_WITH(804): 终结符
KEYWORD_WITHOUT(805): 终结符
KEYWORD_WORK(806): 终结符
KEYWORD_WRAPPER(807): 终结符
KEYWORD_WRITE(808): 终结符
KEYWORD_X509(809): 终结符
KEYWORD_XA(810): 终结符
KEYWORD_XID(811): 终结符
KEYWORD_XML(812): 终结符
KEYWORD_XOR(813): 终结符
KEYWORD_YEAR(814): 终结符
KEYWORD_YEAR_MONTH(815): 终结符
KEYWORD_ZEROFILL(816): 终结符
KEYWORD_ZONE(817): 终结符
KEYWORD_WITH_ROLLUP(818): 终结符
WORD_CURDATE(819): 终结符
WORD_CURTIME(820): 终结符
WORD_DATE_ADD_INTERVAL(821): 终结符
WORD_DATE_SUB_INTERVAL(822): 终结符
WORD_EXTRACT(823): 终结符
WORD_NOW(824): 终结符
WORD_SYSDATE(825): 终结符
WORD_BIT_AND(826): 终结符
WORD_BIT_OR(827): 终结符
WORD_BIT_XOR(828): 终结符
WORD_COUNT(829): 终结符
WORD_GROUP_CONCAT(830): 终结符
WORD_JSON_ARRAYAGG(831): 终结符
WORD_JSON_OBJECTAGG(832): 终结符
WORD_MAX(833): 终结符
WORD_MIN(834): 终结符
WORD_STD(835): 终结符
WORD_STDDEV_SAMP(836): 终结符
WORD_SUM(837): 终结符
WORD_VAR_SAMP(838): 终结符
WORD_VARIANCE(839): 终结符
WORD_SUBSTRING(840): 终结符
WORD_TRIM(841): 终结符
WORD_CAST(842): 终结符
entry(843): [843->·889]
opt_of(844): [844->·472, 844->·]
opt_braces(845): [845->·23 24, 845->·]
keyword_charset(846): [846->·115 633, 846->·117]
keyword_nchar(847): [847->·449, 847->·447 115]
keyword_varchar(848): [848->·788, 848->·115 791]
keyword_nvarchar(849): [849->·471, 849->·447 788, 849->·449 788, 849->·447 115 791, 849->·449 791]
text_literal_sys(850): [850->·49]
int_literal(851): [851->·47]
num_literal(852): [852->·851, 852->·46, 852->·45]
temporal_literal(853): [853->·169 49, 853->·740 49, 853->·170 49]
literal(854): [854->·850, 854->·852, 854->·853, 854->·242, 854->·753, 854->·44, 854->·43, 854->·50 44, 854->·50 43]
null_literal(855): [855->·467]
literal_or_null(856): [856->·854, 856->·855]
text_literal(857): [857->·49, 857->·48, 857->·50 49, 857->·857 49]
text_string(858): [858->·49, 858->·44, 858->·43]
text_string_list(859): [859->·859 25 858, 859->·858]
signed_literal(860): [860->·854, 860->·9 852, 860->·13 852]
signed_literal_or_null(861): [861->·860, 861->·855]
param_marker(862): [862->·54]
ident_or_text(863): [863->·912, 863->·850, 863->·53]
charset_ascii(864): [864->·75, 864->·91 75, 864->·75 91]
charset_unicode(865): [865->·763, 865->·91 763, 865->·763 91]
charset_name(866): [866->·863, 866->·91]
opt_charset(867): [867->·, 867->·864, 867->·865, 867->·103, 867->·91, 867->·846 866, 867->·846 866 91, 867->·91 846 866]
field_type_param_1(868): [868->·23 852 24]
opt_field_type_param_1(869): [869->·868, 869->·]
field_type_param_2(870): [870->·23 852 25 852 24]
opt_field_type_param_2(871): [871->·870, 871->·]
opt_field_type_param_0_1(872): [872->·23 852 24, 872->·23 24, 872->·]
opt_field_type_param_1_2(873): [873->·23 852 25 852 24, 873->·23 852 24, 873->·]
cast_type(874): [874->·91 869, 874->·115 869 867, 874->·449 869, 874->·638, 874->·638 321, 874->·770, 874->·770 321, 874->·169, 874->·814, 874->·740 868, 874->·170 868, 874->·178 873, 874->·343, 874->·547, 874->·201, 874->·201 522, 874->·254 869, 874->·517, 874->·367, 874->·518, 874->·441, 874->·440, 874->·442, 874->·274]
field_option(875): [875->·638, 875->·770, 875->·816]
field_option_list(876): [876->·876 875, 876->·875]
opt_field_option_list(877): [877->·876, 877->·]
field_type(878): [878->·321 869 877, 878->·745 869 877, 878->·643 869 877, 878->·422 869 877, 878->·90 869 877, 878->·547 871 877, 878->·201 871 877, 878->·201 522 871 877, 878->·254 873 877, 878->·178 873 877, 878->·470 873 877, 878->·253 873 877, 878->·93, 878->·93 868, 878->·96, 878->·97, 878->·115 868 867, 878->·115 867, 878->·847 868 91, 878->·847 868, 878->·847 91, 878->·847, 878->·91 868, 878->·91, 878->·848 868 867, 878->·849 868 91, 878->·849 868, 878->·787 868, 878->·814 869 877, 878->·169, 878->·740 868, 878->·741 868, 878->·170 868, 878->·744, 878->·94 869, 878->·421, 878->·380, 878->·273, 878->·274, 878->·517, 878->·441, 878->·367, 878->·440, 878->·518, 878->·442, 878->·379 787, 878->·379 848 867, 878->·746 867, 878->·735 869 867, 878->·423 867, 878->·381 867, 878->·220 23 859 24 867, 878->·633 23 859 24 867, 878->·379 867, 878->·629, 878->·343]
simple_expr(879): [879->·918, 879->·856, 879->·9 879, 879->·13 879, 879->·11 879]
binary_expr(880): [880->·880 21 880, 880->·880 20 880, 880->·880 38 880, 880->·880 39 880, 880->·880 9 880, 880->·880 13 880, 880->·880 17 880, 880->·880 18 880, 880->·880 12 880, 880->·880 199 880, 880->·880 435 880, 880->·880 10 880, 880->·879]
predicate_expr(881): [881->·880 424 844 23 879 24, 881->·880 89 880 70 881, 881->·880 460 89 880 70 881, 881->·880 648 363 880, 881->·880 363 879, 881->·880 363 879 223 879, 881->·880 460 363 879, 881->·880 460 363 879 223 879, 881->·880 555 880, 881->·880 460 555 880, 881->·880]
bool_expr(882): [882->·882 338 467, 882->·882 338 460 467, 882->·882 885 881, 882->·881]
expr(883): [883->·883 487 883, 883->·883 813 883, 883->·883 70 883, 883->·460 883, 883->·882 338 753, 883->·882 338 460 753, 883->·882 338 242, 883->·882 338 460 242, 883->·882 338 767, 883->·882 338 460 767, 883->·882]
expr_list(884): [884->·884 25 883, 884->·883]
operator_compare(885): [885->·16, 885->·33, 885->·34, 885->·15, 885->·35, 885->·14, 885->·36]
json_on_response(886): [886->·221, 886->·467, 886->·180 860]
json_on_empty(887): [887->·886 477 210]
json_on_error(888): [888->·886 477 221]
json_on_empty_on_error(889): [889->·887 888, 889->·888 887, 889->·887, 889->·888, 889->·]
interval_time_unit(890): [890->·891, 890->·815, 890->·172, 890->·174, 890->·175, 890->·173, 890->·299, 890->·300, 890->·298, 890->·433, 890->·432, 890->·624]
time_unit(891): [891->·814, 891->·537, 891->·439, 891->·798, 891->·171, 891->·297, 891->·431, 891->·618, 891->·428]
window_border_type(892): [892->·607, 892->·541, 892->·284]
opt_window_exclude(893): [893->·230 158 606, 893->·230 282, 893->·230 739, 893->·230 457 492, 893->·]
window_frame_start(894): [894->·757 521, 894->·852 521, 894->·862 521, 894->·329 883 890 521, 894->·158 606]
window_frame_bound(895): [895->·894, 895->·757 258, 895->·852 258, 895->·862 258, 895->·329 883 890 258]
window_frame_extent(896): [896->·894, 896->·89 895 70 895]
opt_window_frame_clause(897): [897->·892 896 893, 897->·]
opt_partition_clause(898): [898->·504 102 884, 898->·]
window_name_or_spec(899): [899->·912, 899->·23 920 898 925 897 24]
windowing_clause(900): [900->·496 899]
opt_windowing_clause(901): [901->·900, 901->·]
ident_sys(902): [902->·51, 902->·52]
ident_keywords_unambiguous(903): [903->·56, 903->·57, 903->·58, 903->·60, 903->·61, 903->·62, 903->·63, 903->·64, 903->·65, 903->·68, 903->·71, 903->·72, 903->·77, 903->·78, 903->·79, 903->·80, 903->·81, 903->·83, 903->·84, 903->·85, 903->·92, 903->·93, 903->·95, 903->·96, 903->·97, 903->·99, 903->·100, 903->·101, 903->·107, 903->·109, 903->·110, 903->·111, 903->·113, 903->·114, 903->·120, 903->·121, 903->·122, 903->·124, 903->·125, 903->·126, 903->·128, 903->·130, 903->·131, 903->·132, 903->·135, 903->·136, 903->·137, 903->·138, 903->·139, 903->·140, 903->·141, 903->·143, 903->·144, 903->·146, 903->·147, 903->·148, 903->·150, 903->·153, 903->·158, 903->·164, 903->·165, 903->·168, 903->·169, 903->·170, 903->·171, 903->·181, 903->·182, 903->·183, 903->·185, 903->·190, 903->·192, 903->·193, 903->·194, 903->·195, 903->·196, 903->·204, 903->·205, 903->·206, 903->·211, 903->·213, 903->·215, 903->·216, 903->·217, 903->·218, 903->·219, 903->·220, 903->·221, 903->·222, 903->·223, 903->·226, 903->·227, 903->·229, 903->·230, 903->·234, 903->·235, 903->·237, 903->·238, 903->·239, 903->·240, 903->·241, 903->·243, 903->·244, 903->·248, 903->·249, 903->·250, 903->·251, 903->·253, 903->·258, 903->·263, 903->·264, 903->·266, 903->·269, 903->·270, 903->·273, 903->·274, 903->·276, 903->·277, 903->·278, 903->·281, 903->·285, 903->·286, 903->·287, 903->·289, 903->·293, 903->·294, 903->·295, 903->·296, 903->·297, 903->·301, 903->·304, 903->·307, 903->·309, 903->·311, 903->·312, 903->·313, 903->·318, 903->·320, 903->·331, 903->·332, 903->·333, 903->·337, 903->·339, 903->·340, 903->·343, 903->·345, 903->·347, 903->·349, 903->·353, 903->·359, 903->·361, 903->·362, 903->·367, 903->·368, 903->·374, 903->·375, 903->·376, 903->·377, 903->·378, 903->·385, 903->·386, 903->·388, 903->·389, 903->·390, 903->·391, 903->·392, 903->·393, 903->·394, 903->·395, 903->·396, 903->·397, 903->·398, 903->·399, 903->·400, 903->·401, 903->·402, 903->·403, 903->·404, 903->·405, 903->·406, 903->·408, 903->·409, 903->·410, 903->·411, 903->·414, 903->·415, 903->·416, 903->·417, 903->·418, 903->·419, 903->·420, 903->·424, 903->·425, 903->·426, 903->·427, 903->·428, 903->·430, 903->·431, 903->·434, 903->·436, 903->·438, 903->·439, 903->·440, 903->·441, 903->·442, 903->·443, 903->·444, 903->·445, 903->·446, 903->·447, 903->·449, 903->·451, 903->·452, 903->·453, 903->·454, 903->·455, 903->·456, 903->·458, 903->·462, 903->·463, 903->·468, 903->·469, 903->·471, 903->·473, 903->·474, 903->·475, 903->·476, 903->·478, 903->·479, 903->·480, 903->·484, 903->·486, 903->·490, 903->·491, 903->·492, 903->·497, 903->·498, 903->·499, 903->·501, 903->·502, 903->·503, 903->·505, 903->·506, 903->·507, 903->·508, 903->·509, 903->·513, 903->·514, 903->·515, 903->·516, 903->·517, 903->·518, 903->·519, 903->·521, 903->·524, 903->·525, 903->·527, 903->·528, 903->·531, 903->·532, 903->·533, 903->·537, 903->·538, 903->·539, 903->·540, 903->·545, 903->·548, 903->·549, 903->·551, 903->·552, 903->·553, 903->·556, 903->·557, 903->·558, 903->·559, 903->·560, 903->·561, 903->·564, 903->·566, 903->·569, 903->·571, 903->·572, 903->·573, 903->·574, 903->·575, 903->·576, 903->·577, 903->·578, 903->·579, 903->·582, 903->·586, 903->·588, 903->·590, 903->·591, 903->·593, 903->·594, 903->·595, 903->·596, 903->·597, 903->·601, 903->·603, 903->·604, 903->·605, 903->·608, 903->·609, 903->·611, 903->·612, 903->·614, 903->·617, 903->·618, 903->·619, 903->·620, 903->·621, 903->·622, 903->·623, 903->·625, 903->·629, 903->·630, 903->·631, 903->·634, 903->·639, 903->·640, 903->·642, 903->·644, 903->·645, 903->·647, 903->·648, 903->·649, 903->·650, 903->·651, 903->·652, 903->·653, 903->·654, 903->·655, 903->·656, 903->·657, 903->·658, 903->·659, 903->·660, 903->·661, 903->·662, 903->·663, 903->·664, 903->·665, 903->·666, 903->·667, 903->·668, 903->·669, 903->·670, 903->·671, 903->·672, 903->·673, 903->·674, 903->·675, 903->·682, 903->·683, 903->·684, 903->·686, 903->·688, 903->·690, 903->·699, 903->·701, 903->·702, 903->·705, 903->·706, 903->·707, 903->·708, 903->·709, 903->·711, 903->·714, 903->·715, 903->·716, 903->·717, 903->·718, 903->·719, 903->·720, 903->·722, 903->·723, 903->·724, 903->·727, 903->·729, 903->·730, 903->·731, 903->·732, 903->·733, 903->·735, 903->·736, 903->·738, 903->·739, 903->·740, 903->·741, 903->·742, 903->·743, 903->·747, 903->·750, 903->·752, 903->·755, 903->·756, 903->·757, 903->·758, 903->·759, 903->·761, 903->·762, 903->·767, 903->·769, 903->·771, 903->·773, 903->·774, 903->·777, 903->·779, 903->·784, 903->·785, 903->·790, 903->·792, 903->·793, 903->·795, 903->·796, 903->·797, 903->·798, 903->·799, 903->·805, 903->·806, 903->·807, 903->·809, 903->·811, 903->·812, 903->·814, 903->·817]
ident_keywords_ambiguous_1_roles_and_labels(904): [904->·587, 904->·636, 904->·231]
ident_keywords_ambiguous_2_labels(905): [905->·257, 905->·641, 905->·259, 905->·133, 905->·134, 905->·520, 905->·523, 905->·149, 905->·288, 905->·291, 905->·810, 905->·176, 905->·305, 905->·567, 905->·319, 905->·703, 905->·710, 905->·583, 905->·200, 905->·457, 905->·75, 905->·214, 905->·87, 905->·602, 905->·352, 905->·613, 905->·103, 905->·104, 905->·754, 905->·117, 905->·119, 905->·123, 905->·764, 905->·638, 905->·763]
ident_keywords_ambiguous_3_roles(906): [906->·225, 906->·580, 906->·585, 906->·459, 906->·721, 906->·530, 906->·563, 906->·534, 906->·247]
ident_keywords_ambiguous_4_system_variables(907): [907->·512, 907->·370, 907->·279, 907->·632, 907->·511]
ident_general_keyword(908): [908->·903, 908->·904, 908->·905, 908->·906, 908->·907]
ident_label_keyword(909): [909->·903, 909->·906, 909->·907]
ident_role_keyword(910): [910->·903, 910->·905, 910->·907]
ident_variable_keyword(911): [911->·903, 911->·904, 911->·905, 911->·906]
ident(912): [912->·902, 912->·908]
label_ident(913): [913->·902, 913->·909]
role_ident(914): [914->·902, 914->·910]
variable_ident(915): [915->·902, 915->·911]
ident_2(916): [916->·912 28 912]
ident_3(917): [917->·912 28 912 28 912]
simple_ident(918): [918->·912, 918->·916, 918->·917]
simple_ident_list(919): [919->·919 25 918, 919->·918]
opt_ident(920): [920->·912, 920->·]
order_direction(921): [921->·74, 921->·188]
opt_order_direction(922): [922->·921, 922->·]
order_expr(923): [923->·883 922]
order_by_list(924): [924->·924 25 923, 924->·923]
opt_order_by_clause(925): [925->·489 102 924, 925->·]
S'(926): [926->·843]
"""

from typing import Any, Callable, List, Optional, Tuple

import metasequoia_parser as ms_parser

from metasequoia_sql_new import ast


def action_shift_6(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(6)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_6, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_8(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(8)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_8, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_10(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(10)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_10, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_15(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(15)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_15, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_16(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(16)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_16, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_3(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(3)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_3, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_4(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(4)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_4, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_2(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(2)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_2, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_26(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(26)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_26, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_23(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(23)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_23, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_13(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(13)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_13, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_14(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(14)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_14, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_1(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(1)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_1, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_17(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(17)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_17, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_7(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(7)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_7, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_9(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(9)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_9, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_12(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(12)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_12, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_11(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(11)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_11, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_18(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(18)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_18, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_31(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(31)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_31, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_36(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(36)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_36, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_32(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(32)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_32, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_33(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(33)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_33, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_37(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(37)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_37, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_28(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(28)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_28, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_29(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(29)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_29, True  # 返回状态栈常量状态的终结符行为函数


def action_shift_30(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    status_stack.append(30)  # 向状态栈中压入常量
    symbol_stack.append(terminal.symbol_value)  # 向符号栈中压入当前终结符的值
    return status_30, True  # 返回状态栈常量状态的终结符行为函数


def action_reduce_0_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 843)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_1_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.StringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 850)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_2_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.IntLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 851)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_3_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.DecimalLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_4_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FloatLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_5_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 852)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_6_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.TemporalLiteral.create_date_literal(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 853)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_8_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.TemporalLiteral.create_datetime_literal(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 853)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_10_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.TemporalLiteral.create_time_literal(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 853)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_12_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.FalseLiteral()
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_13_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.BinStringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_14_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.HexStringLiteral(value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_15_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.BinStringLiteral(value=symbol_stack[-1], charset=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_16_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.HexStringLiteral(value=symbol_stack[-1], charset=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_18_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.TrueLiteral()
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_19_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 854)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_22_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1].neg()
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 860)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_24_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 860)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_25_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-1]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 860)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_27_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnResponse(response_type=ast.JsonOnResponseTypeEnum.DEFAULT, default_value=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 886)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_29_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnResponse(response_type=ast.JsonOnResponseTypeEnum.ERROR)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 886)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_30_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnResponse(response_type=ast.JsonOnResponseTypeEnum.NULL)
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 886)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_31_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-3]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 887)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_36_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = symbol_stack[-3]
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-4], 888)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-3:] = [symbol_value]  # 出栈 3 个参数，入栈新生成的非终结符的值
    status_stack[-3:] = [next_status]  # 出栈 3 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_39_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnEmptyOnError(on_empty=symbol_stack[-2], on_error=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 889)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_40_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnEmptyOnError(on_empty=symbol_stack[-1], on_error=ast.JsonOnResponse.implicit())
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 889)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_41_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnEmptyOnError(on_empty=symbol_stack[-1], on_error=symbol_stack[-2])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-3], 889)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-2:] = [symbol_value]  # 出栈 2 个参数，入栈新生成的非终结符的值
    status_stack[-2:] = [next_status]  # 出栈 2 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_42_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnEmptyOnError(on_empty=ast.JsonOnResponse.implicit(), on_error=symbol_stack[-1])
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-2], 889)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack[-1:] = [symbol_value]  # 出栈 1 个参数，入栈新生成的非终结符的值
    status_stack[-1:] = [next_status]  # 出栈 1 个参数，入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_reduce_44_1(status_stack: List[int], symbol_stack: List[Any], _: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    symbol_value = ast.JsonOnEmptyOnError(on_empty=ast.JsonOnResponse.implicit(), on_error=ast.JsonOnResponse.implicit())
    next_status = STATUS_SYMBOL_GOTO_HASH[(status_stack[-1], 889)]  # 根据状态和生成的非终结符获取需要 GOTO 的状态
    symbol_stack.append(symbol_value)  # 出栈 0 个参数（不出栈），入栈新生成的非终结符的值
    status_stack.append(next_status)  # 出栈 0 个参数（不出栈），入栈 GOTO 的新状态
    return STATUS_HASH[next_status], False  # 返回新状态的行为函数


def action_accept(_1: List[int], _2: List[Any], _3: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    return None, True


STATUS_0_TERMINAL_ACTION_HASH = {
    0: action_reduce_0_1,
}


def status_0(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_0_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_1_TERMINAL_ACTION_HASH = {
    477: action_reduce_1_1,
}


def status_1(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_1_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_2_TERMINAL_ACTION_HASH = {
    477: action_reduce_2_1,
}


def status_2(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_2_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_3_TERMINAL_ACTION_HASH = {
    477: action_reduce_3_1,
}


def status_3(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_3_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_4_TERMINAL_ACTION_HASH = {
    477: action_reduce_4_1,
}


def status_4(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_4_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_5_TERMINAL_ACTION_HASH = {
    477: action_reduce_5_1,
}


def status_5(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_5_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_6_TERMINAL_ACTION_HASH = {
    477: action_reduce_6_1,
}


def status_6(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_6_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_7_TERMINAL_ACTION_HASH = {
    49: action_shift_6,
}


def status_7(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_7_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_8_TERMINAL_ACTION_HASH = {
    477: action_reduce_8_1,
}


def status_8(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_8_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_9_TERMINAL_ACTION_HASH = {
    49: action_shift_8,
}


def status_9(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_9_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_10_TERMINAL_ACTION_HASH = {
    477: action_reduce_10_1,
}


def status_10(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_10_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_11_TERMINAL_ACTION_HASH = {
    49: action_shift_10,
}


def status_11(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_11_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_12_TERMINAL_ACTION_HASH = {
    477: action_reduce_12_1,
}


def status_12(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_12_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_13_TERMINAL_ACTION_HASH = {
    477: action_reduce_13_1,
}


def status_13(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_13_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_14_TERMINAL_ACTION_HASH = {
    477: action_reduce_14_1,
}


def status_14(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_14_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_15_TERMINAL_ACTION_HASH = {
    477: action_reduce_15_1,
}


def status_15(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_15_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_16_TERMINAL_ACTION_HASH = {
    477: action_reduce_16_1,
}


def status_16(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_16_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_17_TERMINAL_ACTION_HASH = {
    43: action_shift_15,
    44: action_shift_16,
}


def status_17(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_17_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_18_TERMINAL_ACTION_HASH = {
    477: action_reduce_18_1,
}


def status_18(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_18_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_19_TERMINAL_ACTION_HASH = {
    477: action_reduce_19_1,
}


def status_19(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_19_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_20_TERMINAL_ACTION_HASH = {
    477: action_reduce_19_1,
}


def status_20(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_20_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_21_TERMINAL_ACTION_HASH = {
    477: action_reduce_19_1,
}


def status_21(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_21_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_22_TERMINAL_ACTION_HASH = {
    477: action_reduce_22_1,
}


def status_22(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_22_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_23_TERMINAL_ACTION_HASH = {
    45: action_shift_3,
    46: action_shift_4,
    47: action_shift_2,
}


def status_23(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_23_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_24_TERMINAL_ACTION_HASH = {
    477: action_reduce_24_1,
}


def status_24(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_24_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_25_TERMINAL_ACTION_HASH = {
    477: action_reduce_25_1,
}


def status_25(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_25_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_26_TERMINAL_ACTION_HASH = {
    45: action_shift_3,
    46: action_shift_4,
    47: action_shift_2,
}


def status_26(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_26_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_27_TERMINAL_ACTION_HASH = {
    477: action_reduce_27_1,
}


def status_27(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_27_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_28_TERMINAL_ACTION_HASH = {
    9: action_shift_26,
    13: action_shift_23,
    43: action_shift_13,
    44: action_shift_14,
    45: action_shift_3,
    46: action_shift_4,
    47: action_shift_2,
    49: action_shift_1,
    50: action_shift_17,
    169: action_shift_7,
    170: action_shift_9,
    242: action_shift_12,
    740: action_shift_11,
    753: action_shift_18,
}


def status_28(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_28_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_29_TERMINAL_ACTION_HASH = {
    477: action_reduce_29_1,
}


def status_29(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_29_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_30_TERMINAL_ACTION_HASH = {
    477: action_reduce_30_1,
}


def status_30(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_30_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_31_TERMINAL_ACTION_HASH = {
    0: action_reduce_31_1,
    180: action_reduce_31_1,
    221: action_reduce_31_1,
    467: action_reduce_31_1,
}


def status_31(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_31_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_32_TERMINAL_ACTION_HASH = {
    210: action_shift_31,
    221: action_shift_36,
}


def status_32(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_32_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_33_TERMINAL_ACTION_HASH = {
    210: action_shift_31,
}


def status_33(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_33_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_34_TERMINAL_ACTION_HASH = {
    477: action_shift_32,
}


def status_34(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_34_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_35_TERMINAL_ACTION_HASH = {
    477: action_shift_33,
}


def status_35(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_35_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_36_TERMINAL_ACTION_HASH = {
    0: action_reduce_36_1,
    180: action_reduce_36_1,
    221: action_reduce_36_1,
    467: action_reduce_36_1,
}


def status_36(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_36_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_37_TERMINAL_ACTION_HASH = {
    221: action_shift_36,
}


def status_37(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_37_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_38_TERMINAL_ACTION_HASH = {
    477: action_shift_37,
}


def status_38(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_38_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_39_TERMINAL_ACTION_HASH = {
    0: action_reduce_39_1,
}


def status_39(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_39_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_40_TERMINAL_ACTION_HASH = {
    0: action_reduce_40_1,
    180: action_shift_28,
    221: action_shift_29,
    467: action_shift_30,
}


def status_40(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_40_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_41_TERMINAL_ACTION_HASH = {
    0: action_reduce_41_1,
}


def status_41(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_41_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_42_TERMINAL_ACTION_HASH = {
    0: action_reduce_42_1,
    180: action_shift_28,
    221: action_shift_29,
    467: action_shift_30,
}


def status_42(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_42_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_43_TERMINAL_ACTION_HASH = {
    0: action_accept,
}


def status_43(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_43_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_44_TERMINAL_ACTION_HASH = {
    0: action_reduce_44_1,
    180: action_shift_28,
    221: action_shift_29,
    467: action_shift_30,
}


def status_44(status_stack: List[int], symbol_stack: List[Any], terminal: ms_parser.symbol.Terminal) -> Tuple[Optional[Callable], bool]:
    move_action = STATUS_44_TERMINAL_ACTION_HASH[terminal.symbol_id]  # 通过哈希映射获取行为函数
    return move_action(status_stack, symbol_stack, terminal)  # 执行行为函数


STATUS_SYMBOL_GOTO_HASH = {
    (23, 851): 5, 
    (23, 852): 22, 
    (26, 851): 5, 
    (26, 852): 25, 
    (28, 850): 19, 
    (28, 851): 5, 
    (28, 852): 20, 
    (28, 853): 21, 
    (28, 854): 24, 
    (28, 860): 27, 
    (40, 886): 38, 
    (40, 888): 39, 
    (42, 886): 35, 
    (42, 887): 41, 
    (44, 843): 43, 
    (44, 886): 34, 
    (44, 887): 40, 
    (44, 888): 42, 
    (44, 889): 0, 
}


# 状态 > 状态函数的字典
STATUS_HASH = {
    0: status_0,
    1: status_1,
    2: status_2,
    3: status_3,
    4: status_4,
    5: status_5,
    6: status_6,
    7: status_7,
    8: status_8,
    9: status_9,
    10: status_10,
    11: status_11,
    12: status_12,
    13: status_13,
    14: status_14,
    15: status_15,
    16: status_16,
    17: status_17,
    18: status_18,
    19: status_19,
    20: status_20,
    21: status_21,
    22: status_22,
    23: status_23,
    24: status_24,
    25: status_25,
    26: status_26,
    27: status_27,
    28: status_28,
    29: status_29,
    30: status_30,
    31: status_31,
    32: status_32,
    33: status_33,
    34: status_34,
    35: status_35,
    36: status_36,
    37: status_37,
    38: status_38,
    39: status_39,
    40: status_40,
    41: status_41,
    42: status_42,
    43: status_43,
    44: status_44,
}


def parse(lexical_iterator: ms_parser.lexical.LexicalBase):
    status_stack = [44]  # 初始化状态栈
    symbol_stack = []  # 初始化对象栈

    action = status_44  # 初始化状态函数
    terminal = lexical_iterator.lex()  # 词法解析出下一个终结符
    next_terminal = False
    try:
        while action:
            if next_terminal is True:
                terminal = lexical_iterator.lex()  # 词法解析出下一个终结符
            action, next_terminal = action(status_stack, symbol_stack, terminal)  # 调用状态函数
    except KeyError as e:
        next_terminal_list = []
        for _ in range(10):
            if terminal.is_end:
                break
            next_terminal_list.append(terminal.symbol_value)
            terminal = lexical_iterator.lex()
        next_terminal_text = "".join(next_terminal_list)
        raise KeyError("解析失败:", next_terminal_text) from e

    return symbol_stack[0]  # 返回最终结果

